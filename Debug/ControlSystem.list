
ControlSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006114  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  080061d4  080061d4  000071d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006284  08006284  00008070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08006284  08006284  00008070  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08006284  08006284  00008070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006284  08006284  00007284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006288  08006288  00007288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  0800628c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  20000070  080062fc  00008070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ec  080062fc  000082ec  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bb03  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d47  00000000  00000000  00013b9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d10  00000000  00000000  000158e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a3a  00000000  00000000  000165f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010736  00000000  00000000  00017032  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e8a6  00000000  00000000  00027768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00066011  00000000  00000000  0003600e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009c01f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003134  00000000  00000000  0009c064  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0009f198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080061bc 	.word	0x080061bc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	080061bc 	.word	0x080061bc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_cfrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	0008      	movs	r0, r1
 8000224:	4661      	mov	r1, ip
 8000226:	e7ff      	b.n	8000228 <__aeabi_cfcmpeq>

08000228 <__aeabi_cfcmpeq>:
 8000228:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800022a:	f000 f9d1 	bl	80005d0 <__lesf2>
 800022e:	2800      	cmp	r0, #0
 8000230:	d401      	bmi.n	8000236 <__aeabi_cfcmpeq+0xe>
 8000232:	2100      	movs	r1, #0
 8000234:	42c8      	cmn	r0, r1
 8000236:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000238 <__aeabi_fcmpeq>:
 8000238:	b510      	push	{r4, lr}
 800023a:	f000 f959 	bl	80004f0 <__eqsf2>
 800023e:	4240      	negs	r0, r0
 8000240:	3001      	adds	r0, #1
 8000242:	bd10      	pop	{r4, pc}

08000244 <__aeabi_fcmplt>:
 8000244:	b510      	push	{r4, lr}
 8000246:	f000 f9c3 	bl	80005d0 <__lesf2>
 800024a:	2800      	cmp	r0, #0
 800024c:	db01      	blt.n	8000252 <__aeabi_fcmplt+0xe>
 800024e:	2000      	movs	r0, #0
 8000250:	bd10      	pop	{r4, pc}
 8000252:	2001      	movs	r0, #1
 8000254:	bd10      	pop	{r4, pc}
 8000256:	46c0      	nop			@ (mov r8, r8)

08000258 <__aeabi_fcmple>:
 8000258:	b510      	push	{r4, lr}
 800025a:	f000 f9b9 	bl	80005d0 <__lesf2>
 800025e:	2800      	cmp	r0, #0
 8000260:	dd01      	ble.n	8000266 <__aeabi_fcmple+0xe>
 8000262:	2000      	movs	r0, #0
 8000264:	bd10      	pop	{r4, pc}
 8000266:	2001      	movs	r0, #1
 8000268:	bd10      	pop	{r4, pc}
 800026a:	46c0      	nop			@ (mov r8, r8)

0800026c <__aeabi_fcmpgt>:
 800026c:	b510      	push	{r4, lr}
 800026e:	f000 f967 	bl	8000540 <__gesf2>
 8000272:	2800      	cmp	r0, #0
 8000274:	dc01      	bgt.n	800027a <__aeabi_fcmpgt+0xe>
 8000276:	2000      	movs	r0, #0
 8000278:	bd10      	pop	{r4, pc}
 800027a:	2001      	movs	r0, #1
 800027c:	bd10      	pop	{r4, pc}
 800027e:	46c0      	nop			@ (mov r8, r8)

08000280 <__aeabi_fcmpge>:
 8000280:	b510      	push	{r4, lr}
 8000282:	f000 f95d 	bl	8000540 <__gesf2>
 8000286:	2800      	cmp	r0, #0
 8000288:	da01      	bge.n	800028e <__aeabi_fcmpge+0xe>
 800028a:	2000      	movs	r0, #0
 800028c:	bd10      	pop	{r4, pc}
 800028e:	2001      	movs	r0, #1
 8000290:	bd10      	pop	{r4, pc}
 8000292:	46c0      	nop			@ (mov r8, r8)

08000294 <__aeabi_f2uiz>:
 8000294:	219e      	movs	r1, #158	@ 0x9e
 8000296:	b510      	push	{r4, lr}
 8000298:	05c9      	lsls	r1, r1, #23
 800029a:	1c04      	adds	r4, r0, #0
 800029c:	f7ff fff0 	bl	8000280 <__aeabi_fcmpge>
 80002a0:	2800      	cmp	r0, #0
 80002a2:	d103      	bne.n	80002ac <__aeabi_f2uiz+0x18>
 80002a4:	1c20      	adds	r0, r4, #0
 80002a6:	f000 fd99 	bl	8000ddc <__aeabi_f2iz>
 80002aa:	bd10      	pop	{r4, pc}
 80002ac:	219e      	movs	r1, #158	@ 0x9e
 80002ae:	1c20      	adds	r0, r4, #0
 80002b0:	05c9      	lsls	r1, r1, #23
 80002b2:	f000 fb2f 	bl	8000914 <__aeabi_fsub>
 80002b6:	f000 fd91 	bl	8000ddc <__aeabi_f2iz>
 80002ba:	2380      	movs	r3, #128	@ 0x80
 80002bc:	061b      	lsls	r3, r3, #24
 80002be:	469c      	mov	ip, r3
 80002c0:	4460      	add	r0, ip
 80002c2:	e7f2      	b.n	80002aa <__aeabi_f2uiz+0x16>

080002c4 <__aeabi_fdiv>:
 80002c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002c6:	4646      	mov	r6, r8
 80002c8:	464f      	mov	r7, r9
 80002ca:	46d6      	mov	lr, sl
 80002cc:	0245      	lsls	r5, r0, #9
 80002ce:	b5c0      	push	{r6, r7, lr}
 80002d0:	0fc3      	lsrs	r3, r0, #31
 80002d2:	0047      	lsls	r7, r0, #1
 80002d4:	4698      	mov	r8, r3
 80002d6:	1c0e      	adds	r6, r1, #0
 80002d8:	0a6d      	lsrs	r5, r5, #9
 80002da:	0e3f      	lsrs	r7, r7, #24
 80002dc:	d05b      	beq.n	8000396 <__aeabi_fdiv+0xd2>
 80002de:	2fff      	cmp	r7, #255	@ 0xff
 80002e0:	d021      	beq.n	8000326 <__aeabi_fdiv+0x62>
 80002e2:	2380      	movs	r3, #128	@ 0x80
 80002e4:	00ed      	lsls	r5, r5, #3
 80002e6:	04db      	lsls	r3, r3, #19
 80002e8:	431d      	orrs	r5, r3
 80002ea:	2300      	movs	r3, #0
 80002ec:	4699      	mov	r9, r3
 80002ee:	469a      	mov	sl, r3
 80002f0:	3f7f      	subs	r7, #127	@ 0x7f
 80002f2:	0274      	lsls	r4, r6, #9
 80002f4:	0073      	lsls	r3, r6, #1
 80002f6:	0a64      	lsrs	r4, r4, #9
 80002f8:	0e1b      	lsrs	r3, r3, #24
 80002fa:	0ff6      	lsrs	r6, r6, #31
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d020      	beq.n	8000342 <__aeabi_fdiv+0x7e>
 8000300:	2bff      	cmp	r3, #255	@ 0xff
 8000302:	d043      	beq.n	800038c <__aeabi_fdiv+0xc8>
 8000304:	2280      	movs	r2, #128	@ 0x80
 8000306:	2000      	movs	r0, #0
 8000308:	00e4      	lsls	r4, r4, #3
 800030a:	04d2      	lsls	r2, r2, #19
 800030c:	4314      	orrs	r4, r2
 800030e:	3b7f      	subs	r3, #127	@ 0x7f
 8000310:	4642      	mov	r2, r8
 8000312:	1aff      	subs	r7, r7, r3
 8000314:	464b      	mov	r3, r9
 8000316:	4072      	eors	r2, r6
 8000318:	2b0f      	cmp	r3, #15
 800031a:	d900      	bls.n	800031e <__aeabi_fdiv+0x5a>
 800031c:	e09d      	b.n	800045a <__aeabi_fdiv+0x196>
 800031e:	4971      	ldr	r1, [pc, #452]	@ (80004e4 <__aeabi_fdiv+0x220>)
 8000320:	009b      	lsls	r3, r3, #2
 8000322:	58cb      	ldr	r3, [r1, r3]
 8000324:	469f      	mov	pc, r3
 8000326:	2d00      	cmp	r5, #0
 8000328:	d15a      	bne.n	80003e0 <__aeabi_fdiv+0x11c>
 800032a:	2308      	movs	r3, #8
 800032c:	4699      	mov	r9, r3
 800032e:	3b06      	subs	r3, #6
 8000330:	0274      	lsls	r4, r6, #9
 8000332:	469a      	mov	sl, r3
 8000334:	0073      	lsls	r3, r6, #1
 8000336:	27ff      	movs	r7, #255	@ 0xff
 8000338:	0a64      	lsrs	r4, r4, #9
 800033a:	0e1b      	lsrs	r3, r3, #24
 800033c:	0ff6      	lsrs	r6, r6, #31
 800033e:	2b00      	cmp	r3, #0
 8000340:	d1de      	bne.n	8000300 <__aeabi_fdiv+0x3c>
 8000342:	2c00      	cmp	r4, #0
 8000344:	d13b      	bne.n	80003be <__aeabi_fdiv+0xfa>
 8000346:	2301      	movs	r3, #1
 8000348:	4642      	mov	r2, r8
 800034a:	4649      	mov	r1, r9
 800034c:	4072      	eors	r2, r6
 800034e:	4319      	orrs	r1, r3
 8000350:	290e      	cmp	r1, #14
 8000352:	d818      	bhi.n	8000386 <__aeabi_fdiv+0xc2>
 8000354:	4864      	ldr	r0, [pc, #400]	@ (80004e8 <__aeabi_fdiv+0x224>)
 8000356:	0089      	lsls	r1, r1, #2
 8000358:	5841      	ldr	r1, [r0, r1]
 800035a:	468f      	mov	pc, r1
 800035c:	4653      	mov	r3, sl
 800035e:	2b02      	cmp	r3, #2
 8000360:	d100      	bne.n	8000364 <__aeabi_fdiv+0xa0>
 8000362:	e0b8      	b.n	80004d6 <__aeabi_fdiv+0x212>
 8000364:	2b03      	cmp	r3, #3
 8000366:	d06e      	beq.n	8000446 <__aeabi_fdiv+0x182>
 8000368:	4642      	mov	r2, r8
 800036a:	002c      	movs	r4, r5
 800036c:	2b01      	cmp	r3, #1
 800036e:	d140      	bne.n	80003f2 <__aeabi_fdiv+0x12e>
 8000370:	2000      	movs	r0, #0
 8000372:	2400      	movs	r4, #0
 8000374:	05c0      	lsls	r0, r0, #23
 8000376:	4320      	orrs	r0, r4
 8000378:	07d2      	lsls	r2, r2, #31
 800037a:	4310      	orrs	r0, r2
 800037c:	bce0      	pop	{r5, r6, r7}
 800037e:	46ba      	mov	sl, r7
 8000380:	46b1      	mov	r9, r6
 8000382:	46a8      	mov	r8, r5
 8000384:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000386:	20ff      	movs	r0, #255	@ 0xff
 8000388:	2400      	movs	r4, #0
 800038a:	e7f3      	b.n	8000374 <__aeabi_fdiv+0xb0>
 800038c:	2c00      	cmp	r4, #0
 800038e:	d120      	bne.n	80003d2 <__aeabi_fdiv+0x10e>
 8000390:	2302      	movs	r3, #2
 8000392:	3fff      	subs	r7, #255	@ 0xff
 8000394:	e7d8      	b.n	8000348 <__aeabi_fdiv+0x84>
 8000396:	2d00      	cmp	r5, #0
 8000398:	d105      	bne.n	80003a6 <__aeabi_fdiv+0xe2>
 800039a:	2304      	movs	r3, #4
 800039c:	4699      	mov	r9, r3
 800039e:	3b03      	subs	r3, #3
 80003a0:	2700      	movs	r7, #0
 80003a2:	469a      	mov	sl, r3
 80003a4:	e7a5      	b.n	80002f2 <__aeabi_fdiv+0x2e>
 80003a6:	0028      	movs	r0, r5
 80003a8:	f000 fdce 	bl	8000f48 <__clzsi2>
 80003ac:	2776      	movs	r7, #118	@ 0x76
 80003ae:	1f43      	subs	r3, r0, #5
 80003b0:	409d      	lsls	r5, r3
 80003b2:	2300      	movs	r3, #0
 80003b4:	427f      	negs	r7, r7
 80003b6:	4699      	mov	r9, r3
 80003b8:	469a      	mov	sl, r3
 80003ba:	1a3f      	subs	r7, r7, r0
 80003bc:	e799      	b.n	80002f2 <__aeabi_fdiv+0x2e>
 80003be:	0020      	movs	r0, r4
 80003c0:	f000 fdc2 	bl	8000f48 <__clzsi2>
 80003c4:	1f43      	subs	r3, r0, #5
 80003c6:	409c      	lsls	r4, r3
 80003c8:	2376      	movs	r3, #118	@ 0x76
 80003ca:	425b      	negs	r3, r3
 80003cc:	1a1b      	subs	r3, r3, r0
 80003ce:	2000      	movs	r0, #0
 80003d0:	e79e      	b.n	8000310 <__aeabi_fdiv+0x4c>
 80003d2:	2303      	movs	r3, #3
 80003d4:	464a      	mov	r2, r9
 80003d6:	431a      	orrs	r2, r3
 80003d8:	4691      	mov	r9, r2
 80003da:	2003      	movs	r0, #3
 80003dc:	33fc      	adds	r3, #252	@ 0xfc
 80003de:	e797      	b.n	8000310 <__aeabi_fdiv+0x4c>
 80003e0:	230c      	movs	r3, #12
 80003e2:	4699      	mov	r9, r3
 80003e4:	3b09      	subs	r3, #9
 80003e6:	27ff      	movs	r7, #255	@ 0xff
 80003e8:	469a      	mov	sl, r3
 80003ea:	e782      	b.n	80002f2 <__aeabi_fdiv+0x2e>
 80003ec:	2803      	cmp	r0, #3
 80003ee:	d02c      	beq.n	800044a <__aeabi_fdiv+0x186>
 80003f0:	0032      	movs	r2, r6
 80003f2:	0038      	movs	r0, r7
 80003f4:	307f      	adds	r0, #127	@ 0x7f
 80003f6:	2800      	cmp	r0, #0
 80003f8:	dd47      	ble.n	800048a <__aeabi_fdiv+0x1c6>
 80003fa:	0763      	lsls	r3, r4, #29
 80003fc:	d004      	beq.n	8000408 <__aeabi_fdiv+0x144>
 80003fe:	230f      	movs	r3, #15
 8000400:	4023      	ands	r3, r4
 8000402:	2b04      	cmp	r3, #4
 8000404:	d000      	beq.n	8000408 <__aeabi_fdiv+0x144>
 8000406:	3404      	adds	r4, #4
 8000408:	0123      	lsls	r3, r4, #4
 800040a:	d503      	bpl.n	8000414 <__aeabi_fdiv+0x150>
 800040c:	0038      	movs	r0, r7
 800040e:	4b37      	ldr	r3, [pc, #220]	@ (80004ec <__aeabi_fdiv+0x228>)
 8000410:	3080      	adds	r0, #128	@ 0x80
 8000412:	401c      	ands	r4, r3
 8000414:	28fe      	cmp	r0, #254	@ 0xfe
 8000416:	dcb6      	bgt.n	8000386 <__aeabi_fdiv+0xc2>
 8000418:	01a4      	lsls	r4, r4, #6
 800041a:	0a64      	lsrs	r4, r4, #9
 800041c:	b2c0      	uxtb	r0, r0
 800041e:	e7a9      	b.n	8000374 <__aeabi_fdiv+0xb0>
 8000420:	2480      	movs	r4, #128	@ 0x80
 8000422:	2200      	movs	r2, #0
 8000424:	20ff      	movs	r0, #255	@ 0xff
 8000426:	03e4      	lsls	r4, r4, #15
 8000428:	e7a4      	b.n	8000374 <__aeabi_fdiv+0xb0>
 800042a:	2380      	movs	r3, #128	@ 0x80
 800042c:	03db      	lsls	r3, r3, #15
 800042e:	421d      	tst	r5, r3
 8000430:	d001      	beq.n	8000436 <__aeabi_fdiv+0x172>
 8000432:	421c      	tst	r4, r3
 8000434:	d00b      	beq.n	800044e <__aeabi_fdiv+0x18a>
 8000436:	2480      	movs	r4, #128	@ 0x80
 8000438:	03e4      	lsls	r4, r4, #15
 800043a:	432c      	orrs	r4, r5
 800043c:	0264      	lsls	r4, r4, #9
 800043e:	4642      	mov	r2, r8
 8000440:	20ff      	movs	r0, #255	@ 0xff
 8000442:	0a64      	lsrs	r4, r4, #9
 8000444:	e796      	b.n	8000374 <__aeabi_fdiv+0xb0>
 8000446:	4646      	mov	r6, r8
 8000448:	002c      	movs	r4, r5
 800044a:	2380      	movs	r3, #128	@ 0x80
 800044c:	03db      	lsls	r3, r3, #15
 800044e:	431c      	orrs	r4, r3
 8000450:	0264      	lsls	r4, r4, #9
 8000452:	0032      	movs	r2, r6
 8000454:	20ff      	movs	r0, #255	@ 0xff
 8000456:	0a64      	lsrs	r4, r4, #9
 8000458:	e78c      	b.n	8000374 <__aeabi_fdiv+0xb0>
 800045a:	016d      	lsls	r5, r5, #5
 800045c:	0160      	lsls	r0, r4, #5
 800045e:	4285      	cmp	r5, r0
 8000460:	d22d      	bcs.n	80004be <__aeabi_fdiv+0x1fa>
 8000462:	231b      	movs	r3, #27
 8000464:	2400      	movs	r4, #0
 8000466:	3f01      	subs	r7, #1
 8000468:	2601      	movs	r6, #1
 800046a:	0029      	movs	r1, r5
 800046c:	0064      	lsls	r4, r4, #1
 800046e:	006d      	lsls	r5, r5, #1
 8000470:	2900      	cmp	r1, #0
 8000472:	db01      	blt.n	8000478 <__aeabi_fdiv+0x1b4>
 8000474:	4285      	cmp	r5, r0
 8000476:	d301      	bcc.n	800047c <__aeabi_fdiv+0x1b8>
 8000478:	1a2d      	subs	r5, r5, r0
 800047a:	4334      	orrs	r4, r6
 800047c:	3b01      	subs	r3, #1
 800047e:	2b00      	cmp	r3, #0
 8000480:	d1f3      	bne.n	800046a <__aeabi_fdiv+0x1a6>
 8000482:	1e6b      	subs	r3, r5, #1
 8000484:	419d      	sbcs	r5, r3
 8000486:	432c      	orrs	r4, r5
 8000488:	e7b3      	b.n	80003f2 <__aeabi_fdiv+0x12e>
 800048a:	2301      	movs	r3, #1
 800048c:	1a1b      	subs	r3, r3, r0
 800048e:	2b1b      	cmp	r3, #27
 8000490:	dd00      	ble.n	8000494 <__aeabi_fdiv+0x1d0>
 8000492:	e76d      	b.n	8000370 <__aeabi_fdiv+0xac>
 8000494:	0021      	movs	r1, r4
 8000496:	379e      	adds	r7, #158	@ 0x9e
 8000498:	40d9      	lsrs	r1, r3
 800049a:	40bc      	lsls	r4, r7
 800049c:	000b      	movs	r3, r1
 800049e:	1e61      	subs	r1, r4, #1
 80004a0:	418c      	sbcs	r4, r1
 80004a2:	4323      	orrs	r3, r4
 80004a4:	0759      	lsls	r1, r3, #29
 80004a6:	d004      	beq.n	80004b2 <__aeabi_fdiv+0x1ee>
 80004a8:	210f      	movs	r1, #15
 80004aa:	4019      	ands	r1, r3
 80004ac:	2904      	cmp	r1, #4
 80004ae:	d000      	beq.n	80004b2 <__aeabi_fdiv+0x1ee>
 80004b0:	3304      	adds	r3, #4
 80004b2:	0159      	lsls	r1, r3, #5
 80004b4:	d413      	bmi.n	80004de <__aeabi_fdiv+0x21a>
 80004b6:	019b      	lsls	r3, r3, #6
 80004b8:	2000      	movs	r0, #0
 80004ba:	0a5c      	lsrs	r4, r3, #9
 80004bc:	e75a      	b.n	8000374 <__aeabi_fdiv+0xb0>
 80004be:	231a      	movs	r3, #26
 80004c0:	2401      	movs	r4, #1
 80004c2:	1a2d      	subs	r5, r5, r0
 80004c4:	e7d0      	b.n	8000468 <__aeabi_fdiv+0x1a4>
 80004c6:	1e98      	subs	r0, r3, #2
 80004c8:	4243      	negs	r3, r0
 80004ca:	4158      	adcs	r0, r3
 80004cc:	4240      	negs	r0, r0
 80004ce:	0032      	movs	r2, r6
 80004d0:	2400      	movs	r4, #0
 80004d2:	b2c0      	uxtb	r0, r0
 80004d4:	e74e      	b.n	8000374 <__aeabi_fdiv+0xb0>
 80004d6:	4642      	mov	r2, r8
 80004d8:	20ff      	movs	r0, #255	@ 0xff
 80004da:	2400      	movs	r4, #0
 80004dc:	e74a      	b.n	8000374 <__aeabi_fdiv+0xb0>
 80004de:	2001      	movs	r0, #1
 80004e0:	2400      	movs	r4, #0
 80004e2:	e747      	b.n	8000374 <__aeabi_fdiv+0xb0>
 80004e4:	080061d4 	.word	0x080061d4
 80004e8:	08006214 	.word	0x08006214
 80004ec:	f7ffffff 	.word	0xf7ffffff

080004f0 <__eqsf2>:
 80004f0:	b570      	push	{r4, r5, r6, lr}
 80004f2:	0042      	lsls	r2, r0, #1
 80004f4:	024e      	lsls	r6, r1, #9
 80004f6:	004c      	lsls	r4, r1, #1
 80004f8:	0245      	lsls	r5, r0, #9
 80004fa:	0a6d      	lsrs	r5, r5, #9
 80004fc:	0e12      	lsrs	r2, r2, #24
 80004fe:	0fc3      	lsrs	r3, r0, #31
 8000500:	0a76      	lsrs	r6, r6, #9
 8000502:	0e24      	lsrs	r4, r4, #24
 8000504:	0fc9      	lsrs	r1, r1, #31
 8000506:	2aff      	cmp	r2, #255	@ 0xff
 8000508:	d010      	beq.n	800052c <__eqsf2+0x3c>
 800050a:	2cff      	cmp	r4, #255	@ 0xff
 800050c:	d00c      	beq.n	8000528 <__eqsf2+0x38>
 800050e:	2001      	movs	r0, #1
 8000510:	42a2      	cmp	r2, r4
 8000512:	d10a      	bne.n	800052a <__eqsf2+0x3a>
 8000514:	42b5      	cmp	r5, r6
 8000516:	d108      	bne.n	800052a <__eqsf2+0x3a>
 8000518:	428b      	cmp	r3, r1
 800051a:	d00f      	beq.n	800053c <__eqsf2+0x4c>
 800051c:	2a00      	cmp	r2, #0
 800051e:	d104      	bne.n	800052a <__eqsf2+0x3a>
 8000520:	0028      	movs	r0, r5
 8000522:	1e43      	subs	r3, r0, #1
 8000524:	4198      	sbcs	r0, r3
 8000526:	e000      	b.n	800052a <__eqsf2+0x3a>
 8000528:	2001      	movs	r0, #1
 800052a:	bd70      	pop	{r4, r5, r6, pc}
 800052c:	2001      	movs	r0, #1
 800052e:	2cff      	cmp	r4, #255	@ 0xff
 8000530:	d1fb      	bne.n	800052a <__eqsf2+0x3a>
 8000532:	4335      	orrs	r5, r6
 8000534:	d1f9      	bne.n	800052a <__eqsf2+0x3a>
 8000536:	404b      	eors	r3, r1
 8000538:	0018      	movs	r0, r3
 800053a:	e7f6      	b.n	800052a <__eqsf2+0x3a>
 800053c:	2000      	movs	r0, #0
 800053e:	e7f4      	b.n	800052a <__eqsf2+0x3a>

08000540 <__gesf2>:
 8000540:	b530      	push	{r4, r5, lr}
 8000542:	0042      	lsls	r2, r0, #1
 8000544:	0244      	lsls	r4, r0, #9
 8000546:	024d      	lsls	r5, r1, #9
 8000548:	0fc3      	lsrs	r3, r0, #31
 800054a:	0048      	lsls	r0, r1, #1
 800054c:	0a64      	lsrs	r4, r4, #9
 800054e:	0e12      	lsrs	r2, r2, #24
 8000550:	0a6d      	lsrs	r5, r5, #9
 8000552:	0e00      	lsrs	r0, r0, #24
 8000554:	0fc9      	lsrs	r1, r1, #31
 8000556:	2aff      	cmp	r2, #255	@ 0xff
 8000558:	d018      	beq.n	800058c <__gesf2+0x4c>
 800055a:	28ff      	cmp	r0, #255	@ 0xff
 800055c:	d00a      	beq.n	8000574 <__gesf2+0x34>
 800055e:	2a00      	cmp	r2, #0
 8000560:	d11e      	bne.n	80005a0 <__gesf2+0x60>
 8000562:	2800      	cmp	r0, #0
 8000564:	d10a      	bne.n	800057c <__gesf2+0x3c>
 8000566:	2d00      	cmp	r5, #0
 8000568:	d029      	beq.n	80005be <__gesf2+0x7e>
 800056a:	2c00      	cmp	r4, #0
 800056c:	d12d      	bne.n	80005ca <__gesf2+0x8a>
 800056e:	0048      	lsls	r0, r1, #1
 8000570:	3801      	subs	r0, #1
 8000572:	bd30      	pop	{r4, r5, pc}
 8000574:	2d00      	cmp	r5, #0
 8000576:	d125      	bne.n	80005c4 <__gesf2+0x84>
 8000578:	2a00      	cmp	r2, #0
 800057a:	d101      	bne.n	8000580 <__gesf2+0x40>
 800057c:	2c00      	cmp	r4, #0
 800057e:	d0f6      	beq.n	800056e <__gesf2+0x2e>
 8000580:	428b      	cmp	r3, r1
 8000582:	d019      	beq.n	80005b8 <__gesf2+0x78>
 8000584:	2001      	movs	r0, #1
 8000586:	425b      	negs	r3, r3
 8000588:	4318      	orrs	r0, r3
 800058a:	e7f2      	b.n	8000572 <__gesf2+0x32>
 800058c:	2c00      	cmp	r4, #0
 800058e:	d119      	bne.n	80005c4 <__gesf2+0x84>
 8000590:	28ff      	cmp	r0, #255	@ 0xff
 8000592:	d1f7      	bne.n	8000584 <__gesf2+0x44>
 8000594:	2d00      	cmp	r5, #0
 8000596:	d115      	bne.n	80005c4 <__gesf2+0x84>
 8000598:	2000      	movs	r0, #0
 800059a:	428b      	cmp	r3, r1
 800059c:	d1f2      	bne.n	8000584 <__gesf2+0x44>
 800059e:	e7e8      	b.n	8000572 <__gesf2+0x32>
 80005a0:	2800      	cmp	r0, #0
 80005a2:	d0ef      	beq.n	8000584 <__gesf2+0x44>
 80005a4:	428b      	cmp	r3, r1
 80005a6:	d1ed      	bne.n	8000584 <__gesf2+0x44>
 80005a8:	4282      	cmp	r2, r0
 80005aa:	dceb      	bgt.n	8000584 <__gesf2+0x44>
 80005ac:	db04      	blt.n	80005b8 <__gesf2+0x78>
 80005ae:	42ac      	cmp	r4, r5
 80005b0:	d8e8      	bhi.n	8000584 <__gesf2+0x44>
 80005b2:	2000      	movs	r0, #0
 80005b4:	42ac      	cmp	r4, r5
 80005b6:	d2dc      	bcs.n	8000572 <__gesf2+0x32>
 80005b8:	0058      	lsls	r0, r3, #1
 80005ba:	3801      	subs	r0, #1
 80005bc:	e7d9      	b.n	8000572 <__gesf2+0x32>
 80005be:	2c00      	cmp	r4, #0
 80005c0:	d0d7      	beq.n	8000572 <__gesf2+0x32>
 80005c2:	e7df      	b.n	8000584 <__gesf2+0x44>
 80005c4:	2002      	movs	r0, #2
 80005c6:	4240      	negs	r0, r0
 80005c8:	e7d3      	b.n	8000572 <__gesf2+0x32>
 80005ca:	428b      	cmp	r3, r1
 80005cc:	d1da      	bne.n	8000584 <__gesf2+0x44>
 80005ce:	e7ee      	b.n	80005ae <__gesf2+0x6e>

080005d0 <__lesf2>:
 80005d0:	b530      	push	{r4, r5, lr}
 80005d2:	0042      	lsls	r2, r0, #1
 80005d4:	0244      	lsls	r4, r0, #9
 80005d6:	024d      	lsls	r5, r1, #9
 80005d8:	0fc3      	lsrs	r3, r0, #31
 80005da:	0048      	lsls	r0, r1, #1
 80005dc:	0a64      	lsrs	r4, r4, #9
 80005de:	0e12      	lsrs	r2, r2, #24
 80005e0:	0a6d      	lsrs	r5, r5, #9
 80005e2:	0e00      	lsrs	r0, r0, #24
 80005e4:	0fc9      	lsrs	r1, r1, #31
 80005e6:	2aff      	cmp	r2, #255	@ 0xff
 80005e8:	d017      	beq.n	800061a <__lesf2+0x4a>
 80005ea:	28ff      	cmp	r0, #255	@ 0xff
 80005ec:	d00a      	beq.n	8000604 <__lesf2+0x34>
 80005ee:	2a00      	cmp	r2, #0
 80005f0:	d11b      	bne.n	800062a <__lesf2+0x5a>
 80005f2:	2800      	cmp	r0, #0
 80005f4:	d10a      	bne.n	800060c <__lesf2+0x3c>
 80005f6:	2d00      	cmp	r5, #0
 80005f8:	d01d      	beq.n	8000636 <__lesf2+0x66>
 80005fa:	2c00      	cmp	r4, #0
 80005fc:	d12d      	bne.n	800065a <__lesf2+0x8a>
 80005fe:	0048      	lsls	r0, r1, #1
 8000600:	3801      	subs	r0, #1
 8000602:	e011      	b.n	8000628 <__lesf2+0x58>
 8000604:	2d00      	cmp	r5, #0
 8000606:	d10e      	bne.n	8000626 <__lesf2+0x56>
 8000608:	2a00      	cmp	r2, #0
 800060a:	d101      	bne.n	8000610 <__lesf2+0x40>
 800060c:	2c00      	cmp	r4, #0
 800060e:	d0f6      	beq.n	80005fe <__lesf2+0x2e>
 8000610:	428b      	cmp	r3, r1
 8000612:	d10c      	bne.n	800062e <__lesf2+0x5e>
 8000614:	0058      	lsls	r0, r3, #1
 8000616:	3801      	subs	r0, #1
 8000618:	e006      	b.n	8000628 <__lesf2+0x58>
 800061a:	2c00      	cmp	r4, #0
 800061c:	d103      	bne.n	8000626 <__lesf2+0x56>
 800061e:	28ff      	cmp	r0, #255	@ 0xff
 8000620:	d105      	bne.n	800062e <__lesf2+0x5e>
 8000622:	2d00      	cmp	r5, #0
 8000624:	d015      	beq.n	8000652 <__lesf2+0x82>
 8000626:	2002      	movs	r0, #2
 8000628:	bd30      	pop	{r4, r5, pc}
 800062a:	2800      	cmp	r0, #0
 800062c:	d106      	bne.n	800063c <__lesf2+0x6c>
 800062e:	2001      	movs	r0, #1
 8000630:	425b      	negs	r3, r3
 8000632:	4318      	orrs	r0, r3
 8000634:	e7f8      	b.n	8000628 <__lesf2+0x58>
 8000636:	2c00      	cmp	r4, #0
 8000638:	d0f6      	beq.n	8000628 <__lesf2+0x58>
 800063a:	e7f8      	b.n	800062e <__lesf2+0x5e>
 800063c:	428b      	cmp	r3, r1
 800063e:	d1f6      	bne.n	800062e <__lesf2+0x5e>
 8000640:	4282      	cmp	r2, r0
 8000642:	dcf4      	bgt.n	800062e <__lesf2+0x5e>
 8000644:	dbe6      	blt.n	8000614 <__lesf2+0x44>
 8000646:	42ac      	cmp	r4, r5
 8000648:	d8f1      	bhi.n	800062e <__lesf2+0x5e>
 800064a:	2000      	movs	r0, #0
 800064c:	42ac      	cmp	r4, r5
 800064e:	d2eb      	bcs.n	8000628 <__lesf2+0x58>
 8000650:	e7e0      	b.n	8000614 <__lesf2+0x44>
 8000652:	2000      	movs	r0, #0
 8000654:	428b      	cmp	r3, r1
 8000656:	d1ea      	bne.n	800062e <__lesf2+0x5e>
 8000658:	e7e6      	b.n	8000628 <__lesf2+0x58>
 800065a:	428b      	cmp	r3, r1
 800065c:	d1e7      	bne.n	800062e <__lesf2+0x5e>
 800065e:	e7f2      	b.n	8000646 <__lesf2+0x76>

08000660 <__aeabi_fmul>:
 8000660:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000662:	464f      	mov	r7, r9
 8000664:	4646      	mov	r6, r8
 8000666:	46d6      	mov	lr, sl
 8000668:	0044      	lsls	r4, r0, #1
 800066a:	b5c0      	push	{r6, r7, lr}
 800066c:	0246      	lsls	r6, r0, #9
 800066e:	1c0f      	adds	r7, r1, #0
 8000670:	0a76      	lsrs	r6, r6, #9
 8000672:	0e24      	lsrs	r4, r4, #24
 8000674:	0fc5      	lsrs	r5, r0, #31
 8000676:	2c00      	cmp	r4, #0
 8000678:	d100      	bne.n	800067c <__aeabi_fmul+0x1c>
 800067a:	e0da      	b.n	8000832 <__aeabi_fmul+0x1d2>
 800067c:	2cff      	cmp	r4, #255	@ 0xff
 800067e:	d074      	beq.n	800076a <__aeabi_fmul+0x10a>
 8000680:	2380      	movs	r3, #128	@ 0x80
 8000682:	00f6      	lsls	r6, r6, #3
 8000684:	04db      	lsls	r3, r3, #19
 8000686:	431e      	orrs	r6, r3
 8000688:	2300      	movs	r3, #0
 800068a:	4699      	mov	r9, r3
 800068c:	469a      	mov	sl, r3
 800068e:	3c7f      	subs	r4, #127	@ 0x7f
 8000690:	027b      	lsls	r3, r7, #9
 8000692:	0a5b      	lsrs	r3, r3, #9
 8000694:	4698      	mov	r8, r3
 8000696:	007b      	lsls	r3, r7, #1
 8000698:	0e1b      	lsrs	r3, r3, #24
 800069a:	0fff      	lsrs	r7, r7, #31
 800069c:	2b00      	cmp	r3, #0
 800069e:	d074      	beq.n	800078a <__aeabi_fmul+0x12a>
 80006a0:	2bff      	cmp	r3, #255	@ 0xff
 80006a2:	d100      	bne.n	80006a6 <__aeabi_fmul+0x46>
 80006a4:	e08e      	b.n	80007c4 <__aeabi_fmul+0x164>
 80006a6:	4642      	mov	r2, r8
 80006a8:	2180      	movs	r1, #128	@ 0x80
 80006aa:	00d2      	lsls	r2, r2, #3
 80006ac:	04c9      	lsls	r1, r1, #19
 80006ae:	4311      	orrs	r1, r2
 80006b0:	3b7f      	subs	r3, #127	@ 0x7f
 80006b2:	002a      	movs	r2, r5
 80006b4:	18e4      	adds	r4, r4, r3
 80006b6:	464b      	mov	r3, r9
 80006b8:	407a      	eors	r2, r7
 80006ba:	4688      	mov	r8, r1
 80006bc:	b2d2      	uxtb	r2, r2
 80006be:	2b0a      	cmp	r3, #10
 80006c0:	dc75      	bgt.n	80007ae <__aeabi_fmul+0x14e>
 80006c2:	464b      	mov	r3, r9
 80006c4:	2000      	movs	r0, #0
 80006c6:	2b02      	cmp	r3, #2
 80006c8:	dd0f      	ble.n	80006ea <__aeabi_fmul+0x8a>
 80006ca:	4649      	mov	r1, r9
 80006cc:	2301      	movs	r3, #1
 80006ce:	408b      	lsls	r3, r1
 80006d0:	21a6      	movs	r1, #166	@ 0xa6
 80006d2:	00c9      	lsls	r1, r1, #3
 80006d4:	420b      	tst	r3, r1
 80006d6:	d169      	bne.n	80007ac <__aeabi_fmul+0x14c>
 80006d8:	2190      	movs	r1, #144	@ 0x90
 80006da:	0089      	lsls	r1, r1, #2
 80006dc:	420b      	tst	r3, r1
 80006de:	d000      	beq.n	80006e2 <__aeabi_fmul+0x82>
 80006e0:	e100      	b.n	80008e4 <__aeabi_fmul+0x284>
 80006e2:	2188      	movs	r1, #136	@ 0x88
 80006e4:	4219      	tst	r1, r3
 80006e6:	d000      	beq.n	80006ea <__aeabi_fmul+0x8a>
 80006e8:	e0f5      	b.n	80008d6 <__aeabi_fmul+0x276>
 80006ea:	4641      	mov	r1, r8
 80006ec:	0409      	lsls	r1, r1, #16
 80006ee:	0c09      	lsrs	r1, r1, #16
 80006f0:	4643      	mov	r3, r8
 80006f2:	0008      	movs	r0, r1
 80006f4:	0c35      	lsrs	r5, r6, #16
 80006f6:	0436      	lsls	r6, r6, #16
 80006f8:	0c1b      	lsrs	r3, r3, #16
 80006fa:	0c36      	lsrs	r6, r6, #16
 80006fc:	4370      	muls	r0, r6
 80006fe:	4369      	muls	r1, r5
 8000700:	435e      	muls	r6, r3
 8000702:	435d      	muls	r5, r3
 8000704:	1876      	adds	r6, r6, r1
 8000706:	0c03      	lsrs	r3, r0, #16
 8000708:	199b      	adds	r3, r3, r6
 800070a:	4299      	cmp	r1, r3
 800070c:	d903      	bls.n	8000716 <__aeabi_fmul+0xb6>
 800070e:	2180      	movs	r1, #128	@ 0x80
 8000710:	0249      	lsls	r1, r1, #9
 8000712:	468c      	mov	ip, r1
 8000714:	4465      	add	r5, ip
 8000716:	0400      	lsls	r0, r0, #16
 8000718:	0419      	lsls	r1, r3, #16
 800071a:	0c00      	lsrs	r0, r0, #16
 800071c:	1809      	adds	r1, r1, r0
 800071e:	018e      	lsls	r6, r1, #6
 8000720:	1e70      	subs	r0, r6, #1
 8000722:	4186      	sbcs	r6, r0
 8000724:	0c1b      	lsrs	r3, r3, #16
 8000726:	0e89      	lsrs	r1, r1, #26
 8000728:	195b      	adds	r3, r3, r5
 800072a:	430e      	orrs	r6, r1
 800072c:	019b      	lsls	r3, r3, #6
 800072e:	431e      	orrs	r6, r3
 8000730:	011b      	lsls	r3, r3, #4
 8000732:	d46c      	bmi.n	800080e <__aeabi_fmul+0x1ae>
 8000734:	0023      	movs	r3, r4
 8000736:	337f      	adds	r3, #127	@ 0x7f
 8000738:	2b00      	cmp	r3, #0
 800073a:	dc00      	bgt.n	800073e <__aeabi_fmul+0xde>
 800073c:	e0b1      	b.n	80008a2 <__aeabi_fmul+0x242>
 800073e:	0015      	movs	r5, r2
 8000740:	0771      	lsls	r1, r6, #29
 8000742:	d00b      	beq.n	800075c <__aeabi_fmul+0xfc>
 8000744:	200f      	movs	r0, #15
 8000746:	0021      	movs	r1, r4
 8000748:	4030      	ands	r0, r6
 800074a:	2804      	cmp	r0, #4
 800074c:	d006      	beq.n	800075c <__aeabi_fmul+0xfc>
 800074e:	3604      	adds	r6, #4
 8000750:	0132      	lsls	r2, r6, #4
 8000752:	d503      	bpl.n	800075c <__aeabi_fmul+0xfc>
 8000754:	4b6e      	ldr	r3, [pc, #440]	@ (8000910 <__aeabi_fmul+0x2b0>)
 8000756:	401e      	ands	r6, r3
 8000758:	000b      	movs	r3, r1
 800075a:	3380      	adds	r3, #128	@ 0x80
 800075c:	2bfe      	cmp	r3, #254	@ 0xfe
 800075e:	dd00      	ble.n	8000762 <__aeabi_fmul+0x102>
 8000760:	e0bd      	b.n	80008de <__aeabi_fmul+0x27e>
 8000762:	01b2      	lsls	r2, r6, #6
 8000764:	0a52      	lsrs	r2, r2, #9
 8000766:	b2db      	uxtb	r3, r3
 8000768:	e048      	b.n	80007fc <__aeabi_fmul+0x19c>
 800076a:	2e00      	cmp	r6, #0
 800076c:	d000      	beq.n	8000770 <__aeabi_fmul+0x110>
 800076e:	e092      	b.n	8000896 <__aeabi_fmul+0x236>
 8000770:	2308      	movs	r3, #8
 8000772:	4699      	mov	r9, r3
 8000774:	3b06      	subs	r3, #6
 8000776:	469a      	mov	sl, r3
 8000778:	027b      	lsls	r3, r7, #9
 800077a:	0a5b      	lsrs	r3, r3, #9
 800077c:	4698      	mov	r8, r3
 800077e:	007b      	lsls	r3, r7, #1
 8000780:	24ff      	movs	r4, #255	@ 0xff
 8000782:	0e1b      	lsrs	r3, r3, #24
 8000784:	0fff      	lsrs	r7, r7, #31
 8000786:	2b00      	cmp	r3, #0
 8000788:	d18a      	bne.n	80006a0 <__aeabi_fmul+0x40>
 800078a:	4642      	mov	r2, r8
 800078c:	2a00      	cmp	r2, #0
 800078e:	d164      	bne.n	800085a <__aeabi_fmul+0x1fa>
 8000790:	4649      	mov	r1, r9
 8000792:	3201      	adds	r2, #1
 8000794:	4311      	orrs	r1, r2
 8000796:	4689      	mov	r9, r1
 8000798:	290a      	cmp	r1, #10
 800079a:	dc08      	bgt.n	80007ae <__aeabi_fmul+0x14e>
 800079c:	407d      	eors	r5, r7
 800079e:	2001      	movs	r0, #1
 80007a0:	b2ea      	uxtb	r2, r5
 80007a2:	2902      	cmp	r1, #2
 80007a4:	dc91      	bgt.n	80006ca <__aeabi_fmul+0x6a>
 80007a6:	0015      	movs	r5, r2
 80007a8:	2200      	movs	r2, #0
 80007aa:	e027      	b.n	80007fc <__aeabi_fmul+0x19c>
 80007ac:	0015      	movs	r5, r2
 80007ae:	4653      	mov	r3, sl
 80007b0:	2b02      	cmp	r3, #2
 80007b2:	d100      	bne.n	80007b6 <__aeabi_fmul+0x156>
 80007b4:	e093      	b.n	80008de <__aeabi_fmul+0x27e>
 80007b6:	2b03      	cmp	r3, #3
 80007b8:	d01a      	beq.n	80007f0 <__aeabi_fmul+0x190>
 80007ba:	2b01      	cmp	r3, #1
 80007bc:	d12c      	bne.n	8000818 <__aeabi_fmul+0x1b8>
 80007be:	2300      	movs	r3, #0
 80007c0:	2200      	movs	r2, #0
 80007c2:	e01b      	b.n	80007fc <__aeabi_fmul+0x19c>
 80007c4:	4643      	mov	r3, r8
 80007c6:	34ff      	adds	r4, #255	@ 0xff
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d055      	beq.n	8000878 <__aeabi_fmul+0x218>
 80007cc:	2103      	movs	r1, #3
 80007ce:	464b      	mov	r3, r9
 80007d0:	430b      	orrs	r3, r1
 80007d2:	0019      	movs	r1, r3
 80007d4:	2b0a      	cmp	r3, #10
 80007d6:	dc00      	bgt.n	80007da <__aeabi_fmul+0x17a>
 80007d8:	e092      	b.n	8000900 <__aeabi_fmul+0x2a0>
 80007da:	2b0f      	cmp	r3, #15
 80007dc:	d000      	beq.n	80007e0 <__aeabi_fmul+0x180>
 80007de:	e08c      	b.n	80008fa <__aeabi_fmul+0x29a>
 80007e0:	2280      	movs	r2, #128	@ 0x80
 80007e2:	03d2      	lsls	r2, r2, #15
 80007e4:	4216      	tst	r6, r2
 80007e6:	d003      	beq.n	80007f0 <__aeabi_fmul+0x190>
 80007e8:	4643      	mov	r3, r8
 80007ea:	4213      	tst	r3, r2
 80007ec:	d100      	bne.n	80007f0 <__aeabi_fmul+0x190>
 80007ee:	e07d      	b.n	80008ec <__aeabi_fmul+0x28c>
 80007f0:	2280      	movs	r2, #128	@ 0x80
 80007f2:	03d2      	lsls	r2, r2, #15
 80007f4:	4332      	orrs	r2, r6
 80007f6:	0252      	lsls	r2, r2, #9
 80007f8:	0a52      	lsrs	r2, r2, #9
 80007fa:	23ff      	movs	r3, #255	@ 0xff
 80007fc:	05d8      	lsls	r0, r3, #23
 80007fe:	07ed      	lsls	r5, r5, #31
 8000800:	4310      	orrs	r0, r2
 8000802:	4328      	orrs	r0, r5
 8000804:	bce0      	pop	{r5, r6, r7}
 8000806:	46ba      	mov	sl, r7
 8000808:	46b1      	mov	r9, r6
 800080a:	46a8      	mov	r8, r5
 800080c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800080e:	2301      	movs	r3, #1
 8000810:	0015      	movs	r5, r2
 8000812:	0871      	lsrs	r1, r6, #1
 8000814:	401e      	ands	r6, r3
 8000816:	430e      	orrs	r6, r1
 8000818:	0023      	movs	r3, r4
 800081a:	3380      	adds	r3, #128	@ 0x80
 800081c:	1c61      	adds	r1, r4, #1
 800081e:	2b00      	cmp	r3, #0
 8000820:	dd41      	ble.n	80008a6 <__aeabi_fmul+0x246>
 8000822:	0772      	lsls	r2, r6, #29
 8000824:	d094      	beq.n	8000750 <__aeabi_fmul+0xf0>
 8000826:	220f      	movs	r2, #15
 8000828:	4032      	ands	r2, r6
 800082a:	2a04      	cmp	r2, #4
 800082c:	d000      	beq.n	8000830 <__aeabi_fmul+0x1d0>
 800082e:	e78e      	b.n	800074e <__aeabi_fmul+0xee>
 8000830:	e78e      	b.n	8000750 <__aeabi_fmul+0xf0>
 8000832:	2e00      	cmp	r6, #0
 8000834:	d105      	bne.n	8000842 <__aeabi_fmul+0x1e2>
 8000836:	2304      	movs	r3, #4
 8000838:	4699      	mov	r9, r3
 800083a:	3b03      	subs	r3, #3
 800083c:	2400      	movs	r4, #0
 800083e:	469a      	mov	sl, r3
 8000840:	e726      	b.n	8000690 <__aeabi_fmul+0x30>
 8000842:	0030      	movs	r0, r6
 8000844:	f000 fb80 	bl	8000f48 <__clzsi2>
 8000848:	2476      	movs	r4, #118	@ 0x76
 800084a:	1f43      	subs	r3, r0, #5
 800084c:	409e      	lsls	r6, r3
 800084e:	2300      	movs	r3, #0
 8000850:	4264      	negs	r4, r4
 8000852:	4699      	mov	r9, r3
 8000854:	469a      	mov	sl, r3
 8000856:	1a24      	subs	r4, r4, r0
 8000858:	e71a      	b.n	8000690 <__aeabi_fmul+0x30>
 800085a:	4640      	mov	r0, r8
 800085c:	f000 fb74 	bl	8000f48 <__clzsi2>
 8000860:	464b      	mov	r3, r9
 8000862:	1a24      	subs	r4, r4, r0
 8000864:	3c76      	subs	r4, #118	@ 0x76
 8000866:	2b0a      	cmp	r3, #10
 8000868:	dca1      	bgt.n	80007ae <__aeabi_fmul+0x14e>
 800086a:	4643      	mov	r3, r8
 800086c:	3805      	subs	r0, #5
 800086e:	4083      	lsls	r3, r0
 8000870:	407d      	eors	r5, r7
 8000872:	4698      	mov	r8, r3
 8000874:	b2ea      	uxtb	r2, r5
 8000876:	e724      	b.n	80006c2 <__aeabi_fmul+0x62>
 8000878:	464a      	mov	r2, r9
 800087a:	3302      	adds	r3, #2
 800087c:	4313      	orrs	r3, r2
 800087e:	002a      	movs	r2, r5
 8000880:	407a      	eors	r2, r7
 8000882:	b2d2      	uxtb	r2, r2
 8000884:	2b0a      	cmp	r3, #10
 8000886:	dc92      	bgt.n	80007ae <__aeabi_fmul+0x14e>
 8000888:	4649      	mov	r1, r9
 800088a:	0015      	movs	r5, r2
 800088c:	2900      	cmp	r1, #0
 800088e:	d026      	beq.n	80008de <__aeabi_fmul+0x27e>
 8000890:	4699      	mov	r9, r3
 8000892:	2002      	movs	r0, #2
 8000894:	e719      	b.n	80006ca <__aeabi_fmul+0x6a>
 8000896:	230c      	movs	r3, #12
 8000898:	4699      	mov	r9, r3
 800089a:	3b09      	subs	r3, #9
 800089c:	24ff      	movs	r4, #255	@ 0xff
 800089e:	469a      	mov	sl, r3
 80008a0:	e6f6      	b.n	8000690 <__aeabi_fmul+0x30>
 80008a2:	0015      	movs	r5, r2
 80008a4:	0021      	movs	r1, r4
 80008a6:	2201      	movs	r2, #1
 80008a8:	1ad3      	subs	r3, r2, r3
 80008aa:	2b1b      	cmp	r3, #27
 80008ac:	dd00      	ble.n	80008b0 <__aeabi_fmul+0x250>
 80008ae:	e786      	b.n	80007be <__aeabi_fmul+0x15e>
 80008b0:	319e      	adds	r1, #158	@ 0x9e
 80008b2:	0032      	movs	r2, r6
 80008b4:	408e      	lsls	r6, r1
 80008b6:	40da      	lsrs	r2, r3
 80008b8:	1e73      	subs	r3, r6, #1
 80008ba:	419e      	sbcs	r6, r3
 80008bc:	4332      	orrs	r2, r6
 80008be:	0753      	lsls	r3, r2, #29
 80008c0:	d004      	beq.n	80008cc <__aeabi_fmul+0x26c>
 80008c2:	230f      	movs	r3, #15
 80008c4:	4013      	ands	r3, r2
 80008c6:	2b04      	cmp	r3, #4
 80008c8:	d000      	beq.n	80008cc <__aeabi_fmul+0x26c>
 80008ca:	3204      	adds	r2, #4
 80008cc:	0153      	lsls	r3, r2, #5
 80008ce:	d510      	bpl.n	80008f2 <__aeabi_fmul+0x292>
 80008d0:	2301      	movs	r3, #1
 80008d2:	2200      	movs	r2, #0
 80008d4:	e792      	b.n	80007fc <__aeabi_fmul+0x19c>
 80008d6:	003d      	movs	r5, r7
 80008d8:	4646      	mov	r6, r8
 80008da:	4682      	mov	sl, r0
 80008dc:	e767      	b.n	80007ae <__aeabi_fmul+0x14e>
 80008de:	23ff      	movs	r3, #255	@ 0xff
 80008e0:	2200      	movs	r2, #0
 80008e2:	e78b      	b.n	80007fc <__aeabi_fmul+0x19c>
 80008e4:	2280      	movs	r2, #128	@ 0x80
 80008e6:	2500      	movs	r5, #0
 80008e8:	03d2      	lsls	r2, r2, #15
 80008ea:	e786      	b.n	80007fa <__aeabi_fmul+0x19a>
 80008ec:	003d      	movs	r5, r7
 80008ee:	431a      	orrs	r2, r3
 80008f0:	e783      	b.n	80007fa <__aeabi_fmul+0x19a>
 80008f2:	0192      	lsls	r2, r2, #6
 80008f4:	2300      	movs	r3, #0
 80008f6:	0a52      	lsrs	r2, r2, #9
 80008f8:	e780      	b.n	80007fc <__aeabi_fmul+0x19c>
 80008fa:	003d      	movs	r5, r7
 80008fc:	4646      	mov	r6, r8
 80008fe:	e777      	b.n	80007f0 <__aeabi_fmul+0x190>
 8000900:	002a      	movs	r2, r5
 8000902:	2301      	movs	r3, #1
 8000904:	407a      	eors	r2, r7
 8000906:	408b      	lsls	r3, r1
 8000908:	2003      	movs	r0, #3
 800090a:	b2d2      	uxtb	r2, r2
 800090c:	e6e9      	b.n	80006e2 <__aeabi_fmul+0x82>
 800090e:	46c0      	nop			@ (mov r8, r8)
 8000910:	f7ffffff 	.word	0xf7ffffff

08000914 <__aeabi_fsub>:
 8000914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000916:	4647      	mov	r7, r8
 8000918:	46ce      	mov	lr, r9
 800091a:	0243      	lsls	r3, r0, #9
 800091c:	b580      	push	{r7, lr}
 800091e:	0a5f      	lsrs	r7, r3, #9
 8000920:	099b      	lsrs	r3, r3, #6
 8000922:	0045      	lsls	r5, r0, #1
 8000924:	004a      	lsls	r2, r1, #1
 8000926:	469c      	mov	ip, r3
 8000928:	024b      	lsls	r3, r1, #9
 800092a:	0fc4      	lsrs	r4, r0, #31
 800092c:	0fce      	lsrs	r6, r1, #31
 800092e:	0e2d      	lsrs	r5, r5, #24
 8000930:	0a58      	lsrs	r0, r3, #9
 8000932:	0e12      	lsrs	r2, r2, #24
 8000934:	0999      	lsrs	r1, r3, #6
 8000936:	2aff      	cmp	r2, #255	@ 0xff
 8000938:	d06b      	beq.n	8000a12 <__aeabi_fsub+0xfe>
 800093a:	2301      	movs	r3, #1
 800093c:	405e      	eors	r6, r3
 800093e:	1aab      	subs	r3, r5, r2
 8000940:	42b4      	cmp	r4, r6
 8000942:	d04b      	beq.n	80009dc <__aeabi_fsub+0xc8>
 8000944:	2b00      	cmp	r3, #0
 8000946:	dc00      	bgt.n	800094a <__aeabi_fsub+0x36>
 8000948:	e0ff      	b.n	8000b4a <__aeabi_fsub+0x236>
 800094a:	2a00      	cmp	r2, #0
 800094c:	d100      	bne.n	8000950 <__aeabi_fsub+0x3c>
 800094e:	e088      	b.n	8000a62 <__aeabi_fsub+0x14e>
 8000950:	2dff      	cmp	r5, #255	@ 0xff
 8000952:	d100      	bne.n	8000956 <__aeabi_fsub+0x42>
 8000954:	e0ef      	b.n	8000b36 <__aeabi_fsub+0x222>
 8000956:	2280      	movs	r2, #128	@ 0x80
 8000958:	04d2      	lsls	r2, r2, #19
 800095a:	4311      	orrs	r1, r2
 800095c:	2001      	movs	r0, #1
 800095e:	2b1b      	cmp	r3, #27
 8000960:	dc08      	bgt.n	8000974 <__aeabi_fsub+0x60>
 8000962:	0008      	movs	r0, r1
 8000964:	2220      	movs	r2, #32
 8000966:	40d8      	lsrs	r0, r3
 8000968:	1ad3      	subs	r3, r2, r3
 800096a:	4099      	lsls	r1, r3
 800096c:	000b      	movs	r3, r1
 800096e:	1e5a      	subs	r2, r3, #1
 8000970:	4193      	sbcs	r3, r2
 8000972:	4318      	orrs	r0, r3
 8000974:	4663      	mov	r3, ip
 8000976:	1a1b      	subs	r3, r3, r0
 8000978:	469c      	mov	ip, r3
 800097a:	4663      	mov	r3, ip
 800097c:	015b      	lsls	r3, r3, #5
 800097e:	d400      	bmi.n	8000982 <__aeabi_fsub+0x6e>
 8000980:	e0cd      	b.n	8000b1e <__aeabi_fsub+0x20a>
 8000982:	4663      	mov	r3, ip
 8000984:	019f      	lsls	r7, r3, #6
 8000986:	09bf      	lsrs	r7, r7, #6
 8000988:	0038      	movs	r0, r7
 800098a:	f000 fadd 	bl	8000f48 <__clzsi2>
 800098e:	003b      	movs	r3, r7
 8000990:	3805      	subs	r0, #5
 8000992:	4083      	lsls	r3, r0
 8000994:	4285      	cmp	r5, r0
 8000996:	dc00      	bgt.n	800099a <__aeabi_fsub+0x86>
 8000998:	e0a2      	b.n	8000ae0 <__aeabi_fsub+0x1cc>
 800099a:	4ab7      	ldr	r2, [pc, #732]	@ (8000c78 <__aeabi_fsub+0x364>)
 800099c:	1a2d      	subs	r5, r5, r0
 800099e:	401a      	ands	r2, r3
 80009a0:	4694      	mov	ip, r2
 80009a2:	075a      	lsls	r2, r3, #29
 80009a4:	d100      	bne.n	80009a8 <__aeabi_fsub+0x94>
 80009a6:	e0c3      	b.n	8000b30 <__aeabi_fsub+0x21c>
 80009a8:	220f      	movs	r2, #15
 80009aa:	4013      	ands	r3, r2
 80009ac:	2b04      	cmp	r3, #4
 80009ae:	d100      	bne.n	80009b2 <__aeabi_fsub+0x9e>
 80009b0:	e0be      	b.n	8000b30 <__aeabi_fsub+0x21c>
 80009b2:	2304      	movs	r3, #4
 80009b4:	4698      	mov	r8, r3
 80009b6:	44c4      	add	ip, r8
 80009b8:	4663      	mov	r3, ip
 80009ba:	015b      	lsls	r3, r3, #5
 80009bc:	d400      	bmi.n	80009c0 <__aeabi_fsub+0xac>
 80009be:	e0b7      	b.n	8000b30 <__aeabi_fsub+0x21c>
 80009c0:	1c68      	adds	r0, r5, #1
 80009c2:	2dfe      	cmp	r5, #254	@ 0xfe
 80009c4:	d000      	beq.n	80009c8 <__aeabi_fsub+0xb4>
 80009c6:	e0a5      	b.n	8000b14 <__aeabi_fsub+0x200>
 80009c8:	20ff      	movs	r0, #255	@ 0xff
 80009ca:	2200      	movs	r2, #0
 80009cc:	05c0      	lsls	r0, r0, #23
 80009ce:	4310      	orrs	r0, r2
 80009d0:	07e4      	lsls	r4, r4, #31
 80009d2:	4320      	orrs	r0, r4
 80009d4:	bcc0      	pop	{r6, r7}
 80009d6:	46b9      	mov	r9, r7
 80009d8:	46b0      	mov	r8, r6
 80009da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009dc:	2b00      	cmp	r3, #0
 80009de:	dc00      	bgt.n	80009e2 <__aeabi_fsub+0xce>
 80009e0:	e1eb      	b.n	8000dba <__aeabi_fsub+0x4a6>
 80009e2:	2a00      	cmp	r2, #0
 80009e4:	d046      	beq.n	8000a74 <__aeabi_fsub+0x160>
 80009e6:	2dff      	cmp	r5, #255	@ 0xff
 80009e8:	d100      	bne.n	80009ec <__aeabi_fsub+0xd8>
 80009ea:	e0a4      	b.n	8000b36 <__aeabi_fsub+0x222>
 80009ec:	2280      	movs	r2, #128	@ 0x80
 80009ee:	04d2      	lsls	r2, r2, #19
 80009f0:	4311      	orrs	r1, r2
 80009f2:	2b1b      	cmp	r3, #27
 80009f4:	dc00      	bgt.n	80009f8 <__aeabi_fsub+0xe4>
 80009f6:	e0fb      	b.n	8000bf0 <__aeabi_fsub+0x2dc>
 80009f8:	2305      	movs	r3, #5
 80009fa:	4698      	mov	r8, r3
 80009fc:	002b      	movs	r3, r5
 80009fe:	44c4      	add	ip, r8
 8000a00:	4662      	mov	r2, ip
 8000a02:	08d7      	lsrs	r7, r2, #3
 8000a04:	2bff      	cmp	r3, #255	@ 0xff
 8000a06:	d100      	bne.n	8000a0a <__aeabi_fsub+0xf6>
 8000a08:	e095      	b.n	8000b36 <__aeabi_fsub+0x222>
 8000a0a:	027a      	lsls	r2, r7, #9
 8000a0c:	0a52      	lsrs	r2, r2, #9
 8000a0e:	b2d8      	uxtb	r0, r3
 8000a10:	e7dc      	b.n	80009cc <__aeabi_fsub+0xb8>
 8000a12:	002b      	movs	r3, r5
 8000a14:	3bff      	subs	r3, #255	@ 0xff
 8000a16:	4699      	mov	r9, r3
 8000a18:	2900      	cmp	r1, #0
 8000a1a:	d118      	bne.n	8000a4e <__aeabi_fsub+0x13a>
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	405e      	eors	r6, r3
 8000a20:	42b4      	cmp	r4, r6
 8000a22:	d100      	bne.n	8000a26 <__aeabi_fsub+0x112>
 8000a24:	e0ca      	b.n	8000bbc <__aeabi_fsub+0x2a8>
 8000a26:	464b      	mov	r3, r9
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d02d      	beq.n	8000a88 <__aeabi_fsub+0x174>
 8000a2c:	2d00      	cmp	r5, #0
 8000a2e:	d000      	beq.n	8000a32 <__aeabi_fsub+0x11e>
 8000a30:	e13c      	b.n	8000cac <__aeabi_fsub+0x398>
 8000a32:	23ff      	movs	r3, #255	@ 0xff
 8000a34:	4664      	mov	r4, ip
 8000a36:	2c00      	cmp	r4, #0
 8000a38:	d100      	bne.n	8000a3c <__aeabi_fsub+0x128>
 8000a3a:	e15f      	b.n	8000cfc <__aeabi_fsub+0x3e8>
 8000a3c:	1e5d      	subs	r5, r3, #1
 8000a3e:	2b01      	cmp	r3, #1
 8000a40:	d100      	bne.n	8000a44 <__aeabi_fsub+0x130>
 8000a42:	e174      	b.n	8000d2e <__aeabi_fsub+0x41a>
 8000a44:	0034      	movs	r4, r6
 8000a46:	2bff      	cmp	r3, #255	@ 0xff
 8000a48:	d074      	beq.n	8000b34 <__aeabi_fsub+0x220>
 8000a4a:	002b      	movs	r3, r5
 8000a4c:	e103      	b.n	8000c56 <__aeabi_fsub+0x342>
 8000a4e:	42b4      	cmp	r4, r6
 8000a50:	d100      	bne.n	8000a54 <__aeabi_fsub+0x140>
 8000a52:	e09c      	b.n	8000b8e <__aeabi_fsub+0x27a>
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d017      	beq.n	8000a88 <__aeabi_fsub+0x174>
 8000a58:	2d00      	cmp	r5, #0
 8000a5a:	d0ea      	beq.n	8000a32 <__aeabi_fsub+0x11e>
 8000a5c:	0007      	movs	r7, r0
 8000a5e:	0034      	movs	r4, r6
 8000a60:	e06c      	b.n	8000b3c <__aeabi_fsub+0x228>
 8000a62:	2900      	cmp	r1, #0
 8000a64:	d0cc      	beq.n	8000a00 <__aeabi_fsub+0xec>
 8000a66:	1e5a      	subs	r2, r3, #1
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d02b      	beq.n	8000ac4 <__aeabi_fsub+0x1b0>
 8000a6c:	2bff      	cmp	r3, #255	@ 0xff
 8000a6e:	d062      	beq.n	8000b36 <__aeabi_fsub+0x222>
 8000a70:	0013      	movs	r3, r2
 8000a72:	e773      	b.n	800095c <__aeabi_fsub+0x48>
 8000a74:	2900      	cmp	r1, #0
 8000a76:	d0c3      	beq.n	8000a00 <__aeabi_fsub+0xec>
 8000a78:	1e5a      	subs	r2, r3, #1
 8000a7a:	2b01      	cmp	r3, #1
 8000a7c:	d100      	bne.n	8000a80 <__aeabi_fsub+0x16c>
 8000a7e:	e11e      	b.n	8000cbe <__aeabi_fsub+0x3aa>
 8000a80:	2bff      	cmp	r3, #255	@ 0xff
 8000a82:	d058      	beq.n	8000b36 <__aeabi_fsub+0x222>
 8000a84:	0013      	movs	r3, r2
 8000a86:	e7b4      	b.n	80009f2 <__aeabi_fsub+0xde>
 8000a88:	22fe      	movs	r2, #254	@ 0xfe
 8000a8a:	1c6b      	adds	r3, r5, #1
 8000a8c:	421a      	tst	r2, r3
 8000a8e:	d10d      	bne.n	8000aac <__aeabi_fsub+0x198>
 8000a90:	2d00      	cmp	r5, #0
 8000a92:	d060      	beq.n	8000b56 <__aeabi_fsub+0x242>
 8000a94:	4663      	mov	r3, ip
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d000      	beq.n	8000a9c <__aeabi_fsub+0x188>
 8000a9a:	e120      	b.n	8000cde <__aeabi_fsub+0x3ca>
 8000a9c:	2900      	cmp	r1, #0
 8000a9e:	d000      	beq.n	8000aa2 <__aeabi_fsub+0x18e>
 8000aa0:	e128      	b.n	8000cf4 <__aeabi_fsub+0x3e0>
 8000aa2:	2280      	movs	r2, #128	@ 0x80
 8000aa4:	2400      	movs	r4, #0
 8000aa6:	20ff      	movs	r0, #255	@ 0xff
 8000aa8:	03d2      	lsls	r2, r2, #15
 8000aaa:	e78f      	b.n	80009cc <__aeabi_fsub+0xb8>
 8000aac:	4663      	mov	r3, ip
 8000aae:	1a5f      	subs	r7, r3, r1
 8000ab0:	017b      	lsls	r3, r7, #5
 8000ab2:	d500      	bpl.n	8000ab6 <__aeabi_fsub+0x1a2>
 8000ab4:	e0fe      	b.n	8000cb4 <__aeabi_fsub+0x3a0>
 8000ab6:	2f00      	cmp	r7, #0
 8000ab8:	d000      	beq.n	8000abc <__aeabi_fsub+0x1a8>
 8000aba:	e765      	b.n	8000988 <__aeabi_fsub+0x74>
 8000abc:	2400      	movs	r4, #0
 8000abe:	2000      	movs	r0, #0
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	e783      	b.n	80009cc <__aeabi_fsub+0xb8>
 8000ac4:	4663      	mov	r3, ip
 8000ac6:	1a59      	subs	r1, r3, r1
 8000ac8:	014b      	lsls	r3, r1, #5
 8000aca:	d400      	bmi.n	8000ace <__aeabi_fsub+0x1ba>
 8000acc:	e119      	b.n	8000d02 <__aeabi_fsub+0x3ee>
 8000ace:	018f      	lsls	r7, r1, #6
 8000ad0:	09bf      	lsrs	r7, r7, #6
 8000ad2:	0038      	movs	r0, r7
 8000ad4:	f000 fa38 	bl	8000f48 <__clzsi2>
 8000ad8:	003b      	movs	r3, r7
 8000ada:	3805      	subs	r0, #5
 8000adc:	4083      	lsls	r3, r0
 8000ade:	2501      	movs	r5, #1
 8000ae0:	2220      	movs	r2, #32
 8000ae2:	1b40      	subs	r0, r0, r5
 8000ae4:	3001      	adds	r0, #1
 8000ae6:	1a12      	subs	r2, r2, r0
 8000ae8:	0019      	movs	r1, r3
 8000aea:	4093      	lsls	r3, r2
 8000aec:	40c1      	lsrs	r1, r0
 8000aee:	1e5a      	subs	r2, r3, #1
 8000af0:	4193      	sbcs	r3, r2
 8000af2:	4319      	orrs	r1, r3
 8000af4:	468c      	mov	ip, r1
 8000af6:	1e0b      	subs	r3, r1, #0
 8000af8:	d0e1      	beq.n	8000abe <__aeabi_fsub+0x1aa>
 8000afa:	075b      	lsls	r3, r3, #29
 8000afc:	d100      	bne.n	8000b00 <__aeabi_fsub+0x1ec>
 8000afe:	e152      	b.n	8000da6 <__aeabi_fsub+0x492>
 8000b00:	230f      	movs	r3, #15
 8000b02:	2500      	movs	r5, #0
 8000b04:	400b      	ands	r3, r1
 8000b06:	2b04      	cmp	r3, #4
 8000b08:	d000      	beq.n	8000b0c <__aeabi_fsub+0x1f8>
 8000b0a:	e752      	b.n	80009b2 <__aeabi_fsub+0x9e>
 8000b0c:	2001      	movs	r0, #1
 8000b0e:	014a      	lsls	r2, r1, #5
 8000b10:	d400      	bmi.n	8000b14 <__aeabi_fsub+0x200>
 8000b12:	e092      	b.n	8000c3a <__aeabi_fsub+0x326>
 8000b14:	b2c0      	uxtb	r0, r0
 8000b16:	4663      	mov	r3, ip
 8000b18:	019a      	lsls	r2, r3, #6
 8000b1a:	0a52      	lsrs	r2, r2, #9
 8000b1c:	e756      	b.n	80009cc <__aeabi_fsub+0xb8>
 8000b1e:	4663      	mov	r3, ip
 8000b20:	075b      	lsls	r3, r3, #29
 8000b22:	d005      	beq.n	8000b30 <__aeabi_fsub+0x21c>
 8000b24:	230f      	movs	r3, #15
 8000b26:	4662      	mov	r2, ip
 8000b28:	4013      	ands	r3, r2
 8000b2a:	2b04      	cmp	r3, #4
 8000b2c:	d000      	beq.n	8000b30 <__aeabi_fsub+0x21c>
 8000b2e:	e740      	b.n	80009b2 <__aeabi_fsub+0x9e>
 8000b30:	002b      	movs	r3, r5
 8000b32:	e765      	b.n	8000a00 <__aeabi_fsub+0xec>
 8000b34:	0007      	movs	r7, r0
 8000b36:	2f00      	cmp	r7, #0
 8000b38:	d100      	bne.n	8000b3c <__aeabi_fsub+0x228>
 8000b3a:	e745      	b.n	80009c8 <__aeabi_fsub+0xb4>
 8000b3c:	2280      	movs	r2, #128	@ 0x80
 8000b3e:	03d2      	lsls	r2, r2, #15
 8000b40:	433a      	orrs	r2, r7
 8000b42:	0252      	lsls	r2, r2, #9
 8000b44:	20ff      	movs	r0, #255	@ 0xff
 8000b46:	0a52      	lsrs	r2, r2, #9
 8000b48:	e740      	b.n	80009cc <__aeabi_fsub+0xb8>
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d179      	bne.n	8000c42 <__aeabi_fsub+0x32e>
 8000b4e:	22fe      	movs	r2, #254	@ 0xfe
 8000b50:	1c6b      	adds	r3, r5, #1
 8000b52:	421a      	tst	r2, r3
 8000b54:	d1aa      	bne.n	8000aac <__aeabi_fsub+0x198>
 8000b56:	4663      	mov	r3, ip
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d100      	bne.n	8000b5e <__aeabi_fsub+0x24a>
 8000b5c:	e0f5      	b.n	8000d4a <__aeabi_fsub+0x436>
 8000b5e:	2900      	cmp	r1, #0
 8000b60:	d100      	bne.n	8000b64 <__aeabi_fsub+0x250>
 8000b62:	e0d1      	b.n	8000d08 <__aeabi_fsub+0x3f4>
 8000b64:	1a5f      	subs	r7, r3, r1
 8000b66:	2380      	movs	r3, #128	@ 0x80
 8000b68:	04db      	lsls	r3, r3, #19
 8000b6a:	421f      	tst	r7, r3
 8000b6c:	d100      	bne.n	8000b70 <__aeabi_fsub+0x25c>
 8000b6e:	e10e      	b.n	8000d8e <__aeabi_fsub+0x47a>
 8000b70:	4662      	mov	r2, ip
 8000b72:	2401      	movs	r4, #1
 8000b74:	1a8a      	subs	r2, r1, r2
 8000b76:	4694      	mov	ip, r2
 8000b78:	2000      	movs	r0, #0
 8000b7a:	4034      	ands	r4, r6
 8000b7c:	2a00      	cmp	r2, #0
 8000b7e:	d100      	bne.n	8000b82 <__aeabi_fsub+0x26e>
 8000b80:	e724      	b.n	80009cc <__aeabi_fsub+0xb8>
 8000b82:	2001      	movs	r0, #1
 8000b84:	421a      	tst	r2, r3
 8000b86:	d1c6      	bne.n	8000b16 <__aeabi_fsub+0x202>
 8000b88:	2300      	movs	r3, #0
 8000b8a:	08d7      	lsrs	r7, r2, #3
 8000b8c:	e73d      	b.n	8000a0a <__aeabi_fsub+0xf6>
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d017      	beq.n	8000bc2 <__aeabi_fsub+0x2ae>
 8000b92:	2d00      	cmp	r5, #0
 8000b94:	d000      	beq.n	8000b98 <__aeabi_fsub+0x284>
 8000b96:	e0af      	b.n	8000cf8 <__aeabi_fsub+0x3e4>
 8000b98:	23ff      	movs	r3, #255	@ 0xff
 8000b9a:	4665      	mov	r5, ip
 8000b9c:	2d00      	cmp	r5, #0
 8000b9e:	d100      	bne.n	8000ba2 <__aeabi_fsub+0x28e>
 8000ba0:	e0ad      	b.n	8000cfe <__aeabi_fsub+0x3ea>
 8000ba2:	1e5e      	subs	r6, r3, #1
 8000ba4:	2b01      	cmp	r3, #1
 8000ba6:	d100      	bne.n	8000baa <__aeabi_fsub+0x296>
 8000ba8:	e089      	b.n	8000cbe <__aeabi_fsub+0x3aa>
 8000baa:	2bff      	cmp	r3, #255	@ 0xff
 8000bac:	d0c2      	beq.n	8000b34 <__aeabi_fsub+0x220>
 8000bae:	2e1b      	cmp	r6, #27
 8000bb0:	dc00      	bgt.n	8000bb4 <__aeabi_fsub+0x2a0>
 8000bb2:	e0ab      	b.n	8000d0c <__aeabi_fsub+0x3f8>
 8000bb4:	1d4b      	adds	r3, r1, #5
 8000bb6:	469c      	mov	ip, r3
 8000bb8:	0013      	movs	r3, r2
 8000bba:	e721      	b.n	8000a00 <__aeabi_fsub+0xec>
 8000bbc:	464b      	mov	r3, r9
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d170      	bne.n	8000ca4 <__aeabi_fsub+0x390>
 8000bc2:	22fe      	movs	r2, #254	@ 0xfe
 8000bc4:	1c6b      	adds	r3, r5, #1
 8000bc6:	421a      	tst	r2, r3
 8000bc8:	d15e      	bne.n	8000c88 <__aeabi_fsub+0x374>
 8000bca:	2d00      	cmp	r5, #0
 8000bcc:	d000      	beq.n	8000bd0 <__aeabi_fsub+0x2bc>
 8000bce:	e0c3      	b.n	8000d58 <__aeabi_fsub+0x444>
 8000bd0:	4663      	mov	r3, ip
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d100      	bne.n	8000bd8 <__aeabi_fsub+0x2c4>
 8000bd6:	e0d0      	b.n	8000d7a <__aeabi_fsub+0x466>
 8000bd8:	2900      	cmp	r1, #0
 8000bda:	d100      	bne.n	8000bde <__aeabi_fsub+0x2ca>
 8000bdc:	e094      	b.n	8000d08 <__aeabi_fsub+0x3f4>
 8000bde:	000a      	movs	r2, r1
 8000be0:	4462      	add	r2, ip
 8000be2:	0153      	lsls	r3, r2, #5
 8000be4:	d400      	bmi.n	8000be8 <__aeabi_fsub+0x2d4>
 8000be6:	e0d8      	b.n	8000d9a <__aeabi_fsub+0x486>
 8000be8:	0192      	lsls	r2, r2, #6
 8000bea:	2001      	movs	r0, #1
 8000bec:	0a52      	lsrs	r2, r2, #9
 8000bee:	e6ed      	b.n	80009cc <__aeabi_fsub+0xb8>
 8000bf0:	0008      	movs	r0, r1
 8000bf2:	2220      	movs	r2, #32
 8000bf4:	40d8      	lsrs	r0, r3
 8000bf6:	1ad3      	subs	r3, r2, r3
 8000bf8:	4099      	lsls	r1, r3
 8000bfa:	000b      	movs	r3, r1
 8000bfc:	1e5a      	subs	r2, r3, #1
 8000bfe:	4193      	sbcs	r3, r2
 8000c00:	4303      	orrs	r3, r0
 8000c02:	449c      	add	ip, r3
 8000c04:	4663      	mov	r3, ip
 8000c06:	015b      	lsls	r3, r3, #5
 8000c08:	d589      	bpl.n	8000b1e <__aeabi_fsub+0x20a>
 8000c0a:	3501      	adds	r5, #1
 8000c0c:	2dff      	cmp	r5, #255	@ 0xff
 8000c0e:	d100      	bne.n	8000c12 <__aeabi_fsub+0x2fe>
 8000c10:	e6da      	b.n	80009c8 <__aeabi_fsub+0xb4>
 8000c12:	4662      	mov	r2, ip
 8000c14:	2301      	movs	r3, #1
 8000c16:	4919      	ldr	r1, [pc, #100]	@ (8000c7c <__aeabi_fsub+0x368>)
 8000c18:	4013      	ands	r3, r2
 8000c1a:	0852      	lsrs	r2, r2, #1
 8000c1c:	400a      	ands	r2, r1
 8000c1e:	431a      	orrs	r2, r3
 8000c20:	0013      	movs	r3, r2
 8000c22:	4694      	mov	ip, r2
 8000c24:	075b      	lsls	r3, r3, #29
 8000c26:	d004      	beq.n	8000c32 <__aeabi_fsub+0x31e>
 8000c28:	230f      	movs	r3, #15
 8000c2a:	4013      	ands	r3, r2
 8000c2c:	2b04      	cmp	r3, #4
 8000c2e:	d000      	beq.n	8000c32 <__aeabi_fsub+0x31e>
 8000c30:	e6bf      	b.n	80009b2 <__aeabi_fsub+0x9e>
 8000c32:	4663      	mov	r3, ip
 8000c34:	015b      	lsls	r3, r3, #5
 8000c36:	d500      	bpl.n	8000c3a <__aeabi_fsub+0x326>
 8000c38:	e6c2      	b.n	80009c0 <__aeabi_fsub+0xac>
 8000c3a:	4663      	mov	r3, ip
 8000c3c:	08df      	lsrs	r7, r3, #3
 8000c3e:	002b      	movs	r3, r5
 8000c40:	e6e3      	b.n	8000a0a <__aeabi_fsub+0xf6>
 8000c42:	1b53      	subs	r3, r2, r5
 8000c44:	2d00      	cmp	r5, #0
 8000c46:	d100      	bne.n	8000c4a <__aeabi_fsub+0x336>
 8000c48:	e6f4      	b.n	8000a34 <__aeabi_fsub+0x120>
 8000c4a:	2080      	movs	r0, #128	@ 0x80
 8000c4c:	4664      	mov	r4, ip
 8000c4e:	04c0      	lsls	r0, r0, #19
 8000c50:	4304      	orrs	r4, r0
 8000c52:	46a4      	mov	ip, r4
 8000c54:	0034      	movs	r4, r6
 8000c56:	2001      	movs	r0, #1
 8000c58:	2b1b      	cmp	r3, #27
 8000c5a:	dc09      	bgt.n	8000c70 <__aeabi_fsub+0x35c>
 8000c5c:	2520      	movs	r5, #32
 8000c5e:	4660      	mov	r0, ip
 8000c60:	40d8      	lsrs	r0, r3
 8000c62:	1aeb      	subs	r3, r5, r3
 8000c64:	4665      	mov	r5, ip
 8000c66:	409d      	lsls	r5, r3
 8000c68:	002b      	movs	r3, r5
 8000c6a:	1e5d      	subs	r5, r3, #1
 8000c6c:	41ab      	sbcs	r3, r5
 8000c6e:	4318      	orrs	r0, r3
 8000c70:	1a0b      	subs	r3, r1, r0
 8000c72:	469c      	mov	ip, r3
 8000c74:	0015      	movs	r5, r2
 8000c76:	e680      	b.n	800097a <__aeabi_fsub+0x66>
 8000c78:	fbffffff 	.word	0xfbffffff
 8000c7c:	7dffffff 	.word	0x7dffffff
 8000c80:	22fe      	movs	r2, #254	@ 0xfe
 8000c82:	1c6b      	adds	r3, r5, #1
 8000c84:	4213      	tst	r3, r2
 8000c86:	d0a3      	beq.n	8000bd0 <__aeabi_fsub+0x2bc>
 8000c88:	2bff      	cmp	r3, #255	@ 0xff
 8000c8a:	d100      	bne.n	8000c8e <__aeabi_fsub+0x37a>
 8000c8c:	e69c      	b.n	80009c8 <__aeabi_fsub+0xb4>
 8000c8e:	4461      	add	r1, ip
 8000c90:	0849      	lsrs	r1, r1, #1
 8000c92:	074a      	lsls	r2, r1, #29
 8000c94:	d049      	beq.n	8000d2a <__aeabi_fsub+0x416>
 8000c96:	220f      	movs	r2, #15
 8000c98:	400a      	ands	r2, r1
 8000c9a:	2a04      	cmp	r2, #4
 8000c9c:	d045      	beq.n	8000d2a <__aeabi_fsub+0x416>
 8000c9e:	1d0a      	adds	r2, r1, #4
 8000ca0:	4694      	mov	ip, r2
 8000ca2:	e6ad      	b.n	8000a00 <__aeabi_fsub+0xec>
 8000ca4:	2d00      	cmp	r5, #0
 8000ca6:	d100      	bne.n	8000caa <__aeabi_fsub+0x396>
 8000ca8:	e776      	b.n	8000b98 <__aeabi_fsub+0x284>
 8000caa:	e68d      	b.n	80009c8 <__aeabi_fsub+0xb4>
 8000cac:	0034      	movs	r4, r6
 8000cae:	20ff      	movs	r0, #255	@ 0xff
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	e68b      	b.n	80009cc <__aeabi_fsub+0xb8>
 8000cb4:	4663      	mov	r3, ip
 8000cb6:	2401      	movs	r4, #1
 8000cb8:	1acf      	subs	r7, r1, r3
 8000cba:	4034      	ands	r4, r6
 8000cbc:	e664      	b.n	8000988 <__aeabi_fsub+0x74>
 8000cbe:	4461      	add	r1, ip
 8000cc0:	014b      	lsls	r3, r1, #5
 8000cc2:	d56d      	bpl.n	8000da0 <__aeabi_fsub+0x48c>
 8000cc4:	0848      	lsrs	r0, r1, #1
 8000cc6:	4944      	ldr	r1, [pc, #272]	@ (8000dd8 <__aeabi_fsub+0x4c4>)
 8000cc8:	4001      	ands	r1, r0
 8000cca:	0743      	lsls	r3, r0, #29
 8000ccc:	d02c      	beq.n	8000d28 <__aeabi_fsub+0x414>
 8000cce:	230f      	movs	r3, #15
 8000cd0:	4003      	ands	r3, r0
 8000cd2:	2b04      	cmp	r3, #4
 8000cd4:	d028      	beq.n	8000d28 <__aeabi_fsub+0x414>
 8000cd6:	1d0b      	adds	r3, r1, #4
 8000cd8:	469c      	mov	ip, r3
 8000cda:	2302      	movs	r3, #2
 8000cdc:	e690      	b.n	8000a00 <__aeabi_fsub+0xec>
 8000cde:	2900      	cmp	r1, #0
 8000ce0:	d100      	bne.n	8000ce4 <__aeabi_fsub+0x3d0>
 8000ce2:	e72b      	b.n	8000b3c <__aeabi_fsub+0x228>
 8000ce4:	2380      	movs	r3, #128	@ 0x80
 8000ce6:	03db      	lsls	r3, r3, #15
 8000ce8:	429f      	cmp	r7, r3
 8000cea:	d200      	bcs.n	8000cee <__aeabi_fsub+0x3da>
 8000cec:	e726      	b.n	8000b3c <__aeabi_fsub+0x228>
 8000cee:	4298      	cmp	r0, r3
 8000cf0:	d300      	bcc.n	8000cf4 <__aeabi_fsub+0x3e0>
 8000cf2:	e723      	b.n	8000b3c <__aeabi_fsub+0x228>
 8000cf4:	2401      	movs	r4, #1
 8000cf6:	4034      	ands	r4, r6
 8000cf8:	0007      	movs	r7, r0
 8000cfa:	e71f      	b.n	8000b3c <__aeabi_fsub+0x228>
 8000cfc:	0034      	movs	r4, r6
 8000cfe:	468c      	mov	ip, r1
 8000d00:	e67e      	b.n	8000a00 <__aeabi_fsub+0xec>
 8000d02:	2301      	movs	r3, #1
 8000d04:	08cf      	lsrs	r7, r1, #3
 8000d06:	e680      	b.n	8000a0a <__aeabi_fsub+0xf6>
 8000d08:	2300      	movs	r3, #0
 8000d0a:	e67e      	b.n	8000a0a <__aeabi_fsub+0xf6>
 8000d0c:	2020      	movs	r0, #32
 8000d0e:	4665      	mov	r5, ip
 8000d10:	1b80      	subs	r0, r0, r6
 8000d12:	4085      	lsls	r5, r0
 8000d14:	4663      	mov	r3, ip
 8000d16:	0028      	movs	r0, r5
 8000d18:	40f3      	lsrs	r3, r6
 8000d1a:	1e45      	subs	r5, r0, #1
 8000d1c:	41a8      	sbcs	r0, r5
 8000d1e:	4303      	orrs	r3, r0
 8000d20:	469c      	mov	ip, r3
 8000d22:	0015      	movs	r5, r2
 8000d24:	448c      	add	ip, r1
 8000d26:	e76d      	b.n	8000c04 <__aeabi_fsub+0x2f0>
 8000d28:	2302      	movs	r3, #2
 8000d2a:	08cf      	lsrs	r7, r1, #3
 8000d2c:	e66d      	b.n	8000a0a <__aeabi_fsub+0xf6>
 8000d2e:	1b0f      	subs	r7, r1, r4
 8000d30:	017b      	lsls	r3, r7, #5
 8000d32:	d528      	bpl.n	8000d86 <__aeabi_fsub+0x472>
 8000d34:	01bf      	lsls	r7, r7, #6
 8000d36:	09bf      	lsrs	r7, r7, #6
 8000d38:	0038      	movs	r0, r7
 8000d3a:	f000 f905 	bl	8000f48 <__clzsi2>
 8000d3e:	003b      	movs	r3, r7
 8000d40:	3805      	subs	r0, #5
 8000d42:	4083      	lsls	r3, r0
 8000d44:	0034      	movs	r4, r6
 8000d46:	2501      	movs	r5, #1
 8000d48:	e6ca      	b.n	8000ae0 <__aeabi_fsub+0x1cc>
 8000d4a:	2900      	cmp	r1, #0
 8000d4c:	d100      	bne.n	8000d50 <__aeabi_fsub+0x43c>
 8000d4e:	e6b5      	b.n	8000abc <__aeabi_fsub+0x1a8>
 8000d50:	2401      	movs	r4, #1
 8000d52:	0007      	movs	r7, r0
 8000d54:	4034      	ands	r4, r6
 8000d56:	e658      	b.n	8000a0a <__aeabi_fsub+0xf6>
 8000d58:	4663      	mov	r3, ip
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d100      	bne.n	8000d60 <__aeabi_fsub+0x44c>
 8000d5e:	e6e9      	b.n	8000b34 <__aeabi_fsub+0x220>
 8000d60:	2900      	cmp	r1, #0
 8000d62:	d100      	bne.n	8000d66 <__aeabi_fsub+0x452>
 8000d64:	e6ea      	b.n	8000b3c <__aeabi_fsub+0x228>
 8000d66:	2380      	movs	r3, #128	@ 0x80
 8000d68:	03db      	lsls	r3, r3, #15
 8000d6a:	429f      	cmp	r7, r3
 8000d6c:	d200      	bcs.n	8000d70 <__aeabi_fsub+0x45c>
 8000d6e:	e6e5      	b.n	8000b3c <__aeabi_fsub+0x228>
 8000d70:	4298      	cmp	r0, r3
 8000d72:	d300      	bcc.n	8000d76 <__aeabi_fsub+0x462>
 8000d74:	e6e2      	b.n	8000b3c <__aeabi_fsub+0x228>
 8000d76:	0007      	movs	r7, r0
 8000d78:	e6e0      	b.n	8000b3c <__aeabi_fsub+0x228>
 8000d7a:	2900      	cmp	r1, #0
 8000d7c:	d100      	bne.n	8000d80 <__aeabi_fsub+0x46c>
 8000d7e:	e69e      	b.n	8000abe <__aeabi_fsub+0x1aa>
 8000d80:	2300      	movs	r3, #0
 8000d82:	08cf      	lsrs	r7, r1, #3
 8000d84:	e641      	b.n	8000a0a <__aeabi_fsub+0xf6>
 8000d86:	0034      	movs	r4, r6
 8000d88:	2301      	movs	r3, #1
 8000d8a:	08ff      	lsrs	r7, r7, #3
 8000d8c:	e63d      	b.n	8000a0a <__aeabi_fsub+0xf6>
 8000d8e:	2f00      	cmp	r7, #0
 8000d90:	d100      	bne.n	8000d94 <__aeabi_fsub+0x480>
 8000d92:	e693      	b.n	8000abc <__aeabi_fsub+0x1a8>
 8000d94:	2300      	movs	r3, #0
 8000d96:	08ff      	lsrs	r7, r7, #3
 8000d98:	e637      	b.n	8000a0a <__aeabi_fsub+0xf6>
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	08d7      	lsrs	r7, r2, #3
 8000d9e:	e634      	b.n	8000a0a <__aeabi_fsub+0xf6>
 8000da0:	2301      	movs	r3, #1
 8000da2:	08cf      	lsrs	r7, r1, #3
 8000da4:	e631      	b.n	8000a0a <__aeabi_fsub+0xf6>
 8000da6:	2280      	movs	r2, #128	@ 0x80
 8000da8:	000b      	movs	r3, r1
 8000daa:	04d2      	lsls	r2, r2, #19
 8000dac:	2001      	movs	r0, #1
 8000dae:	4013      	ands	r3, r2
 8000db0:	4211      	tst	r1, r2
 8000db2:	d000      	beq.n	8000db6 <__aeabi_fsub+0x4a2>
 8000db4:	e6ae      	b.n	8000b14 <__aeabi_fsub+0x200>
 8000db6:	08cf      	lsrs	r7, r1, #3
 8000db8:	e627      	b.n	8000a0a <__aeabi_fsub+0xf6>
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d100      	bne.n	8000dc0 <__aeabi_fsub+0x4ac>
 8000dbe:	e75f      	b.n	8000c80 <__aeabi_fsub+0x36c>
 8000dc0:	1b56      	subs	r6, r2, r5
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	d101      	bne.n	8000dca <__aeabi_fsub+0x4b6>
 8000dc6:	0033      	movs	r3, r6
 8000dc8:	e6e7      	b.n	8000b9a <__aeabi_fsub+0x286>
 8000dca:	2380      	movs	r3, #128	@ 0x80
 8000dcc:	4660      	mov	r0, ip
 8000dce:	04db      	lsls	r3, r3, #19
 8000dd0:	4318      	orrs	r0, r3
 8000dd2:	4684      	mov	ip, r0
 8000dd4:	e6eb      	b.n	8000bae <__aeabi_fsub+0x29a>
 8000dd6:	46c0      	nop			@ (mov r8, r8)
 8000dd8:	7dffffff 	.word	0x7dffffff

08000ddc <__aeabi_f2iz>:
 8000ddc:	0241      	lsls	r1, r0, #9
 8000dde:	0042      	lsls	r2, r0, #1
 8000de0:	0fc3      	lsrs	r3, r0, #31
 8000de2:	0a49      	lsrs	r1, r1, #9
 8000de4:	2000      	movs	r0, #0
 8000de6:	0e12      	lsrs	r2, r2, #24
 8000de8:	2a7e      	cmp	r2, #126	@ 0x7e
 8000dea:	dd03      	ble.n	8000df4 <__aeabi_f2iz+0x18>
 8000dec:	2a9d      	cmp	r2, #157	@ 0x9d
 8000dee:	dd02      	ble.n	8000df6 <__aeabi_f2iz+0x1a>
 8000df0:	4a09      	ldr	r2, [pc, #36]	@ (8000e18 <__aeabi_f2iz+0x3c>)
 8000df2:	1898      	adds	r0, r3, r2
 8000df4:	4770      	bx	lr
 8000df6:	2080      	movs	r0, #128	@ 0x80
 8000df8:	0400      	lsls	r0, r0, #16
 8000dfa:	4301      	orrs	r1, r0
 8000dfc:	2a95      	cmp	r2, #149	@ 0x95
 8000dfe:	dc07      	bgt.n	8000e10 <__aeabi_f2iz+0x34>
 8000e00:	2096      	movs	r0, #150	@ 0x96
 8000e02:	1a82      	subs	r2, r0, r2
 8000e04:	40d1      	lsrs	r1, r2
 8000e06:	4248      	negs	r0, r1
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d1f3      	bne.n	8000df4 <__aeabi_f2iz+0x18>
 8000e0c:	0008      	movs	r0, r1
 8000e0e:	e7f1      	b.n	8000df4 <__aeabi_f2iz+0x18>
 8000e10:	3a96      	subs	r2, #150	@ 0x96
 8000e12:	4091      	lsls	r1, r2
 8000e14:	e7f7      	b.n	8000e06 <__aeabi_f2iz+0x2a>
 8000e16:	46c0      	nop			@ (mov r8, r8)
 8000e18:	7fffffff 	.word	0x7fffffff

08000e1c <__aeabi_i2f>:
 8000e1c:	b570      	push	{r4, r5, r6, lr}
 8000e1e:	2800      	cmp	r0, #0
 8000e20:	d012      	beq.n	8000e48 <__aeabi_i2f+0x2c>
 8000e22:	17c3      	asrs	r3, r0, #31
 8000e24:	18c5      	adds	r5, r0, r3
 8000e26:	405d      	eors	r5, r3
 8000e28:	0fc4      	lsrs	r4, r0, #31
 8000e2a:	0028      	movs	r0, r5
 8000e2c:	f000 f88c 	bl	8000f48 <__clzsi2>
 8000e30:	239e      	movs	r3, #158	@ 0x9e
 8000e32:	1a1b      	subs	r3, r3, r0
 8000e34:	2b96      	cmp	r3, #150	@ 0x96
 8000e36:	dc0f      	bgt.n	8000e58 <__aeabi_i2f+0x3c>
 8000e38:	2808      	cmp	r0, #8
 8000e3a:	d038      	beq.n	8000eae <__aeabi_i2f+0x92>
 8000e3c:	3808      	subs	r0, #8
 8000e3e:	4085      	lsls	r5, r0
 8000e40:	026d      	lsls	r5, r5, #9
 8000e42:	0a6d      	lsrs	r5, r5, #9
 8000e44:	b2d8      	uxtb	r0, r3
 8000e46:	e002      	b.n	8000e4e <__aeabi_i2f+0x32>
 8000e48:	2400      	movs	r4, #0
 8000e4a:	2000      	movs	r0, #0
 8000e4c:	2500      	movs	r5, #0
 8000e4e:	05c0      	lsls	r0, r0, #23
 8000e50:	4328      	orrs	r0, r5
 8000e52:	07e4      	lsls	r4, r4, #31
 8000e54:	4320      	orrs	r0, r4
 8000e56:	bd70      	pop	{r4, r5, r6, pc}
 8000e58:	2b99      	cmp	r3, #153	@ 0x99
 8000e5a:	dc14      	bgt.n	8000e86 <__aeabi_i2f+0x6a>
 8000e5c:	1f42      	subs	r2, r0, #5
 8000e5e:	4095      	lsls	r5, r2
 8000e60:	002a      	movs	r2, r5
 8000e62:	4915      	ldr	r1, [pc, #84]	@ (8000eb8 <__aeabi_i2f+0x9c>)
 8000e64:	4011      	ands	r1, r2
 8000e66:	0755      	lsls	r5, r2, #29
 8000e68:	d01c      	beq.n	8000ea4 <__aeabi_i2f+0x88>
 8000e6a:	250f      	movs	r5, #15
 8000e6c:	402a      	ands	r2, r5
 8000e6e:	2a04      	cmp	r2, #4
 8000e70:	d018      	beq.n	8000ea4 <__aeabi_i2f+0x88>
 8000e72:	3104      	adds	r1, #4
 8000e74:	08ca      	lsrs	r2, r1, #3
 8000e76:	0149      	lsls	r1, r1, #5
 8000e78:	d515      	bpl.n	8000ea6 <__aeabi_i2f+0x8a>
 8000e7a:	239f      	movs	r3, #159	@ 0x9f
 8000e7c:	0252      	lsls	r2, r2, #9
 8000e7e:	1a18      	subs	r0, r3, r0
 8000e80:	0a55      	lsrs	r5, r2, #9
 8000e82:	b2c0      	uxtb	r0, r0
 8000e84:	e7e3      	b.n	8000e4e <__aeabi_i2f+0x32>
 8000e86:	2205      	movs	r2, #5
 8000e88:	0029      	movs	r1, r5
 8000e8a:	1a12      	subs	r2, r2, r0
 8000e8c:	40d1      	lsrs	r1, r2
 8000e8e:	0002      	movs	r2, r0
 8000e90:	321b      	adds	r2, #27
 8000e92:	4095      	lsls	r5, r2
 8000e94:	002a      	movs	r2, r5
 8000e96:	1e55      	subs	r5, r2, #1
 8000e98:	41aa      	sbcs	r2, r5
 8000e9a:	430a      	orrs	r2, r1
 8000e9c:	4906      	ldr	r1, [pc, #24]	@ (8000eb8 <__aeabi_i2f+0x9c>)
 8000e9e:	4011      	ands	r1, r2
 8000ea0:	0755      	lsls	r5, r2, #29
 8000ea2:	d1e2      	bne.n	8000e6a <__aeabi_i2f+0x4e>
 8000ea4:	08ca      	lsrs	r2, r1, #3
 8000ea6:	0252      	lsls	r2, r2, #9
 8000ea8:	0a55      	lsrs	r5, r2, #9
 8000eaa:	b2d8      	uxtb	r0, r3
 8000eac:	e7cf      	b.n	8000e4e <__aeabi_i2f+0x32>
 8000eae:	026d      	lsls	r5, r5, #9
 8000eb0:	0a6d      	lsrs	r5, r5, #9
 8000eb2:	308e      	adds	r0, #142	@ 0x8e
 8000eb4:	e7cb      	b.n	8000e4e <__aeabi_i2f+0x32>
 8000eb6:	46c0      	nop			@ (mov r8, r8)
 8000eb8:	fbffffff 	.word	0xfbffffff

08000ebc <__aeabi_ui2f>:
 8000ebc:	b510      	push	{r4, lr}
 8000ebe:	1e04      	subs	r4, r0, #0
 8000ec0:	d00d      	beq.n	8000ede <__aeabi_ui2f+0x22>
 8000ec2:	f000 f841 	bl	8000f48 <__clzsi2>
 8000ec6:	239e      	movs	r3, #158	@ 0x9e
 8000ec8:	1a1b      	subs	r3, r3, r0
 8000eca:	2b96      	cmp	r3, #150	@ 0x96
 8000ecc:	dc0c      	bgt.n	8000ee8 <__aeabi_ui2f+0x2c>
 8000ece:	2808      	cmp	r0, #8
 8000ed0:	d034      	beq.n	8000f3c <__aeabi_ui2f+0x80>
 8000ed2:	3808      	subs	r0, #8
 8000ed4:	4084      	lsls	r4, r0
 8000ed6:	0264      	lsls	r4, r4, #9
 8000ed8:	0a64      	lsrs	r4, r4, #9
 8000eda:	b2d8      	uxtb	r0, r3
 8000edc:	e001      	b.n	8000ee2 <__aeabi_ui2f+0x26>
 8000ede:	2000      	movs	r0, #0
 8000ee0:	2400      	movs	r4, #0
 8000ee2:	05c0      	lsls	r0, r0, #23
 8000ee4:	4320      	orrs	r0, r4
 8000ee6:	bd10      	pop	{r4, pc}
 8000ee8:	2b99      	cmp	r3, #153	@ 0x99
 8000eea:	dc13      	bgt.n	8000f14 <__aeabi_ui2f+0x58>
 8000eec:	1f42      	subs	r2, r0, #5
 8000eee:	4094      	lsls	r4, r2
 8000ef0:	4a14      	ldr	r2, [pc, #80]	@ (8000f44 <__aeabi_ui2f+0x88>)
 8000ef2:	4022      	ands	r2, r4
 8000ef4:	0761      	lsls	r1, r4, #29
 8000ef6:	d01c      	beq.n	8000f32 <__aeabi_ui2f+0x76>
 8000ef8:	210f      	movs	r1, #15
 8000efa:	4021      	ands	r1, r4
 8000efc:	2904      	cmp	r1, #4
 8000efe:	d018      	beq.n	8000f32 <__aeabi_ui2f+0x76>
 8000f00:	3204      	adds	r2, #4
 8000f02:	08d4      	lsrs	r4, r2, #3
 8000f04:	0152      	lsls	r2, r2, #5
 8000f06:	d515      	bpl.n	8000f34 <__aeabi_ui2f+0x78>
 8000f08:	239f      	movs	r3, #159	@ 0x9f
 8000f0a:	0264      	lsls	r4, r4, #9
 8000f0c:	1a18      	subs	r0, r3, r0
 8000f0e:	0a64      	lsrs	r4, r4, #9
 8000f10:	b2c0      	uxtb	r0, r0
 8000f12:	e7e6      	b.n	8000ee2 <__aeabi_ui2f+0x26>
 8000f14:	0002      	movs	r2, r0
 8000f16:	0021      	movs	r1, r4
 8000f18:	321b      	adds	r2, #27
 8000f1a:	4091      	lsls	r1, r2
 8000f1c:	000a      	movs	r2, r1
 8000f1e:	1e51      	subs	r1, r2, #1
 8000f20:	418a      	sbcs	r2, r1
 8000f22:	2105      	movs	r1, #5
 8000f24:	1a09      	subs	r1, r1, r0
 8000f26:	40cc      	lsrs	r4, r1
 8000f28:	4314      	orrs	r4, r2
 8000f2a:	4a06      	ldr	r2, [pc, #24]	@ (8000f44 <__aeabi_ui2f+0x88>)
 8000f2c:	4022      	ands	r2, r4
 8000f2e:	0761      	lsls	r1, r4, #29
 8000f30:	d1e2      	bne.n	8000ef8 <__aeabi_ui2f+0x3c>
 8000f32:	08d4      	lsrs	r4, r2, #3
 8000f34:	0264      	lsls	r4, r4, #9
 8000f36:	0a64      	lsrs	r4, r4, #9
 8000f38:	b2d8      	uxtb	r0, r3
 8000f3a:	e7d2      	b.n	8000ee2 <__aeabi_ui2f+0x26>
 8000f3c:	0264      	lsls	r4, r4, #9
 8000f3e:	0a64      	lsrs	r4, r4, #9
 8000f40:	308e      	adds	r0, #142	@ 0x8e
 8000f42:	e7ce      	b.n	8000ee2 <__aeabi_ui2f+0x26>
 8000f44:	fbffffff 	.word	0xfbffffff

08000f48 <__clzsi2>:
 8000f48:	211c      	movs	r1, #28
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	041b      	lsls	r3, r3, #16
 8000f4e:	4298      	cmp	r0, r3
 8000f50:	d301      	bcc.n	8000f56 <__clzsi2+0xe>
 8000f52:	0c00      	lsrs	r0, r0, #16
 8000f54:	3910      	subs	r1, #16
 8000f56:	0a1b      	lsrs	r3, r3, #8
 8000f58:	4298      	cmp	r0, r3
 8000f5a:	d301      	bcc.n	8000f60 <__clzsi2+0x18>
 8000f5c:	0a00      	lsrs	r0, r0, #8
 8000f5e:	3908      	subs	r1, #8
 8000f60:	091b      	lsrs	r3, r3, #4
 8000f62:	4298      	cmp	r0, r3
 8000f64:	d301      	bcc.n	8000f6a <__clzsi2+0x22>
 8000f66:	0900      	lsrs	r0, r0, #4
 8000f68:	3904      	subs	r1, #4
 8000f6a:	a202      	add	r2, pc, #8	@ (adr r2, 8000f74 <__clzsi2+0x2c>)
 8000f6c:	5c10      	ldrb	r0, [r2, r0]
 8000f6e:	1840      	adds	r0, r0, r1
 8000f70:	4770      	bx	lr
 8000f72:	46c0      	nop			@ (mov r8, r8)
 8000f74:	02020304 	.word	0x02020304
 8000f78:	01010101 	.word	0x01010101
	...

08000f84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f84:	b590      	push	{r4, r7, lr}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f8a:	f001 fef3 	bl	8002d74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f8e:	f000 fa93 	bl	80014b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f92:	f000 fcc7 	bl	8001924 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f96:	f000 fca7 	bl	80018e8 <MX_DMA_Init>
  MX_TIM1_Init();
 8000f9a:	f000 fbbf 	bl	800171c <MX_TIM1_Init>
  MX_TIM17_Init();
 8000f9e:	f000 fc7b 	bl	8001898 <MX_TIM17_Init>
  MX_TIM14_Init();
 8000fa2:	f000 fc2d 	bl	8001800 <MX_TIM14_Init>
  MX_TIM16_Init();
 8000fa6:	f000 fc4f 	bl	8001848 <MX_TIM16_Init>
  MX_SPI1_Init();
 8000faa:	f000 fb7d 	bl	80016a8 <MX_SPI1_Init>
  MX_ADC_Init();
 8000fae:	f000 fad3 	bl	8001558 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */

  // initiate DMA mapping
  HAL_ADC_Start_DMA(&hadc, (uint32_t*)ADC_DMA_Buf, ADC_NUM);
 8000fb2:	49d4      	ldr	r1, [pc, #848]	@ (8001304 <main+0x380>)
 8000fb4:	4bd4      	ldr	r3, [pc, #848]	@ (8001308 <main+0x384>)
 8000fb6:	2207      	movs	r2, #7
 8000fb8:	0018      	movs	r0, r3
 8000fba:	f002 f8a3 	bl	8003104 <HAL_ADC_Start_DMA>

  // Setup SPI and allot time for hardware
  HAL_SPI_Receive_IT(&hspi1, RX_Buffer, GCODE_BYTES); //Receiving in Interrupt mode
 8000fbe:	49d3      	ldr	r1, [pc, #844]	@ (800130c <main+0x388>)
 8000fc0:	4bd3      	ldr	r3, [pc, #844]	@ (8001310 <main+0x38c>)
 8000fc2:	2208      	movs	r2, #8
 8000fc4:	0018      	movs	r0, r3
 8000fc6:	f003 fd0d 	bl	80049e4 <HAL_SPI_Receive_IT>
  HAL_Delay(100);
 8000fca:	2064      	movs	r0, #100	@ 0x64
 8000fcc:	f001 ff36 	bl	8002e3c <HAL_Delay>

  // Set all directions to default positive
  GPIOWrite(dirX1_GPIO_Port, dirX1_Pin, Pos);
 8000fd0:	2380      	movs	r3, #128	@ 0x80
 8000fd2:	0059      	lsls	r1, r3, #1
 8000fd4:	2390      	movs	r3, #144	@ 0x90
 8000fd6:	05db      	lsls	r3, r3, #23
 8000fd8:	2200      	movs	r2, #0
 8000fda:	0018      	movs	r0, r3
 8000fdc:	f000 fd76 	bl	8001acc <GPIOWrite>
  GPIOWrite(dirX2_GPIO_Port, dirX2_Pin, DIR_X2(Pos));
 8000fe0:	2380      	movs	r3, #128	@ 0x80
 8000fe2:	0099      	lsls	r1, r3, #2
 8000fe4:	2390      	movs	r3, #144	@ 0x90
 8000fe6:	05db      	lsls	r3, r3, #23
 8000fe8:	2201      	movs	r2, #1
 8000fea:	0018      	movs	r0, r3
 8000fec:	f000 fd6e 	bl	8001acc <GPIOWrite>
  GPIOWrite(dirY_GPIO_Port,  dirY_Pin,  Pos);
 8000ff0:	4bc8      	ldr	r3, [pc, #800]	@ (8001314 <main+0x390>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2120      	movs	r1, #32
 8000ff6:	0018      	movs	r0, r3
 8000ff8:	f000 fd68 	bl	8001acc <GPIOWrite>
  GPIOWrite(dirZ_GPIO_Port,  dirZ_Pin,  Pos);
 8000ffc:	2380      	movs	r3, #128	@ 0x80
 8000ffe:	00d9      	lsls	r1, r3, #3
 8001000:	2390      	movs	r3, #144	@ 0x90
 8001002:	05db      	lsls	r3, r3, #23
 8001004:	2200      	movs	r2, #0
 8001006:	0018      	movs	r0, r3
 8001008:	f000 fd60 	bl	8001acc <GPIOWrite>

  // Reset all stepper driving pins to
  GPIOWrite(pulX1_GPIO_Port, pulX1_Pin, GPIO_PIN_RESET);
 800100c:	2380      	movs	r3, #128	@ 0x80
 800100e:	00db      	lsls	r3, r3, #3
 8001010:	48c0      	ldr	r0, [pc, #768]	@ (8001314 <main+0x390>)
 8001012:	2200      	movs	r2, #0
 8001014:	0019      	movs	r1, r3
 8001016:	f000 fd59 	bl	8001acc <GPIOWrite>
  GPIOWrite(pulX2_GPIO_Port, pulX2_Pin, GPIO_PIN_RESET);
 800101a:	4bbf      	ldr	r3, [pc, #764]	@ (8001318 <main+0x394>)
 800101c:	2200      	movs	r2, #0
 800101e:	2180      	movs	r1, #128	@ 0x80
 8001020:	0018      	movs	r0, r3
 8001022:	f000 fd53 	bl	8001acc <GPIOWrite>
  GPIOWrite(pulY_GPIO_Port,  pulY_Pin,  GPIO_PIN_RESET);
 8001026:	4bbb      	ldr	r3, [pc, #748]	@ (8001314 <main+0x390>)
 8001028:	2200      	movs	r2, #0
 800102a:	2110      	movs	r1, #16
 800102c:	0018      	movs	r0, r3
 800102e:	f000 fd4d 	bl	8001acc <GPIOWrite>
  GPIOWrite(pulZ_GPIO_Port,  pulZ_Pin,  GPIO_PIN_RESET);
 8001032:	4bb8      	ldr	r3, [pc, #736]	@ (8001314 <main+0x390>)
 8001034:	2200      	movs	r2, #0
 8001036:	2108      	movs	r1, #8
 8001038:	0018      	movs	r0, r3
 800103a:	f000 fd47 	bl	8001acc <GPIOWrite>

  // Setup all timers in interrupt mode
  HAL_TIM_Base_Start_IT(&htim14);
 800103e:	4bb7      	ldr	r3, [pc, #732]	@ (800131c <main+0x398>)
 8001040:	0018      	movs	r0, r3
 8001042:	f004 fc03 	bl	800584c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim16);
 8001046:	4bb6      	ldr	r3, [pc, #728]	@ (8001320 <main+0x39c>)
 8001048:	0018      	movs	r0, r3
 800104a:	f004 fbff 	bl	800584c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim17);
 800104e:	4bb5      	ldr	r3, [pc, #724]	@ (8001324 <main+0x3a0>)
 8001050:	0018      	movs	r0, r3
 8001052:	f004 fbfb 	bl	800584c <HAL_TIM_Base_Start_IT>

  // Stop all timers to stop motor movement
  for( Axis A = X; A < END; A++)
 8001056:	230f      	movs	r3, #15
 8001058:	18fb      	adds	r3, r7, r3
 800105a:	2200      	movs	r2, #0
 800105c:	701a      	strb	r2, [r3, #0]
 800105e:	e013      	b.n	8001088 <main+0x104>
	  STOP_TIM(A);
 8001060:	200f      	movs	r0, #15
 8001062:	183b      	adds	r3, r7, r0
 8001064:	781a      	ldrb	r2, [r3, #0]
 8001066:	4bb0      	ldr	r3, [pc, #704]	@ (8001328 <main+0x3a4>)
 8001068:	0092      	lsls	r2, r2, #2
 800106a:	58d3      	ldr	r3, [r2, r3]
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	183b      	adds	r3, r7, r0
 8001070:	7819      	ldrb	r1, [r3, #0]
 8001072:	4bad      	ldr	r3, [pc, #692]	@ (8001328 <main+0x3a4>)
 8001074:	0089      	lsls	r1, r1, #2
 8001076:	58cb      	ldr	r3, [r1, r3]
 8001078:	2101      	movs	r1, #1
 800107a:	438a      	bics	r2, r1
 800107c:	601a      	str	r2, [r3, #0]
  for( Axis A = X; A < END; A++)
 800107e:	183b      	adds	r3, r7, r0
 8001080:	781a      	ldrb	r2, [r3, #0]
 8001082:	183b      	adds	r3, r7, r0
 8001084:	3201      	adds	r2, #1
 8001086:	701a      	strb	r2, [r3, #0]
 8001088:	230f      	movs	r3, #15
 800108a:	18fb      	adds	r3, r7, r3
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	2b02      	cmp	r3, #2
 8001090:	d9e6      	bls.n	8001060 <main+0xdc>

  // Initialize all variables
  for( Axis A = X; A < END; A++)
 8001092:	230e      	movs	r3, #14
 8001094:	18fb      	adds	r3, r7, r3
 8001096:	2200      	movs	r2, #0
 8001098:	701a      	strb	r2, [r3, #0]
 800109a:	e038      	b.n	800110e <main+0x18a>
  {
	  RST_TIM(A);
 800109c:	200e      	movs	r0, #14
 800109e:	183b      	adds	r3, r7, r0
 80010a0:	781a      	ldrb	r2, [r3, #0]
 80010a2:	4ba1      	ldr	r3, [pc, #644]	@ (8001328 <main+0x3a4>)
 80010a4:	0092      	lsls	r2, r2, #2
 80010a6:	58d3      	ldr	r3, [r2, r3]
 80010a8:	2200      	movs	r2, #0
 80010aa:	625a      	str	r2, [r3, #36]	@ 0x24
	  AccVal[A] = ACC_START;
 80010ac:	183b      	adds	r3, r7, r0
 80010ae:	781a      	ldrb	r2, [r3, #0]
 80010b0:	4b9e      	ldr	r3, [pc, #632]	@ (800132c <main+0x3a8>)
 80010b2:	0052      	lsls	r2, r2, #1
 80010b4:	2100      	movs	r1, #0
 80010b6:	52d1      	strh	r1, [r2, r3]
	  LIM_TIM(A) = GET_DELAY(A);
 80010b8:	183b      	adds	r3, r7, r0
 80010ba:	781a      	ldrb	r2, [r3, #0]
 80010bc:	4b9b      	ldr	r3, [pc, #620]	@ (800132c <main+0x3a8>)
 80010be:	0052      	lsls	r2, r2, #1
 80010c0:	5ad3      	ldrh	r3, [r2, r3]
 80010c2:	001a      	movs	r2, r3
 80010c4:	2396      	movs	r3, #150	@ 0x96
 80010c6:	1a9a      	subs	r2, r3, r2
 80010c8:	0013      	movs	r3, r2
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	189b      	adds	r3, r3, r2
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	4a97      	ldr	r2, [pc, #604]	@ (8001330 <main+0x3ac>)
 80010d2:	1899      	adds	r1, r3, r2
 80010d4:	183b      	adds	r3, r7, r0
 80010d6:	781a      	ldrb	r2, [r3, #0]
 80010d8:	4b93      	ldr	r3, [pc, #588]	@ (8001328 <main+0x3a4>)
 80010da:	0092      	lsls	r2, r2, #2
 80010dc:	58d3      	ldr	r3, [r2, r3]
 80010de:	000a      	movs	r2, r1
 80010e0:	62da      	str	r2, [r3, #44]	@ 0x2c
	  CurPos[A] = 0;
 80010e2:	183b      	adds	r3, r7, r0
 80010e4:	781a      	ldrb	r2, [r3, #0]
 80010e6:	4b93      	ldr	r3, [pc, #588]	@ (8001334 <main+0x3b0>)
 80010e8:	0092      	lsls	r2, r2, #2
 80010ea:	2100      	movs	r1, #0
 80010ec:	50d1      	str	r1, [r2, r3]
	  ReqPos[A] = 0;
 80010ee:	183b      	adds	r3, r7, r0
 80010f0:	781a      	ldrb	r2, [r3, #0]
 80010f2:	4b91      	ldr	r3, [pc, #580]	@ (8001338 <main+0x3b4>)
 80010f4:	0092      	lsls	r2, r2, #2
 80010f6:	2100      	movs	r1, #0
 80010f8:	50d1      	str	r1, [r2, r3]
	  Dir[A] = Pos;
 80010fa:	183b      	adds	r3, r7, r0
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	4a8f      	ldr	r2, [pc, #572]	@ (800133c <main+0x3b8>)
 8001100:	2100      	movs	r1, #0
 8001102:	54d1      	strb	r1, [r2, r3]
  for( Axis A = X; A < END; A++)
 8001104:	183b      	adds	r3, r7, r0
 8001106:	781a      	ldrb	r2, [r3, #0]
 8001108:	183b      	adds	r3, r7, r0
 800110a:	3201      	adds	r2, #1
 800110c:	701a      	strb	r2, [r3, #0]
 800110e:	230e      	movs	r3, #14
 8001110:	18fb      	adds	r3, r7, r3
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	2b02      	cmp	r3, #2
 8001116:	d9c1      	bls.n	800109c <main+0x118>
  }

  MainState = Init;
 8001118:	4b89      	ldr	r3, [pc, #548]	@ (8001340 <main+0x3bc>)
 800111a:	2200      	movs	r2, #0
 800111c:	701a      	strb	r2, [r3, #0]
  Flags = 0x00;
 800111e:	4b89      	ldr	r3, [pc, #548]	@ (8001344 <main+0x3c0>)
 8001120:	2200      	movs	r2, #0
 8001122:	701a      	strb	r2, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  switch(MainState)
 8001124:	4b86      	ldr	r3, [pc, #536]	@ (8001340 <main+0x3bc>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	2b03      	cmp	r3, #3
 800112a:	d100      	bne.n	800112e <main+0x1aa>
 800112c:	e0e3      	b.n	80012f6 <main+0x372>
 800112e:	dd00      	ble.n	8001132 <main+0x1ae>
 8001130:	e137      	b.n	80013a2 <main+0x41e>
 8001132:	2b02      	cmp	r3, #2
 8001134:	d046      	beq.n	80011c4 <main+0x240>
 8001136:	dd00      	ble.n	800113a <main+0x1b6>
 8001138:	e133      	b.n	80013a2 <main+0x41e>
 800113a:	2b00      	cmp	r3, #0
 800113c:	d002      	beq.n	8001144 <main+0x1c0>
 800113e:	2b01      	cmp	r3, #1
 8001140:	d019      	beq.n	8001176 <main+0x1f2>
 8001142:	e12e      	b.n	80013a2 <main+0x41e>
	  {
		  case Init:

			  MainState = Init;
 8001144:	4b7e      	ldr	r3, [pc, #504]	@ (8001340 <main+0x3bc>)
 8001146:	2200      	movs	r2, #0
 8001148:	701a      	strb	r2, [r3, #0]
			  SetPIPinIdle();
 800114a:	f001 fac7 	bl	80026dc <SetPIPinIdle>

			  // Only exit Init if the PI allows
			  if(ReadPIPin())
 800114e:	f001 fad3 	bl	80026f8 <ReadPIPin>
 8001152:	1e03      	subs	r3, r0, #0
 8001154:	d100      	bne.n	8001158 <main+0x1d4>
 8001156:	e128      	b.n	80013aa <main+0x426>
			  {
				  if(TST_HMEFLAG())
 8001158:	4b7a      	ldr	r3, [pc, #488]	@ (8001344 <main+0x3c0>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	b2db      	uxtb	r3, r3
 800115e:	001a      	movs	r2, r3
 8001160:	2320      	movs	r3, #32
 8001162:	4013      	ands	r3, r2
 8001164:	d003      	beq.n	800116e <main+0x1ea>
					  MainState = Home;
 8001166:	4b76      	ldr	r3, [pc, #472]	@ (8001340 <main+0x3bc>)
 8001168:	2201      	movs	r2, #1
 800116a:	701a      	strb	r2, [r3, #0]
				  else
					  MainState = Idle;
			  }

			  break;
 800116c:	e11d      	b.n	80013aa <main+0x426>
					  MainState = Idle;
 800116e:	4b74      	ldr	r3, [pc, #464]	@ (8001340 <main+0x3bc>)
 8001170:	2202      	movs	r2, #2
 8001172:	701a      	strb	r2, [r3, #0]
			  break;
 8001174:	e119      	b.n	80013aa <main+0x426>

		  case Home:

			  MainState = Home;
 8001176:	4b72      	ldr	r3, [pc, #456]	@ (8001340 <main+0x3bc>)
 8001178:	2201      	movs	r2, #1
 800117a:	701a      	strb	r2, [r3, #0]
			  SetPIPinActive();
 800117c:	f001 faa0 	bl	80026c0 <SetPIPinActive>

			  for( Axis A = X; A < END; A++)
 8001180:	230d      	movs	r3, #13
 8001182:	18fb      	adds	r3, r7, r3
 8001184:	2200      	movs	r2, #0
 8001186:	701a      	strb	r2, [r3, #0]
 8001188:	e00b      	b.n	80011a2 <main+0x21e>
				  HomeAxis(A);
 800118a:	240d      	movs	r4, #13
 800118c:	193b      	adds	r3, r7, r4
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	0018      	movs	r0, r3
 8001192:	f000 fe6f 	bl	8001e74 <HomeAxis>
			  for( Axis A = X; A < END; A++)
 8001196:	0021      	movs	r1, r4
 8001198:	187b      	adds	r3, r7, r1
 800119a:	781a      	ldrb	r2, [r3, #0]
 800119c:	187b      	adds	r3, r7, r1
 800119e:	3201      	adds	r2, #1
 80011a0:	701a      	strb	r2, [r3, #0]
 80011a2:	230d      	movs	r3, #13
 80011a4:	18fb      	adds	r3, r7, r3
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d9ee      	bls.n	800118a <main+0x206>

			  RST_HMEFLAG();
 80011ac:	4b65      	ldr	r3, [pc, #404]	@ (8001344 <main+0x3c0>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	2220      	movs	r2, #32
 80011b4:	4393      	bics	r3, r2
 80011b6:	b2da      	uxtb	r2, r3
 80011b8:	4b62      	ldr	r3, [pc, #392]	@ (8001344 <main+0x3c0>)
 80011ba:	701a      	strb	r2, [r3, #0]
			  MainState = Idle;
 80011bc:	4b60      	ldr	r3, [pc, #384]	@ (8001340 <main+0x3bc>)
 80011be:	2202      	movs	r2, #2
 80011c0:	701a      	strb	r2, [r3, #0]

			  break;
 80011c2:	e0f7      	b.n	80013b4 <main+0x430>

		  case Idle:

			  MainState = Idle;
 80011c4:	4b5e      	ldr	r3, [pc, #376]	@ (8001340 <main+0x3bc>)
 80011c6:	2202      	movs	r2, #2
 80011c8:	701a      	strb	r2, [r3, #0]
			  SetPIPinIdle();
 80011ca:	f001 fa87 	bl	80026dc <SetPIPinIdle>

			  // If SPI received, calculate and send checksum
			  if(TST_RXFLAG())
 80011ce:	4b5d      	ldr	r3, [pc, #372]	@ (8001344 <main+0x3c0>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	001a      	movs	r2, r3
 80011d6:	2308      	movs	r3, #8
 80011d8:	4013      	ands	r3, r2
 80011da:	d023      	beq.n	8001224 <main+0x2a0>
			  {
					TX_Buffer[0] = 0;
 80011dc:	4b5a      	ldr	r3, [pc, #360]	@ (8001348 <main+0x3c4>)
 80011de:	2200      	movs	r2, #0
 80011e0:	701a      	strb	r2, [r3, #0]

					for(int i = 0; i < GCODE_BYTES; i++)
 80011e2:	2300      	movs	r3, #0
 80011e4:	60bb      	str	r3, [r7, #8]
 80011e6:	e00c      	b.n	8001202 <main+0x27e>
					  TX_Buffer[0] += RX_Buffer[i];
 80011e8:	4b57      	ldr	r3, [pc, #348]	@ (8001348 <main+0x3c4>)
 80011ea:	781a      	ldrb	r2, [r3, #0]
 80011ec:	4947      	ldr	r1, [pc, #284]	@ (800130c <main+0x388>)
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	18cb      	adds	r3, r1, r3
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	18d3      	adds	r3, r2, r3
 80011f6:	b2da      	uxtb	r2, r3
 80011f8:	4b53      	ldr	r3, [pc, #332]	@ (8001348 <main+0x3c4>)
 80011fa:	701a      	strb	r2, [r3, #0]
					for(int i = 0; i < GCODE_BYTES; i++)
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	3301      	adds	r3, #1
 8001200:	60bb      	str	r3, [r7, #8]
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	2b07      	cmp	r3, #7
 8001206:	ddef      	ble.n	80011e8 <main+0x264>

					HAL_SPI_Transmit_IT(&hspi1, TX_Buffer, CHECKSUM_BYTES); //Sending in Interrupt mode
 8001208:	494f      	ldr	r1, [pc, #316]	@ (8001348 <main+0x3c4>)
 800120a:	4b41      	ldr	r3, [pc, #260]	@ (8001310 <main+0x38c>)
 800120c:	2201      	movs	r2, #1
 800120e:	0018      	movs	r0, r3
 8001210:	f003 fb50 	bl	80048b4 <HAL_SPI_Transmit_IT>

					RST_RXFLAG();
 8001214:	4b4b      	ldr	r3, [pc, #300]	@ (8001344 <main+0x3c0>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	b2db      	uxtb	r3, r3
 800121a:	2208      	movs	r2, #8
 800121c:	4393      	bics	r3, r2
 800121e:	b2da      	uxtb	r2, r3
 8001220:	4b48      	ldr	r3, [pc, #288]	@ (8001344 <main+0x3c0>)
 8001222:	701a      	strb	r2, [r3, #0]
			  }

			  // If checksum sent, wait for PI confirmation or another RX
			  if(ReadPIPin() && TST_TXFLAG())
 8001224:	f001 fa68 	bl	80026f8 <ReadPIPin>
 8001228:	1e03      	subs	r3, r0, #0
 800122a:	d059      	beq.n	80012e0 <main+0x35c>
 800122c:	4b45      	ldr	r3, [pc, #276]	@ (8001344 <main+0x3c0>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	b2db      	uxtb	r3, r3
 8001232:	001a      	movs	r2, r3
 8001234:	2310      	movs	r3, #16
 8001236:	4013      	ands	r3, r2
 8001238:	d052      	beq.n	80012e0 <main+0x35c>
			  {
				  RST_TXFLAG();
 800123a:	4b42      	ldr	r3, [pc, #264]	@ (8001344 <main+0x3c0>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	b2db      	uxtb	r3, r3
 8001240:	2210      	movs	r2, #16
 8001242:	4393      	bics	r3, r2
 8001244:	b2da      	uxtb	r2, r3
 8001246:	4b3f      	ldr	r3, [pc, #252]	@ (8001344 <main+0x3c0>)
 8001248:	701a      	strb	r2, [r3, #0]

				  ParseGCode();
 800124a:	f001 f97d 	bl	8002548 <ParseGCode>

				  // Check which, if any, axes need to be moved
				  for( Axis A = X; A < END; A++)
 800124e:	1dfb      	adds	r3, r7, #7
 8001250:	2200      	movs	r2, #0
 8001252:	701a      	strb	r2, [r3, #0]
 8001254:	e009      	b.n	800126a <main+0x2e6>
					  RequestCheck(A);
 8001256:	1dfb      	adds	r3, r7, #7
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	0018      	movs	r0, r3
 800125c:	f001 f8ae 	bl	80023bc <RequestCheck>
				  for( Axis A = X; A < END; A++)
 8001260:	1dfb      	adds	r3, r7, #7
 8001262:	781a      	ldrb	r2, [r3, #0]
 8001264:	1dfb      	adds	r3, r7, #7
 8001266:	3201      	adds	r2, #1
 8001268:	701a      	strb	r2, [r3, #0]
 800126a:	1dfb      	adds	r3, r7, #7
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	2b02      	cmp	r3, #2
 8001270:	d9f1      	bls.n	8001256 <main+0x2d2>

				  // If movement requested, initiate appropriate timers
				  if(TST_MFLAG_ALL())
 8001272:	4b34      	ldr	r3, [pc, #208]	@ (8001344 <main+0x3c0>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	b2db      	uxtb	r3, r3
 8001278:	001a      	movs	r2, r3
 800127a:	2301      	movs	r3, #1
 800127c:	0019      	movs	r1, r3
 800127e:	2302      	movs	r3, #2
 8001280:	18cb      	adds	r3, r1, r3
 8001282:	2104      	movs	r1, #4
 8001284:	185b      	adds	r3, r3, r1
 8001286:	4013      	ands	r3, r2
 8001288:	d02a      	beq.n	80012e0 <main+0x35c>
				  {
					  MainState = Move;
 800128a:	4b2d      	ldr	r3, [pc, #180]	@ (8001340 <main+0x3bc>)
 800128c:	2203      	movs	r2, #3
 800128e:	701a      	strb	r2, [r3, #0]
					  SetPIPinActive();
 8001290:	f001 fa16 	bl	80026c0 <SetPIPinActive>

					  for( Axis A = X; A < END; A++)
 8001294:	1dbb      	adds	r3, r7, #6
 8001296:	2200      	movs	r2, #0
 8001298:	701a      	strb	r2, [r3, #0]
 800129a:	e01d      	b.n	80012d8 <main+0x354>
						  if(TST_MFLAG(A))
 800129c:	1dbb      	adds	r3, r7, #6
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	4a2a      	ldr	r2, [pc, #168]	@ (800134c <main+0x3c8>)
 80012a2:	5cd3      	ldrb	r3, [r2, r3]
 80012a4:	4a27      	ldr	r2, [pc, #156]	@ (8001344 <main+0x3c0>)
 80012a6:	7812      	ldrb	r2, [r2, #0]
 80012a8:	b2d2      	uxtb	r2, r2
 80012aa:	4013      	ands	r3, r2
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d00d      	beq.n	80012ce <main+0x34a>
							  START_TIM(A);
 80012b2:	1dbb      	adds	r3, r7, #6
 80012b4:	781a      	ldrb	r2, [r3, #0]
 80012b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001328 <main+0x3a4>)
 80012b8:	0092      	lsls	r2, r2, #2
 80012ba:	58d3      	ldr	r3, [r2, r3]
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	1dbb      	adds	r3, r7, #6
 80012c0:	7819      	ldrb	r1, [r3, #0]
 80012c2:	4b19      	ldr	r3, [pc, #100]	@ (8001328 <main+0x3a4>)
 80012c4:	0089      	lsls	r1, r1, #2
 80012c6:	58cb      	ldr	r3, [r1, r3]
 80012c8:	2101      	movs	r1, #1
 80012ca:	430a      	orrs	r2, r1
 80012cc:	601a      	str	r2, [r3, #0]
					  for( Axis A = X; A < END; A++)
 80012ce:	1dbb      	adds	r3, r7, #6
 80012d0:	781a      	ldrb	r2, [r3, #0]
 80012d2:	1dbb      	adds	r3, r7, #6
 80012d4:	3201      	adds	r2, #1
 80012d6:	701a      	strb	r2, [r3, #0]
 80012d8:	1dbb      	adds	r3, r7, #6
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d9dd      	bls.n	800129c <main+0x318>
				  }

			  }

			  if(TST_HMEFLAG())
 80012e0:	4b18      	ldr	r3, [pc, #96]	@ (8001344 <main+0x3c0>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	001a      	movs	r2, r3
 80012e8:	2320      	movs	r3, #32
 80012ea:	4013      	ands	r3, r2
 80012ec:	d05f      	beq.n	80013ae <main+0x42a>
				  MainState = Home;
 80012ee:	4b14      	ldr	r3, [pc, #80]	@ (8001340 <main+0x3bc>)
 80012f0:	2201      	movs	r2, #1
 80012f2:	701a      	strb	r2, [r3, #0]

			  break;
 80012f4:	e05b      	b.n	80013ae <main+0x42a>

		  case Move:

			  MainState = Move;
 80012f6:	4b12      	ldr	r3, [pc, #72]	@ (8001340 <main+0x3bc>)
 80012f8:	2203      	movs	r2, #3
 80012fa:	701a      	strb	r2, [r3, #0]

			  // Handle accelerations
			  for( Axis A = X; A < END; A++)
 80012fc:	1d7b      	adds	r3, r7, #5
 80012fe:	2200      	movs	r2, #0
 8001300:	701a      	strb	r2, [r3, #0]
 8001302:	e03a      	b.n	800137a <main+0x3f6>
 8001304:	20000294 	.word	0x20000294
 8001308:	2000008c 	.word	0x2000008c
 800130c:	200002a4 	.word	0x200002a4
 8001310:	20000110 	.word	0x20000110
 8001314:	48000400 	.word	0x48000400
 8001318:	48000800 	.word	0x48000800
 800131c:	200001bc 	.word	0x200001bc
 8001320:	20000204 	.word	0x20000204
 8001324:	2000024c 	.word	0x2000024c
 8001328:	20000000 	.word	0x20000000
 800132c:	200002e0 	.word	0x200002e0
 8001330:	000005dc 	.word	0x000005dc
 8001334:	200002b8 	.word	0x200002b8
 8001338:	200002c4 	.word	0x200002c4
 800133c:	200002dc 	.word	0x200002dc
 8001340:	200002e6 	.word	0x200002e6
 8001344:	200002e7 	.word	0x200002e7
 8001348:	200002ac 	.word	0x200002ac
 800134c:	08006250 	.word	0x08006250
				  if(TST_MFLAG(A))
 8001350:	1d7b      	adds	r3, r7, #5
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	4a4f      	ldr	r2, [pc, #316]	@ (8001494 <main+0x510>)
 8001356:	5cd3      	ldrb	r3, [r2, r3]
 8001358:	4a4f      	ldr	r2, [pc, #316]	@ (8001498 <main+0x514>)
 800135a:	7812      	ldrb	r2, [r2, #0]
 800135c:	b2d2      	uxtb	r2, r2
 800135e:	4013      	ands	r3, r2
 8001360:	b2db      	uxtb	r3, r3
 8001362:	2b00      	cmp	r3, #0
 8001364:	d004      	beq.n	8001370 <main+0x3ec>
					  MaxAccelerationHandle(A);
 8001366:	1d7b      	adds	r3, r7, #5
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	0018      	movs	r0, r3
 800136c:	f000 fd18 	bl	8001da0 <MaxAccelerationHandle>
			  for( Axis A = X; A < END; A++)
 8001370:	1d7b      	adds	r3, r7, #5
 8001372:	781a      	ldrb	r2, [r3, #0]
 8001374:	1d7b      	adds	r3, r7, #5
 8001376:	3201      	adds	r2, #1
 8001378:	701a      	strb	r2, [r3, #0]
 800137a:	1d7b      	adds	r3, r7, #5
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	2b02      	cmp	r3, #2
 8001380:	d9e6      	bls.n	8001350 <main+0x3cc>

			  // Return to idle once all movement is done
			  if(TST_MFLAG_ALL() == 0)
 8001382:	4b45      	ldr	r3, [pc, #276]	@ (8001498 <main+0x514>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	b2db      	uxtb	r3, r3
 8001388:	001a      	movs	r2, r3
 800138a:	2301      	movs	r3, #1
 800138c:	0019      	movs	r1, r3
 800138e:	2302      	movs	r3, #2
 8001390:	18cb      	adds	r3, r1, r3
 8001392:	2104      	movs	r1, #4
 8001394:	185b      	adds	r3, r3, r1
 8001396:	4013      	ands	r3, r2
 8001398:	d10b      	bne.n	80013b2 <main+0x42e>
				  MainState = Idle;
 800139a:	4b40      	ldr	r3, [pc, #256]	@ (800149c <main+0x518>)
 800139c:	2202      	movs	r2, #2
 800139e:	701a      	strb	r2, [r3, #0]

			  break;
 80013a0:	e007      	b.n	80013b2 <main+0x42e>

		  default:
			  MainState = Idle;
 80013a2:	4b3e      	ldr	r3, [pc, #248]	@ (800149c <main+0x518>)
 80013a4:	2202      	movs	r2, #2
 80013a6:	701a      	strb	r2, [r3, #0]
			  break;
 80013a8:	e004      	b.n	80013b4 <main+0x430>
			  break;
 80013aa:	46c0      	nop			@ (mov r8, r8)
 80013ac:	e002      	b.n	80013b4 <main+0x430>
			  break;
 80013ae:	46c0      	nop			@ (mov r8, r8)
 80013b0:	e000      	b.n	80013b4 <main+0x430>
			  break;
 80013b2:	46c0      	nop			@ (mov r8, r8)

	  }

	  // Emergency motor stop
	  if(GPIORead(B1_GPIO_Port,  B1_Pin) == 0)
 80013b4:	2380      	movs	r3, #128	@ 0x80
 80013b6:	019b      	lsls	r3, r3, #6
 80013b8:	4a39      	ldr	r2, [pc, #228]	@ (80014a0 <main+0x51c>)
 80013ba:	0019      	movs	r1, r3
 80013bc:	0010      	movs	r0, r2
 80013be:	f000 fba2 	bl	8001b06 <GPIORead>
 80013c2:	1e03      	subs	r3, r0, #0
 80013c4:	d000      	beq.n	80013c8 <main+0x444>
 80013c6:	e6ad      	b.n	8001124 <main+0x1a0>
	  {
		  // Immediately stop all motors
		  for( Axis A = X; A < END; A++)
 80013c8:	1d3b      	adds	r3, r7, #4
 80013ca:	2200      	movs	r2, #0
 80013cc:	701a      	strb	r2, [r3, #0]
 80013ce:	e012      	b.n	80013f6 <main+0x472>
			  STOP_TIM(A);
 80013d0:	1d3b      	adds	r3, r7, #4
 80013d2:	781a      	ldrb	r2, [r3, #0]
 80013d4:	4b33      	ldr	r3, [pc, #204]	@ (80014a4 <main+0x520>)
 80013d6:	0092      	lsls	r2, r2, #2
 80013d8:	58d3      	ldr	r3, [r2, r3]
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	1d3b      	adds	r3, r7, #4
 80013de:	7819      	ldrb	r1, [r3, #0]
 80013e0:	4b30      	ldr	r3, [pc, #192]	@ (80014a4 <main+0x520>)
 80013e2:	0089      	lsls	r1, r1, #2
 80013e4:	58cb      	ldr	r3, [r1, r3]
 80013e6:	2101      	movs	r1, #1
 80013e8:	438a      	bics	r2, r1
 80013ea:	601a      	str	r2, [r3, #0]
		  for( Axis A = X; A < END; A++)
 80013ec:	1d3b      	adds	r3, r7, #4
 80013ee:	781a      	ldrb	r2, [r3, #0]
 80013f0:	1d3b      	adds	r3, r7, #4
 80013f2:	3201      	adds	r2, #1
 80013f4:	701a      	strb	r2, [r3, #0]
 80013f6:	1d3b      	adds	r3, r7, #4
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d9e8      	bls.n	80013d0 <main+0x44c>

		  // Reset all timer variables
		  for( Axis A = X; A < END; A++)
 80013fe:	1cfb      	adds	r3, r7, #3
 8001400:	2200      	movs	r2, #0
 8001402:	701a      	strb	r2, [r3, #0]
 8001404:	e030      	b.n	8001468 <main+0x4e4>
		  {
			  RST_TIM(A);
 8001406:	1cfb      	adds	r3, r7, #3
 8001408:	781a      	ldrb	r2, [r3, #0]
 800140a:	4b26      	ldr	r3, [pc, #152]	@ (80014a4 <main+0x520>)
 800140c:	0092      	lsls	r2, r2, #2
 800140e:	58d3      	ldr	r3, [r2, r3]
 8001410:	2200      	movs	r2, #0
 8001412:	625a      	str	r2, [r3, #36]	@ 0x24
			  AccVal[A] = ACC_START;
 8001414:	1cfb      	adds	r3, r7, #3
 8001416:	781a      	ldrb	r2, [r3, #0]
 8001418:	4b23      	ldr	r3, [pc, #140]	@ (80014a8 <main+0x524>)
 800141a:	0052      	lsls	r2, r2, #1
 800141c:	2100      	movs	r1, #0
 800141e:	52d1      	strh	r1, [r2, r3]
			  LIM_TIM(A) = GET_DELAY(A);
 8001420:	1cfb      	adds	r3, r7, #3
 8001422:	781a      	ldrb	r2, [r3, #0]
 8001424:	4b20      	ldr	r3, [pc, #128]	@ (80014a8 <main+0x524>)
 8001426:	0052      	lsls	r2, r2, #1
 8001428:	5ad3      	ldrh	r3, [r2, r3]
 800142a:	001a      	movs	r2, r3
 800142c:	2396      	movs	r3, #150	@ 0x96
 800142e:	1a9a      	subs	r2, r3, r2
 8001430:	0013      	movs	r3, r2
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	189b      	adds	r3, r3, r2
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	4a1c      	ldr	r2, [pc, #112]	@ (80014ac <main+0x528>)
 800143a:	1899      	adds	r1, r3, r2
 800143c:	1cfb      	adds	r3, r7, #3
 800143e:	781a      	ldrb	r2, [r3, #0]
 8001440:	4b18      	ldr	r3, [pc, #96]	@ (80014a4 <main+0x520>)
 8001442:	0092      	lsls	r2, r2, #2
 8001444:	58d3      	ldr	r3, [r2, r3]
 8001446:	000a      	movs	r2, r1
 8001448:	62da      	str	r2, [r3, #44]	@ 0x2c
			  ReqPos[A] = CurPos[A];
 800144a:	1cfb      	adds	r3, r7, #3
 800144c:	7819      	ldrb	r1, [r3, #0]
 800144e:	1cfb      	adds	r3, r7, #3
 8001450:	781a      	ldrb	r2, [r3, #0]
 8001452:	4b17      	ldr	r3, [pc, #92]	@ (80014b0 <main+0x52c>)
 8001454:	0089      	lsls	r1, r1, #2
 8001456:	58c9      	ldr	r1, [r1, r3]
 8001458:	4b16      	ldr	r3, [pc, #88]	@ (80014b4 <main+0x530>)
 800145a:	0092      	lsls	r2, r2, #2
 800145c:	50d1      	str	r1, [r2, r3]
		  for( Axis A = X; A < END; A++)
 800145e:	1cfb      	adds	r3, r7, #3
 8001460:	781a      	ldrb	r2, [r3, #0]
 8001462:	1cfb      	adds	r3, r7, #3
 8001464:	3201      	adds	r2, #1
 8001466:	701a      	strb	r2, [r3, #0]
 8001468:	1cfb      	adds	r3, r7, #3
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	2b02      	cmp	r3, #2
 800146e:	d9ca      	bls.n	8001406 <main+0x482>
		  }

		  MainState = Idle;
 8001470:	4b0a      	ldr	r3, [pc, #40]	@ (800149c <main+0x518>)
 8001472:	2202      	movs	r2, #2
 8001474:	701a      	strb	r2, [r3, #0]

		  // Blocking delay to hold completely idle during any button bouncing
		  HAL_Delay(100);
 8001476:	2064      	movs	r0, #100	@ 0x64
 8001478:	f001 fce0 	bl	8002e3c <HAL_Delay>

		  // Wait for another button press
		  while(GPIORead(B1_GPIO_Port,  B1_Pin));
 800147c:	46c0      	nop			@ (mov r8, r8)
 800147e:	2380      	movs	r3, #128	@ 0x80
 8001480:	019b      	lsls	r3, r3, #6
 8001482:	4a07      	ldr	r2, [pc, #28]	@ (80014a0 <main+0x51c>)
 8001484:	0019      	movs	r1, r3
 8001486:	0010      	movs	r0, r2
 8001488:	f000 fb3d 	bl	8001b06 <GPIORead>
 800148c:	1e03      	subs	r3, r0, #0
 800148e:	d1f6      	bne.n	800147e <main+0x4fa>
	  switch(MainState)
 8001490:	e648      	b.n	8001124 <main+0x1a0>
 8001492:	46c0      	nop			@ (mov r8, r8)
 8001494:	08006250 	.word	0x08006250
 8001498:	200002e7 	.word	0x200002e7
 800149c:	200002e6 	.word	0x200002e6
 80014a0:	48000800 	.word	0x48000800
 80014a4:	20000000 	.word	0x20000000
 80014a8:	200002e0 	.word	0x200002e0
 80014ac:	000005dc 	.word	0x000005dc
 80014b0:	200002b8 	.word	0x200002b8
 80014b4:	200002c4 	.word	0x200002c4

080014b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014b8:	b590      	push	{r4, r7, lr}
 80014ba:	b091      	sub	sp, #68	@ 0x44
 80014bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014be:	2410      	movs	r4, #16
 80014c0:	193b      	adds	r3, r7, r4
 80014c2:	0018      	movs	r0, r3
 80014c4:	2330      	movs	r3, #48	@ 0x30
 80014c6:	001a      	movs	r2, r3
 80014c8:	2100      	movs	r1, #0
 80014ca:	f004 fe4b 	bl	8006164 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014ce:	003b      	movs	r3, r7
 80014d0:	0018      	movs	r0, r3
 80014d2:	2310      	movs	r3, #16
 80014d4:	001a      	movs	r2, r3
 80014d6:	2100      	movs	r1, #0
 80014d8:	f004 fe44 	bl	8006164 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 80014dc:	0021      	movs	r1, r4
 80014de:	187b      	adds	r3, r7, r1
 80014e0:	2212      	movs	r2, #18
 80014e2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014e4:	187b      	adds	r3, r7, r1
 80014e6:	2201      	movs	r2, #1
 80014e8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80014ea:	187b      	adds	r3, r7, r1
 80014ec:	2201      	movs	r2, #1
 80014ee:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014f0:	187b      	adds	r3, r7, r1
 80014f2:	2210      	movs	r2, #16
 80014f4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80014f6:	187b      	adds	r3, r7, r1
 80014f8:	2210      	movs	r2, #16
 80014fa:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014fc:	187b      	adds	r3, r7, r1
 80014fe:	2202      	movs	r2, #2
 8001500:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001502:	187b      	adds	r3, r7, r1
 8001504:	2200      	movs	r2, #0
 8001506:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001508:	187b      	adds	r3, r7, r1
 800150a:	22a0      	movs	r2, #160	@ 0xa0
 800150c:	0392      	lsls	r2, r2, #14
 800150e:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001510:	187b      	adds	r3, r7, r1
 8001512:	2200      	movs	r2, #0
 8001514:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001516:	187b      	adds	r3, r7, r1
 8001518:	0018      	movs	r0, r3
 800151a:	f002 fcd5 	bl	8003ec8 <HAL_RCC_OscConfig>
 800151e:	1e03      	subs	r3, r0, #0
 8001520:	d001      	beq.n	8001526 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001522:	f001 f9f9 	bl	8002918 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001526:	003b      	movs	r3, r7
 8001528:	2207      	movs	r2, #7
 800152a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800152c:	003b      	movs	r3, r7
 800152e:	2202      	movs	r2, #2
 8001530:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001532:	003b      	movs	r3, r7
 8001534:	2200      	movs	r2, #0
 8001536:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001538:	003b      	movs	r3, r7
 800153a:	2200      	movs	r2, #0
 800153c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800153e:	003b      	movs	r3, r7
 8001540:	2101      	movs	r1, #1
 8001542:	0018      	movs	r0, r3
 8001544:	f002 ffda 	bl	80044fc <HAL_RCC_ClockConfig>
 8001548:	1e03      	subs	r3, r0, #0
 800154a:	d001      	beq.n	8001550 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800154c:	f001 f9e4 	bl	8002918 <Error_Handler>
  }
}
 8001550:	46c0      	nop			@ (mov r8, r8)
 8001552:	46bd      	mov	sp, r7
 8001554:	b011      	add	sp, #68	@ 0x44
 8001556:	bd90      	pop	{r4, r7, pc}

08001558 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800155e:	1d3b      	adds	r3, r7, #4
 8001560:	0018      	movs	r0, r3
 8001562:	230c      	movs	r3, #12
 8001564:	001a      	movs	r2, r3
 8001566:	2100      	movs	r1, #0
 8001568:	f004 fdfc 	bl	8006164 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800156c:	4b4c      	ldr	r3, [pc, #304]	@ (80016a0 <MX_ADC_Init+0x148>)
 800156e:	4a4d      	ldr	r2, [pc, #308]	@ (80016a4 <MX_ADC_Init+0x14c>)
 8001570:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001572:	4b4b      	ldr	r3, [pc, #300]	@ (80016a0 <MX_ADC_Init+0x148>)
 8001574:	2200      	movs	r2, #0
 8001576:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001578:	4b49      	ldr	r3, [pc, #292]	@ (80016a0 <MX_ADC_Init+0x148>)
 800157a:	2200      	movs	r2, #0
 800157c:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800157e:	4b48      	ldr	r3, [pc, #288]	@ (80016a0 <MX_ADC_Init+0x148>)
 8001580:	2200      	movs	r2, #0
 8001582:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001584:	4b46      	ldr	r3, [pc, #280]	@ (80016a0 <MX_ADC_Init+0x148>)
 8001586:	2201      	movs	r2, #1
 8001588:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800158a:	4b45      	ldr	r3, [pc, #276]	@ (80016a0 <MX_ADC_Init+0x148>)
 800158c:	2204      	movs	r2, #4
 800158e:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001590:	4b43      	ldr	r3, [pc, #268]	@ (80016a0 <MX_ADC_Init+0x148>)
 8001592:	2200      	movs	r2, #0
 8001594:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001596:	4b42      	ldr	r3, [pc, #264]	@ (80016a0 <MX_ADC_Init+0x148>)
 8001598:	2200      	movs	r2, #0
 800159a:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 800159c:	4b40      	ldr	r3, [pc, #256]	@ (80016a0 <MX_ADC_Init+0x148>)
 800159e:	2201      	movs	r2, #1
 80015a0:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80015a2:	4b3f      	ldr	r3, [pc, #252]	@ (80016a0 <MX_ADC_Init+0x148>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015a8:	4b3d      	ldr	r3, [pc, #244]	@ (80016a0 <MX_ADC_Init+0x148>)
 80015aa:	22c2      	movs	r2, #194	@ 0xc2
 80015ac:	32ff      	adds	r2, #255	@ 0xff
 80015ae:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015b0:	4b3b      	ldr	r3, [pc, #236]	@ (80016a0 <MX_ADC_Init+0x148>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 80015b6:	4b3a      	ldr	r3, [pc, #232]	@ (80016a0 <MX_ADC_Init+0x148>)
 80015b8:	2224      	movs	r2, #36	@ 0x24
 80015ba:	2101      	movs	r1, #1
 80015bc:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80015be:	4b38      	ldr	r3, [pc, #224]	@ (80016a0 <MX_ADC_Init+0x148>)
 80015c0:	2201      	movs	r2, #1
 80015c2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80015c4:	4b36      	ldr	r3, [pc, #216]	@ (80016a0 <MX_ADC_Init+0x148>)
 80015c6:	0018      	movs	r0, r3
 80015c8:	f001 fc5c 	bl	8002e84 <HAL_ADC_Init>
 80015cc:	1e03      	subs	r3, r0, #0
 80015ce:	d001      	beq.n	80015d4 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80015d0:	f001 f9a2 	bl	8002918 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80015d4:	1d3b      	adds	r3, r7, #4
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80015da:	1d3b      	adds	r3, r7, #4
 80015dc:	2280      	movs	r2, #128	@ 0x80
 80015de:	0152      	lsls	r2, r2, #5
 80015e0:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80015e2:	1d3b      	adds	r3, r7, #4
 80015e4:	2207      	movs	r2, #7
 80015e6:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80015e8:	1d3a      	adds	r2, r7, #4
 80015ea:	4b2d      	ldr	r3, [pc, #180]	@ (80016a0 <MX_ADC_Init+0x148>)
 80015ec:	0011      	movs	r1, r2
 80015ee:	0018      	movs	r0, r3
 80015f0:	f001 fe22 	bl	8003238 <HAL_ADC_ConfigChannel>
 80015f4:	1e03      	subs	r3, r0, #0
 80015f6:	d001      	beq.n	80015fc <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 80015f8:	f001 f98e 	bl	8002918 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80015fc:	1d3b      	adds	r3, r7, #4
 80015fe:	2201      	movs	r2, #1
 8001600:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001602:	1d3a      	adds	r2, r7, #4
 8001604:	4b26      	ldr	r3, [pc, #152]	@ (80016a0 <MX_ADC_Init+0x148>)
 8001606:	0011      	movs	r1, r2
 8001608:	0018      	movs	r0, r3
 800160a:	f001 fe15 	bl	8003238 <HAL_ADC_ConfigChannel>
 800160e:	1e03      	subs	r3, r0, #0
 8001610:	d001      	beq.n	8001616 <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 8001612:	f001 f981 	bl	8002918 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001616:	1d3b      	adds	r3, r7, #4
 8001618:	2204      	movs	r2, #4
 800161a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800161c:	1d3a      	adds	r2, r7, #4
 800161e:	4b20      	ldr	r3, [pc, #128]	@ (80016a0 <MX_ADC_Init+0x148>)
 8001620:	0011      	movs	r1, r2
 8001622:	0018      	movs	r0, r3
 8001624:	f001 fe08 	bl	8003238 <HAL_ADC_ConfigChannel>
 8001628:	1e03      	subs	r3, r0, #0
 800162a:	d001      	beq.n	8001630 <MX_ADC_Init+0xd8>
  {
    Error_Handler();
 800162c:	f001 f974 	bl	8002918 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001630:	1d3b      	adds	r3, r7, #4
 8001632:	2208      	movs	r2, #8
 8001634:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001636:	1d3a      	adds	r2, r7, #4
 8001638:	4b19      	ldr	r3, [pc, #100]	@ (80016a0 <MX_ADC_Init+0x148>)
 800163a:	0011      	movs	r1, r2
 800163c:	0018      	movs	r0, r3
 800163e:	f001 fdfb 	bl	8003238 <HAL_ADC_ConfigChannel>
 8001642:	1e03      	subs	r3, r0, #0
 8001644:	d001      	beq.n	800164a <MX_ADC_Init+0xf2>
  {
    Error_Handler();
 8001646:	f001 f967 	bl	8002918 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800164a:	1d3b      	adds	r3, r7, #4
 800164c:	220a      	movs	r2, #10
 800164e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001650:	1d3a      	adds	r2, r7, #4
 8001652:	4b13      	ldr	r3, [pc, #76]	@ (80016a0 <MX_ADC_Init+0x148>)
 8001654:	0011      	movs	r1, r2
 8001656:	0018      	movs	r0, r3
 8001658:	f001 fdee 	bl	8003238 <HAL_ADC_ConfigChannel>
 800165c:	1e03      	subs	r3, r0, #0
 800165e:	d001      	beq.n	8001664 <MX_ADC_Init+0x10c>
  {
    Error_Handler();
 8001660:	f001 f95a 	bl	8002918 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001664:	1d3b      	adds	r3, r7, #4
 8001666:	220b      	movs	r2, #11
 8001668:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800166a:	1d3a      	adds	r2, r7, #4
 800166c:	4b0c      	ldr	r3, [pc, #48]	@ (80016a0 <MX_ADC_Init+0x148>)
 800166e:	0011      	movs	r1, r2
 8001670:	0018      	movs	r0, r3
 8001672:	f001 fde1 	bl	8003238 <HAL_ADC_ConfigChannel>
 8001676:	1e03      	subs	r3, r0, #0
 8001678:	d001      	beq.n	800167e <MX_ADC_Init+0x126>
  {
    Error_Handler();
 800167a:	f001 f94d 	bl	8002918 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800167e:	1d3b      	adds	r3, r7, #4
 8001680:	220d      	movs	r2, #13
 8001682:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001684:	1d3a      	adds	r2, r7, #4
 8001686:	4b06      	ldr	r3, [pc, #24]	@ (80016a0 <MX_ADC_Init+0x148>)
 8001688:	0011      	movs	r1, r2
 800168a:	0018      	movs	r0, r3
 800168c:	f001 fdd4 	bl	8003238 <HAL_ADC_ConfigChannel>
 8001690:	1e03      	subs	r3, r0, #0
 8001692:	d001      	beq.n	8001698 <MX_ADC_Init+0x140>
  {
    Error_Handler();
 8001694:	f001 f940 	bl	8002918 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001698:	46c0      	nop			@ (mov r8, r8)
 800169a:	46bd      	mov	sp, r7
 800169c:	b004      	add	sp, #16
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	2000008c 	.word	0x2000008c
 80016a4:	40012400 	.word	0x40012400

080016a8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80016ac:	4b19      	ldr	r3, [pc, #100]	@ (8001714 <MX_SPI1_Init+0x6c>)
 80016ae:	4a1a      	ldr	r2, [pc, #104]	@ (8001718 <MX_SPI1_Init+0x70>)
 80016b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80016b2:	4b18      	ldr	r3, [pc, #96]	@ (8001714 <MX_SPI1_Init+0x6c>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80016b8:	4b16      	ldr	r3, [pc, #88]	@ (8001714 <MX_SPI1_Init+0x6c>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80016be:	4b15      	ldr	r3, [pc, #84]	@ (8001714 <MX_SPI1_Init+0x6c>)
 80016c0:	22e0      	movs	r2, #224	@ 0xe0
 80016c2:	00d2      	lsls	r2, r2, #3
 80016c4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016c6:	4b13      	ldr	r3, [pc, #76]	@ (8001714 <MX_SPI1_Init+0x6c>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016cc:	4b11      	ldr	r3, [pc, #68]	@ (8001714 <MX_SPI1_Init+0x6c>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016d2:	4b10      	ldr	r3, [pc, #64]	@ (8001714 <MX_SPI1_Init+0x6c>)
 80016d4:	2280      	movs	r2, #128	@ 0x80
 80016d6:	0092      	lsls	r2, r2, #2
 80016d8:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016da:	4b0e      	ldr	r3, [pc, #56]	@ (8001714 <MX_SPI1_Init+0x6c>)
 80016dc:	2200      	movs	r2, #0
 80016de:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001714 <MX_SPI1_Init+0x6c>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001714 <MX_SPI1_Init+0x6c>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80016ec:	4b09      	ldr	r3, [pc, #36]	@ (8001714 <MX_SPI1_Init+0x6c>)
 80016ee:	2207      	movs	r2, #7
 80016f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80016f2:	4b08      	ldr	r3, [pc, #32]	@ (8001714 <MX_SPI1_Init+0x6c>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80016f8:	4b06      	ldr	r3, [pc, #24]	@ (8001714 <MX_SPI1_Init+0x6c>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016fe:	4b05      	ldr	r3, [pc, #20]	@ (8001714 <MX_SPI1_Init+0x6c>)
 8001700:	0018      	movs	r0, r3
 8001702:	f003 f81f 	bl	8004744 <HAL_SPI_Init>
 8001706:	1e03      	subs	r3, r0, #0
 8001708:	d001      	beq.n	800170e <MX_SPI1_Init+0x66>
  {
    Error_Handler();
 800170a:	f001 f905 	bl	8002918 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800170e:	46c0      	nop			@ (mov r8, r8)
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	20000110 	.word	0x20000110
 8001718:	40013000 	.word	0x40013000

0800171c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b08c      	sub	sp, #48	@ 0x30
 8001720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001722:	2320      	movs	r3, #32
 8001724:	18fb      	adds	r3, r7, r3
 8001726:	0018      	movs	r0, r3
 8001728:	2310      	movs	r3, #16
 800172a:	001a      	movs	r2, r3
 800172c:	2100      	movs	r1, #0
 800172e:	f004 fd19 	bl	8006164 <memset>
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001732:	230c      	movs	r3, #12
 8001734:	18fb      	adds	r3, r7, r3
 8001736:	0018      	movs	r0, r3
 8001738:	2314      	movs	r3, #20
 800173a:	001a      	movs	r2, r3
 800173c:	2100      	movs	r1, #0
 800173e:	f004 fd11 	bl	8006164 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001742:	1d3b      	adds	r3, r7, #4
 8001744:	0018      	movs	r0, r3
 8001746:	2308      	movs	r3, #8
 8001748:	001a      	movs	r2, r3
 800174a:	2100      	movs	r1, #0
 800174c:	f004 fd0a 	bl	8006164 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001750:	4b28      	ldr	r3, [pc, #160]	@ (80017f4 <MX_TIM1_Init+0xd8>)
 8001752:	4a29      	ldr	r2, [pc, #164]	@ (80017f8 <MX_TIM1_Init+0xdc>)
 8001754:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001756:	4b27      	ldr	r3, [pc, #156]	@ (80017f4 <MX_TIM1_Init+0xd8>)
 8001758:	2200      	movs	r2, #0
 800175a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800175c:	4b25      	ldr	r3, [pc, #148]	@ (80017f4 <MX_TIM1_Init+0xd8>)
 800175e:	2200      	movs	r2, #0
 8001760:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001762:	4b24      	ldr	r3, [pc, #144]	@ (80017f4 <MX_TIM1_Init+0xd8>)
 8001764:	4a25      	ldr	r2, [pc, #148]	@ (80017fc <MX_TIM1_Init+0xe0>)
 8001766:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001768:	4b22      	ldr	r3, [pc, #136]	@ (80017f4 <MX_TIM1_Init+0xd8>)
 800176a:	2200      	movs	r2, #0
 800176c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800176e:	4b21      	ldr	r3, [pc, #132]	@ (80017f4 <MX_TIM1_Init+0xd8>)
 8001770:	2200      	movs	r2, #0
 8001772:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001774:	4b1f      	ldr	r3, [pc, #124]	@ (80017f4 <MX_TIM1_Init+0xd8>)
 8001776:	2200      	movs	r2, #0
 8001778:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800177a:	4b1e      	ldr	r3, [pc, #120]	@ (80017f4 <MX_TIM1_Init+0xd8>)
 800177c:	0018      	movs	r0, r3
 800177e:	f004 f814 	bl	80057aa <HAL_TIM_Base_Init>
 8001782:	1e03      	subs	r3, r0, #0
 8001784:	d001      	beq.n	800178a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001786:	f001 f8c7 	bl	8002918 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800178a:	2120      	movs	r1, #32
 800178c:	187b      	adds	r3, r7, r1
 800178e:	2280      	movs	r2, #128	@ 0x80
 8001790:	0152      	lsls	r2, r2, #5
 8001792:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001794:	187a      	adds	r2, r7, r1
 8001796:	4b17      	ldr	r3, [pc, #92]	@ (80017f4 <MX_TIM1_Init+0xd8>)
 8001798:	0011      	movs	r1, r2
 800179a:	0018      	movs	r0, r3
 800179c:	f004 f990 	bl	8005ac0 <HAL_TIM_ConfigClockSource>
 80017a0:	1e03      	subs	r3, r0, #0
 80017a2:	d001      	beq.n	80017a8 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 80017a4:	f001 f8b8 	bl	8002918 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 80017a8:	210c      	movs	r1, #12
 80017aa:	187b      	adds	r3, r7, r1
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 80017b0:	187b      	adds	r3, r7, r1
 80017b2:	2230      	movs	r2, #48	@ 0x30
 80017b4:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80017b6:	187a      	adds	r2, r7, r1
 80017b8:	4b0e      	ldr	r3, [pc, #56]	@ (80017f4 <MX_TIM1_Init+0xd8>)
 80017ba:	0011      	movs	r1, r2
 80017bc:	0018      	movs	r0, r3
 80017be:	f004 fa53 	bl	8005c68 <HAL_TIM_SlaveConfigSynchro>
 80017c2:	1e03      	subs	r3, r0, #0
 80017c4:	d001      	beq.n	80017ca <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 80017c6:	f001 f8a7 	bl	8002918 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017ca:	1d3b      	adds	r3, r7, #4
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017d0:	1d3b      	adds	r3, r7, #4
 80017d2:	2200      	movs	r2, #0
 80017d4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80017d6:	1d3a      	adds	r2, r7, #4
 80017d8:	4b06      	ldr	r3, [pc, #24]	@ (80017f4 <MX_TIM1_Init+0xd8>)
 80017da:	0011      	movs	r1, r2
 80017dc:	0018      	movs	r0, r3
 80017de:	f004 fc59 	bl	8006094 <HAL_TIMEx_MasterConfigSynchronization>
 80017e2:	1e03      	subs	r3, r0, #0
 80017e4:	d001      	beq.n	80017ea <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 80017e6:	f001 f897 	bl	8002918 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80017ea:	46c0      	nop			@ (mov r8, r8)
 80017ec:	46bd      	mov	sp, r7
 80017ee:	b00c      	add	sp, #48	@ 0x30
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	46c0      	nop			@ (mov r8, r8)
 80017f4:	20000174 	.word	0x20000174
 80017f8:	40012c00 	.word	0x40012c00
 80017fc:	0000ffff 	.word	0x0000ffff

08001800 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001804:	4b0e      	ldr	r3, [pc, #56]	@ (8001840 <MX_TIM14_Init+0x40>)
 8001806:	4a0f      	ldr	r2, [pc, #60]	@ (8001844 <MX_TIM14_Init+0x44>)
 8001808:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 800180a:	4b0d      	ldr	r3, [pc, #52]	@ (8001840 <MX_TIM14_Init+0x40>)
 800180c:	2200      	movs	r2, #0
 800180e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001810:	4b0b      	ldr	r3, [pc, #44]	@ (8001840 <MX_TIM14_Init+0x40>)
 8001812:	2200      	movs	r2, #0
 8001814:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 4800;
 8001816:	4b0a      	ldr	r3, [pc, #40]	@ (8001840 <MX_TIM14_Init+0x40>)
 8001818:	2296      	movs	r2, #150	@ 0x96
 800181a:	0152      	lsls	r2, r2, #5
 800181c:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800181e:	4b08      	ldr	r3, [pc, #32]	@ (8001840 <MX_TIM14_Init+0x40>)
 8001820:	2200      	movs	r2, #0
 8001822:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001824:	4b06      	ldr	r3, [pc, #24]	@ (8001840 <MX_TIM14_Init+0x40>)
 8001826:	2200      	movs	r2, #0
 8001828:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800182a:	4b05      	ldr	r3, [pc, #20]	@ (8001840 <MX_TIM14_Init+0x40>)
 800182c:	0018      	movs	r0, r3
 800182e:	f003 ffbc 	bl	80057aa <HAL_TIM_Base_Init>
 8001832:	1e03      	subs	r3, r0, #0
 8001834:	d001      	beq.n	800183a <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8001836:	f001 f86f 	bl	8002918 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800183a:	46c0      	nop			@ (mov r8, r8)
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	200001bc 	.word	0x200001bc
 8001844:	40002000 	.word	0x40002000

08001848 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800184c:	4b10      	ldr	r3, [pc, #64]	@ (8001890 <MX_TIM16_Init+0x48>)
 800184e:	4a11      	ldr	r2, [pc, #68]	@ (8001894 <MX_TIM16_Init+0x4c>)
 8001850:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8001852:	4b0f      	ldr	r3, [pc, #60]	@ (8001890 <MX_TIM16_Init+0x48>)
 8001854:	2200      	movs	r2, #0
 8001856:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001858:	4b0d      	ldr	r3, [pc, #52]	@ (8001890 <MX_TIM16_Init+0x48>)
 800185a:	2200      	movs	r2, #0
 800185c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 4800;
 800185e:	4b0c      	ldr	r3, [pc, #48]	@ (8001890 <MX_TIM16_Init+0x48>)
 8001860:	2296      	movs	r2, #150	@ 0x96
 8001862:	0152      	lsls	r2, r2, #5
 8001864:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001866:	4b0a      	ldr	r3, [pc, #40]	@ (8001890 <MX_TIM16_Init+0x48>)
 8001868:	2200      	movs	r2, #0
 800186a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800186c:	4b08      	ldr	r3, [pc, #32]	@ (8001890 <MX_TIM16_Init+0x48>)
 800186e:	2200      	movs	r2, #0
 8001870:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001872:	4b07      	ldr	r3, [pc, #28]	@ (8001890 <MX_TIM16_Init+0x48>)
 8001874:	2200      	movs	r2, #0
 8001876:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001878:	4b05      	ldr	r3, [pc, #20]	@ (8001890 <MX_TIM16_Init+0x48>)
 800187a:	0018      	movs	r0, r3
 800187c:	f003 ff95 	bl	80057aa <HAL_TIM_Base_Init>
 8001880:	1e03      	subs	r3, r0, #0
 8001882:	d001      	beq.n	8001888 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001884:	f001 f848 	bl	8002918 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001888:	46c0      	nop			@ (mov r8, r8)
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	46c0      	nop			@ (mov r8, r8)
 8001890:	20000204 	.word	0x20000204
 8001894:	40014400 	.word	0x40014400

08001898 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800189c:	4b10      	ldr	r3, [pc, #64]	@ (80018e0 <MX_TIM17_Init+0x48>)
 800189e:	4a11      	ldr	r2, [pc, #68]	@ (80018e4 <MX_TIM17_Init+0x4c>)
 80018a0:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 80018a2:	4b0f      	ldr	r3, [pc, #60]	@ (80018e0 <MX_TIM17_Init+0x48>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018a8:	4b0d      	ldr	r3, [pc, #52]	@ (80018e0 <MX_TIM17_Init+0x48>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 4800;
 80018ae:	4b0c      	ldr	r3, [pc, #48]	@ (80018e0 <MX_TIM17_Init+0x48>)
 80018b0:	2296      	movs	r2, #150	@ 0x96
 80018b2:	0152      	lsls	r2, r2, #5
 80018b4:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018b6:	4b0a      	ldr	r3, [pc, #40]	@ (80018e0 <MX_TIM17_Init+0x48>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80018bc:	4b08      	ldr	r3, [pc, #32]	@ (80018e0 <MX_TIM17_Init+0x48>)
 80018be:	2200      	movs	r2, #0
 80018c0:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018c2:	4b07      	ldr	r3, [pc, #28]	@ (80018e0 <MX_TIM17_Init+0x48>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80018c8:	4b05      	ldr	r3, [pc, #20]	@ (80018e0 <MX_TIM17_Init+0x48>)
 80018ca:	0018      	movs	r0, r3
 80018cc:	f003 ff6d 	bl	80057aa <HAL_TIM_Base_Init>
 80018d0:	1e03      	subs	r3, r0, #0
 80018d2:	d001      	beq.n	80018d8 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 80018d4:	f001 f820 	bl	8002918 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80018d8:	46c0      	nop			@ (mov r8, r8)
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	46c0      	nop			@ (mov r8, r8)
 80018e0:	2000024c 	.word	0x2000024c
 80018e4:	40014800 	.word	0x40014800

080018e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001920 <MX_DMA_Init+0x38>)
 80018f0:	695a      	ldr	r2, [r3, #20]
 80018f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001920 <MX_DMA_Init+0x38>)
 80018f4:	2101      	movs	r1, #1
 80018f6:	430a      	orrs	r2, r1
 80018f8:	615a      	str	r2, [r3, #20]
 80018fa:	4b09      	ldr	r3, [pc, #36]	@ (8001920 <MX_DMA_Init+0x38>)
 80018fc:	695b      	ldr	r3, [r3, #20]
 80018fe:	2201      	movs	r2, #1
 8001900:	4013      	ands	r3, r2
 8001902:	607b      	str	r3, [r7, #4]
 8001904:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001906:	2200      	movs	r2, #0
 8001908:	2100      	movs	r1, #0
 800190a:	2009      	movs	r0, #9
 800190c:	f001 ff3e 	bl	800378c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001910:	2009      	movs	r0, #9
 8001912:	f001 ff50 	bl	80037b6 <HAL_NVIC_EnableIRQ>

}
 8001916:	46c0      	nop			@ (mov r8, r8)
 8001918:	46bd      	mov	sp, r7
 800191a:	b002      	add	sp, #8
 800191c:	bd80      	pop	{r7, pc}
 800191e:	46c0      	nop			@ (mov r8, r8)
 8001920:	40021000 	.word	0x40021000

08001924 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001924:	b590      	push	{r4, r7, lr}
 8001926:	b08b      	sub	sp, #44	@ 0x2c
 8001928:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800192a:	2414      	movs	r4, #20
 800192c:	193b      	adds	r3, r7, r4
 800192e:	0018      	movs	r0, r3
 8001930:	2314      	movs	r3, #20
 8001932:	001a      	movs	r2, r3
 8001934:	2100      	movs	r1, #0
 8001936:	f004 fc15 	bl	8006164 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800193a:	4b60      	ldr	r3, [pc, #384]	@ (8001abc <MX_GPIO_Init+0x198>)
 800193c:	695a      	ldr	r2, [r3, #20]
 800193e:	4b5f      	ldr	r3, [pc, #380]	@ (8001abc <MX_GPIO_Init+0x198>)
 8001940:	2180      	movs	r1, #128	@ 0x80
 8001942:	0309      	lsls	r1, r1, #12
 8001944:	430a      	orrs	r2, r1
 8001946:	615a      	str	r2, [r3, #20]
 8001948:	4b5c      	ldr	r3, [pc, #368]	@ (8001abc <MX_GPIO_Init+0x198>)
 800194a:	695a      	ldr	r2, [r3, #20]
 800194c:	2380      	movs	r3, #128	@ 0x80
 800194e:	031b      	lsls	r3, r3, #12
 8001950:	4013      	ands	r3, r2
 8001952:	613b      	str	r3, [r7, #16]
 8001954:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001956:	4b59      	ldr	r3, [pc, #356]	@ (8001abc <MX_GPIO_Init+0x198>)
 8001958:	695a      	ldr	r2, [r3, #20]
 800195a:	4b58      	ldr	r3, [pc, #352]	@ (8001abc <MX_GPIO_Init+0x198>)
 800195c:	2180      	movs	r1, #128	@ 0x80
 800195e:	03c9      	lsls	r1, r1, #15
 8001960:	430a      	orrs	r2, r1
 8001962:	615a      	str	r2, [r3, #20]
 8001964:	4b55      	ldr	r3, [pc, #340]	@ (8001abc <MX_GPIO_Init+0x198>)
 8001966:	695a      	ldr	r2, [r3, #20]
 8001968:	2380      	movs	r3, #128	@ 0x80
 800196a:	03db      	lsls	r3, r3, #15
 800196c:	4013      	ands	r3, r2
 800196e:	60fb      	str	r3, [r7, #12]
 8001970:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001972:	4b52      	ldr	r3, [pc, #328]	@ (8001abc <MX_GPIO_Init+0x198>)
 8001974:	695a      	ldr	r2, [r3, #20]
 8001976:	4b51      	ldr	r3, [pc, #324]	@ (8001abc <MX_GPIO_Init+0x198>)
 8001978:	2180      	movs	r1, #128	@ 0x80
 800197a:	0289      	lsls	r1, r1, #10
 800197c:	430a      	orrs	r2, r1
 800197e:	615a      	str	r2, [r3, #20]
 8001980:	4b4e      	ldr	r3, [pc, #312]	@ (8001abc <MX_GPIO_Init+0x198>)
 8001982:	695a      	ldr	r2, [r3, #20]
 8001984:	2380      	movs	r3, #128	@ 0x80
 8001986:	029b      	lsls	r3, r3, #10
 8001988:	4013      	ands	r3, r2
 800198a:	60bb      	str	r3, [r7, #8]
 800198c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800198e:	4b4b      	ldr	r3, [pc, #300]	@ (8001abc <MX_GPIO_Init+0x198>)
 8001990:	695a      	ldr	r2, [r3, #20]
 8001992:	4b4a      	ldr	r3, [pc, #296]	@ (8001abc <MX_GPIO_Init+0x198>)
 8001994:	2180      	movs	r1, #128	@ 0x80
 8001996:	02c9      	lsls	r1, r1, #11
 8001998:	430a      	orrs	r2, r1
 800199a:	615a      	str	r2, [r3, #20]
 800199c:	4b47      	ldr	r3, [pc, #284]	@ (8001abc <MX_GPIO_Init+0x198>)
 800199e:	695a      	ldr	r2, [r3, #20]
 80019a0:	2380      	movs	r3, #128	@ 0x80
 80019a2:	02db      	lsls	r3, r3, #11
 80019a4:	4013      	ands	r3, r2
 80019a6:	607b      	str	r3, [r7, #4]
 80019a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, pulX1_Pin|SPI_OUT_Pin|pulZ_Pin|pulY_Pin
 80019aa:	4945      	ldr	r1, [pc, #276]	@ (8001ac0 <MX_GPIO_Init+0x19c>)
 80019ac:	4b45      	ldr	r3, [pc, #276]	@ (8001ac4 <MX_GPIO_Init+0x1a0>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	0018      	movs	r0, r3
 80019b2:	f002 fa6b 	bl	8003e8c <HAL_GPIO_WritePin>
                          |dirY_Pin|GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(pulX2_GPIO_Port, pulX2_Pin, GPIO_PIN_RESET);
 80019b6:	4b44      	ldr	r3, [pc, #272]	@ (8001ac8 <MX_GPIO_Init+0x1a4>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	2180      	movs	r1, #128	@ 0x80
 80019bc:	0018      	movs	r0, r3
 80019be:	f002 fa65 	bl	8003e8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, dirX1_Pin|dirX2_Pin|dirZ_Pin, GPIO_PIN_RESET);
 80019c2:	23e0      	movs	r3, #224	@ 0xe0
 80019c4:	00d9      	lsls	r1, r3, #3
 80019c6:	2390      	movs	r3, #144	@ 0x90
 80019c8:	05db      	lsls	r3, r3, #23
 80019ca:	2200      	movs	r2, #0
 80019cc:	0018      	movs	r0, r3
 80019ce:	f002 fa5d 	bl	8003e8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80019d2:	193b      	adds	r3, r7, r4
 80019d4:	2280      	movs	r2, #128	@ 0x80
 80019d6:	0192      	lsls	r2, r2, #6
 80019d8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019da:	193b      	adds	r3, r7, r4
 80019dc:	2284      	movs	r2, #132	@ 0x84
 80019de:	0392      	lsls	r2, r2, #14
 80019e0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e2:	193b      	adds	r3, r7, r4
 80019e4:	2200      	movs	r2, #0
 80019e6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80019e8:	193b      	adds	r3, r7, r4
 80019ea:	4a37      	ldr	r2, [pc, #220]	@ (8001ac8 <MX_GPIO_Init+0x1a4>)
 80019ec:	0019      	movs	r1, r3
 80019ee:	0010      	movs	r0, r2
 80019f0:	f002 f8dc 	bl	8003bac <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80019f4:	193b      	adds	r3, r7, r4
 80019f6:	220c      	movs	r2, #12
 80019f8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fa:	193b      	adds	r3, r7, r4
 80019fc:	2202      	movs	r2, #2
 80019fe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a00:	193b      	adds	r3, r7, r4
 8001a02:	2200      	movs	r2, #0
 8001a04:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a06:	193b      	adds	r3, r7, r4
 8001a08:	2200      	movs	r2, #0
 8001a0a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001a0c:	193b      	adds	r3, r7, r4
 8001a0e:	2201      	movs	r2, #1
 8001a10:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a12:	193a      	adds	r2, r7, r4
 8001a14:	2390      	movs	r3, #144	@ 0x90
 8001a16:	05db      	lsls	r3, r3, #23
 8001a18:	0011      	movs	r1, r2
 8001a1a:	0018      	movs	r0, r3
 8001a1c:	f002 f8c6 	bl	8003bac <HAL_GPIO_Init>

  /*Configure GPIO pins : pulX1_Pin SPI_OUT_Pin pulZ_Pin pulY_Pin
                           dirY_Pin PB8 */
  GPIO_InitStruct.Pin = pulX1_Pin|SPI_OUT_Pin|pulZ_Pin|pulY_Pin
 8001a20:	193b      	adds	r3, r7, r4
 8001a22:	4a27      	ldr	r2, [pc, #156]	@ (8001ac0 <MX_GPIO_Init+0x19c>)
 8001a24:	601a      	str	r2, [r3, #0]
                          |dirY_Pin|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a26:	193b      	adds	r3, r7, r4
 8001a28:	2201      	movs	r2, #1
 8001a2a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2c:	193b      	adds	r3, r7, r4
 8001a2e:	2200      	movs	r2, #0
 8001a30:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a32:	193b      	adds	r3, r7, r4
 8001a34:	2200      	movs	r2, #0
 8001a36:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a38:	193b      	adds	r3, r7, r4
 8001a3a:	4a22      	ldr	r2, [pc, #136]	@ (8001ac4 <MX_GPIO_Init+0x1a0>)
 8001a3c:	0019      	movs	r1, r3
 8001a3e:	0010      	movs	r0, r2
 8001a40:	f002 f8b4 	bl	8003bac <HAL_GPIO_Init>

  /*Configure GPIO pin : pulX2_Pin */
  GPIO_InitStruct.Pin = pulX2_Pin;
 8001a44:	193b      	adds	r3, r7, r4
 8001a46:	2280      	movs	r2, #128	@ 0x80
 8001a48:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a4a:	193b      	adds	r3, r7, r4
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a50:	193b      	adds	r3, r7, r4
 8001a52:	2200      	movs	r2, #0
 8001a54:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a56:	193b      	adds	r3, r7, r4
 8001a58:	2200      	movs	r2, #0
 8001a5a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(pulX2_GPIO_Port, &GPIO_InitStruct);
 8001a5c:	193b      	adds	r3, r7, r4
 8001a5e:	4a1a      	ldr	r2, [pc, #104]	@ (8001ac8 <MX_GPIO_Init+0x1a4>)
 8001a60:	0019      	movs	r1, r3
 8001a62:	0010      	movs	r0, r2
 8001a64:	f002 f8a2 	bl	8003bac <HAL_GPIO_Init>

  /*Configure GPIO pins : dirX1_Pin dirX2_Pin dirZ_Pin */
  GPIO_InitStruct.Pin = dirX1_Pin|dirX2_Pin|dirZ_Pin;
 8001a68:	0021      	movs	r1, r4
 8001a6a:	187b      	adds	r3, r7, r1
 8001a6c:	22e0      	movs	r2, #224	@ 0xe0
 8001a6e:	00d2      	lsls	r2, r2, #3
 8001a70:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a72:	000c      	movs	r4, r1
 8001a74:	193b      	adds	r3, r7, r4
 8001a76:	2201      	movs	r2, #1
 8001a78:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7a:	193b      	adds	r3, r7, r4
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a80:	193b      	adds	r3, r7, r4
 8001a82:	2200      	movs	r2, #0
 8001a84:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a86:	193a      	adds	r2, r7, r4
 8001a88:	2390      	movs	r3, #144	@ 0x90
 8001a8a:	05db      	lsls	r3, r3, #23
 8001a8c:	0011      	movs	r1, r2
 8001a8e:	0018      	movs	r0, r3
 8001a90:	f002 f88c 	bl	8003bac <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_IN_Pin */
  GPIO_InitStruct.Pin = SPI_IN_Pin;
 8001a94:	193b      	adds	r3, r7, r4
 8001a96:	2240      	movs	r2, #64	@ 0x40
 8001a98:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a9a:	193b      	adds	r3, r7, r4
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa0:	193b      	adds	r3, r7, r4
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SPI_IN_GPIO_Port, &GPIO_InitStruct);
 8001aa6:	193b      	adds	r3, r7, r4
 8001aa8:	4a06      	ldr	r2, [pc, #24]	@ (8001ac4 <MX_GPIO_Init+0x1a0>)
 8001aaa:	0019      	movs	r1, r3
 8001aac:	0010      	movs	r0, r2
 8001aae:	f002 f87d 	bl	8003bac <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001ab2:	46c0      	nop			@ (mov r8, r8)
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	b00b      	add	sp, #44	@ 0x2c
 8001ab8:	bd90      	pop	{r4, r7, pc}
 8001aba:	46c0      	nop			@ (mov r8, r8)
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	00001538 	.word	0x00001538
 8001ac4:	48000400 	.word	0x48000400
 8001ac8:	48000800 	.word	0x48000800

08001acc <GPIOWrite>:
  * @param GPIO_Pin	The register bit
  * @param PinState	The value to write
  * @retval None
  */
void GPIOWrite(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	0008      	movs	r0, r1
 8001ad6:	0011      	movs	r1, r2
 8001ad8:	1cbb      	adds	r3, r7, #2
 8001ada:	1c02      	adds	r2, r0, #0
 8001adc:	801a      	strh	r2, [r3, #0]
 8001ade:	1c7b      	adds	r3, r7, #1
 8001ae0:	1c0a      	adds	r2, r1, #0
 8001ae2:	701a      	strb	r2, [r3, #0]
	  if (PinState)
 8001ae4:	1c7b      	adds	r3, r7, #1
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d004      	beq.n	8001af6 <GPIOWrite+0x2a>
	    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001aec:	1cbb      	adds	r3, r7, #2
 8001aee:	881a      	ldrh	r2, [r3, #0]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	619a      	str	r2, [r3, #24]
	  else
	    GPIOx->BRR = (uint32_t)GPIO_Pin;
}
 8001af4:	e003      	b.n	8001afe <GPIOWrite+0x32>
	    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001af6:	1cbb      	adds	r3, r7, #2
 8001af8:	881a      	ldrh	r2, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001afe:	46c0      	nop			@ (mov r8, r8)
 8001b00:	46bd      	mov	sp, r7
 8001b02:	b002      	add	sp, #8
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <GPIORead>:
  * @param GPIOx	The GPIO register
  * @param GPIO_Pin	The register bit
  * @retval The GPIO value
  */
int GPIORead(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b082      	sub	sp, #8
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
 8001b0e:	000a      	movs	r2, r1
 8001b10:	1cbb      	adds	r3, r7, #2
 8001b12:	801a      	strh	r2, [r3, #0]
	  if (GPIOx->IDR & GPIO_Pin)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	691b      	ldr	r3, [r3, #16]
 8001b18:	1cba      	adds	r2, r7, #2
 8001b1a:	8812      	ldrh	r2, [r2, #0]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	d001      	beq.n	8001b24 <GPIORead+0x1e>
		  return GPIO_PIN_SET;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e000      	b.n	8001b26 <GPIORead+0x20>
	  else
		  return GPIO_PIN_RESET;
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	0018      	movs	r0, r3
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	b002      	add	sp, #8
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <GPIOToggle>:
  * @param GPIOx	The GPIO register
  * @param GPIO_Pin	The register bit
  * @retval None
  */
void GPIOToggle(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b082      	sub	sp, #8
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
 8001b36:	000a      	movs	r2, r1
 8001b38:	1cbb      	adds	r3, r7, #2
 8001b3a:	801a      	strh	r2, [r3, #0]
	  GPIOx->BSRR = ((GPIOx->ODR & GPIO_Pin) << 16U) | (~(GPIOx->ODR) & GPIO_Pin);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	695b      	ldr	r3, [r3, #20]
 8001b40:	1cba      	adds	r2, r7, #2
 8001b42:	8812      	ldrh	r2, [r2, #0]
 8001b44:	4013      	ands	r3, r2
 8001b46:	041a      	lsls	r2, r3, #16
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	695b      	ldr	r3, [r3, #20]
 8001b4c:	43db      	mvns	r3, r3
 8001b4e:	1cb9      	adds	r1, r7, #2
 8001b50:	8809      	ldrh	r1, [r1, #0]
 8001b52:	400b      	ands	r3, r1
 8001b54:	431a      	orrs	r2, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	619a      	str	r2, [r3, #24]
}
 8001b5a:	46c0      	nop			@ (mov r8, r8)
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	b002      	add	sp, #8
 8001b60:	bd80      	pop	{r7, pc}
	...

08001b64 <Accelerate>:
  * @brief Accelerates if applicable
  * @param A	The axis to apply to
  * @retval None
  */
void Accelerate(Axis A)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	0002      	movs	r2, r0
 8001b6c:	1dfb      	adds	r3, r7, #7
 8001b6e:	701a      	strb	r2, [r3, #0]
	if(AccVal[A] >= ACC_END)
 8001b70:	1dfb      	adds	r3, r7, #7
 8001b72:	781a      	ldrb	r2, [r3, #0]
 8001b74:	4b0c      	ldr	r3, [pc, #48]	@ (8001ba8 <Accelerate+0x44>)
 8001b76:	0052      	lsls	r2, r2, #1
 8001b78:	5ad3      	ldrh	r3, [r2, r3]
 8001b7a:	2b95      	cmp	r3, #149	@ 0x95
 8001b7c:	d906      	bls.n	8001b8c <Accelerate+0x28>
		AccVal[A] = ACC_END;
 8001b7e:	1dfb      	adds	r3, r7, #7
 8001b80:	781a      	ldrb	r2, [r3, #0]
 8001b82:	4b09      	ldr	r3, [pc, #36]	@ (8001ba8 <Accelerate+0x44>)
 8001b84:	0052      	lsls	r2, r2, #1
 8001b86:	2196      	movs	r1, #150	@ 0x96
 8001b88:	52d1      	strh	r1, [r2, r3]
	else
		AccVal[A]++;

	return;
 8001b8a:	e00a      	b.n	8001ba2 <Accelerate+0x3e>
		AccVal[A]++;
 8001b8c:	1dfb      	adds	r3, r7, #7
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	4a05      	ldr	r2, [pc, #20]	@ (8001ba8 <Accelerate+0x44>)
 8001b92:	0059      	lsls	r1, r3, #1
 8001b94:	5a8a      	ldrh	r2, [r1, r2]
 8001b96:	3201      	adds	r2, #1
 8001b98:	b291      	uxth	r1, r2
 8001b9a:	4a03      	ldr	r2, [pc, #12]	@ (8001ba8 <Accelerate+0x44>)
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	5299      	strh	r1, [r3, r2]
	return;
 8001ba0:	46c0      	nop			@ (mov r8, r8)
}
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	b002      	add	sp, #8
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	200002e0 	.word	0x200002e0

08001bac <Deccelerate>:
  * @brief Deccelerates if applicable
  * @param A	The axis to apply to
  * @retval None
  */
void Deccelerate(Axis A)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	0002      	movs	r2, r0
 8001bb4:	1dfb      	adds	r3, r7, #7
 8001bb6:	701a      	strb	r2, [r3, #0]
	if(AccVal[A] <= ACC_START)
 8001bb8:	1dfb      	adds	r3, r7, #7
 8001bba:	781a      	ldrb	r2, [r3, #0]
 8001bbc:	4b0c      	ldr	r3, [pc, #48]	@ (8001bf0 <Deccelerate+0x44>)
 8001bbe:	0052      	lsls	r2, r2, #1
 8001bc0:	5ad3      	ldrh	r3, [r2, r3]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d106      	bne.n	8001bd4 <Deccelerate+0x28>
		AccVal[A] = ACC_START;
 8001bc6:	1dfb      	adds	r3, r7, #7
 8001bc8:	781a      	ldrb	r2, [r3, #0]
 8001bca:	4b09      	ldr	r3, [pc, #36]	@ (8001bf0 <Deccelerate+0x44>)
 8001bcc:	0052      	lsls	r2, r2, #1
 8001bce:	2100      	movs	r1, #0
 8001bd0:	52d1      	strh	r1, [r2, r3]
	else
		AccVal[A]--;

	return;
 8001bd2:	e00a      	b.n	8001bea <Deccelerate+0x3e>
		AccVal[A]--;
 8001bd4:	1dfb      	adds	r3, r7, #7
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	4a05      	ldr	r2, [pc, #20]	@ (8001bf0 <Deccelerate+0x44>)
 8001bda:	0059      	lsls	r1, r3, #1
 8001bdc:	5a8a      	ldrh	r2, [r1, r2]
 8001bde:	3a01      	subs	r2, #1
 8001be0:	b291      	uxth	r1, r2
 8001be2:	4a03      	ldr	r2, [pc, #12]	@ (8001bf0 <Deccelerate+0x44>)
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	5299      	strh	r1, [r3, r2]
	return;
 8001be8:	46c0      	nop			@ (mov r8, r8)
}
 8001bea:	46bd      	mov	sp, r7
 8001bec:	b002      	add	sp, #8
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	200002e0 	.word	0x200002e0

08001bf4 <SetDirection>:
  * @brief Sets the direction of the motors
  * @param A	The axis to apply to
  * @retval None
  */
void SetDirection(Axis A)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	0002      	movs	r2, r0
 8001bfc:	1dfb      	adds	r3, r7, #7
 8001bfe:	701a      	strb	r2, [r3, #0]
	switch(A)
 8001c00:	1dfb      	adds	r3, r7, #7
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d03d      	beq.n	8001c84 <SetDirection+0x90>
 8001c08:	dc52      	bgt.n	8001cb0 <SetDirection+0xbc>
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d002      	beq.n	8001c14 <SetDirection+0x20>
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d026      	beq.n	8001c60 <SetDirection+0x6c>
			else
				GPIOWrite(dirZ_GPIO_Port,  dirZ_Pin,  DIR_Z(Pos));
			break;

		default:
			break;
 8001c12:	e04d      	b.n	8001cb0 <SetDirection+0xbc>
			if(Dir[X])
 8001c14:	4b29      	ldr	r3, [pc, #164]	@ (8001cbc <SetDirection+0xc8>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d010      	beq.n	8001c3e <SetDirection+0x4a>
				GPIOWrite(dirX1_GPIO_Port, dirX1_Pin, Neg);
 8001c1c:	2380      	movs	r3, #128	@ 0x80
 8001c1e:	0059      	lsls	r1, r3, #1
 8001c20:	2390      	movs	r3, #144	@ 0x90
 8001c22:	05db      	lsls	r3, r3, #23
 8001c24:	2201      	movs	r2, #1
 8001c26:	0018      	movs	r0, r3
 8001c28:	f7ff ff50 	bl	8001acc <GPIOWrite>
				GPIOWrite(dirX2_GPIO_Port, dirX2_Pin, DIR_X2(Neg));
 8001c2c:	2380      	movs	r3, #128	@ 0x80
 8001c2e:	0099      	lsls	r1, r3, #2
 8001c30:	2390      	movs	r3, #144	@ 0x90
 8001c32:	05db      	lsls	r3, r3, #23
 8001c34:	2200      	movs	r2, #0
 8001c36:	0018      	movs	r0, r3
 8001c38:	f7ff ff48 	bl	8001acc <GPIOWrite>
			break;
 8001c3c:	e039      	b.n	8001cb2 <SetDirection+0xbe>
				GPIOWrite(dirX1_GPIO_Port, dirX1_Pin, Pos);
 8001c3e:	2380      	movs	r3, #128	@ 0x80
 8001c40:	0059      	lsls	r1, r3, #1
 8001c42:	2390      	movs	r3, #144	@ 0x90
 8001c44:	05db      	lsls	r3, r3, #23
 8001c46:	2200      	movs	r2, #0
 8001c48:	0018      	movs	r0, r3
 8001c4a:	f7ff ff3f 	bl	8001acc <GPIOWrite>
				GPIOWrite(dirX2_GPIO_Port, dirX2_Pin, DIR_X2(Pos));
 8001c4e:	2380      	movs	r3, #128	@ 0x80
 8001c50:	0099      	lsls	r1, r3, #2
 8001c52:	2390      	movs	r3, #144	@ 0x90
 8001c54:	05db      	lsls	r3, r3, #23
 8001c56:	2201      	movs	r2, #1
 8001c58:	0018      	movs	r0, r3
 8001c5a:	f7ff ff37 	bl	8001acc <GPIOWrite>
			break;
 8001c5e:	e028      	b.n	8001cb2 <SetDirection+0xbe>
			if(Dir[Y])
 8001c60:	4b16      	ldr	r3, [pc, #88]	@ (8001cbc <SetDirection+0xc8>)
 8001c62:	785b      	ldrb	r3, [r3, #1]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d006      	beq.n	8001c76 <SetDirection+0x82>
				GPIOWrite(dirY_GPIO_Port,  dirY_Pin,  Neg);
 8001c68:	4b15      	ldr	r3, [pc, #84]	@ (8001cc0 <SetDirection+0xcc>)
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	2120      	movs	r1, #32
 8001c6e:	0018      	movs	r0, r3
 8001c70:	f7ff ff2c 	bl	8001acc <GPIOWrite>
			break;
 8001c74:	e01d      	b.n	8001cb2 <SetDirection+0xbe>
				GPIOWrite(dirY_GPIO_Port,  dirY_Pin,  Pos);
 8001c76:	4b12      	ldr	r3, [pc, #72]	@ (8001cc0 <SetDirection+0xcc>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	2120      	movs	r1, #32
 8001c7c:	0018      	movs	r0, r3
 8001c7e:	f7ff ff25 	bl	8001acc <GPIOWrite>
			break;
 8001c82:	e016      	b.n	8001cb2 <SetDirection+0xbe>
			if(Dir[Z])
 8001c84:	4b0d      	ldr	r3, [pc, #52]	@ (8001cbc <SetDirection+0xc8>)
 8001c86:	789b      	ldrb	r3, [r3, #2]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d008      	beq.n	8001c9e <SetDirection+0xaa>
				GPIOWrite(dirZ_GPIO_Port,  dirZ_Pin,  DIR_Z(Neg));
 8001c8c:	2380      	movs	r3, #128	@ 0x80
 8001c8e:	00d9      	lsls	r1, r3, #3
 8001c90:	2390      	movs	r3, #144	@ 0x90
 8001c92:	05db      	lsls	r3, r3, #23
 8001c94:	2200      	movs	r2, #0
 8001c96:	0018      	movs	r0, r3
 8001c98:	f7ff ff18 	bl	8001acc <GPIOWrite>
			break;
 8001c9c:	e009      	b.n	8001cb2 <SetDirection+0xbe>
				GPIOWrite(dirZ_GPIO_Port,  dirZ_Pin,  DIR_Z(Pos));
 8001c9e:	2380      	movs	r3, #128	@ 0x80
 8001ca0:	00d9      	lsls	r1, r3, #3
 8001ca2:	2390      	movs	r3, #144	@ 0x90
 8001ca4:	05db      	lsls	r3, r3, #23
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	0018      	movs	r0, r3
 8001caa:	f7ff ff0f 	bl	8001acc <GPIOWrite>
			break;
 8001cae:	e000      	b.n	8001cb2 <SetDirection+0xbe>
			break;
 8001cb0:	46c0      	nop			@ (mov r8, r8)
	}
}
 8001cb2:	46c0      	nop			@ (mov r8, r8)
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	b002      	add	sp, #8
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	46c0      	nop			@ (mov r8, r8)
 8001cbc:	200002dc 	.word	0x200002dc
 8001cc0:	48000400 	.word	0x48000400

08001cc4 <LowAccelerationHandle>:
  * @brief Determines the type of acceleration needed and calls the appropriate function, accelerates to a smaller value
  * @param A	The axis to apply to
  * @retval None
  */
void LowAccelerationHandle(Axis A)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	0002      	movs	r2, r0
 8001ccc:	1dfb      	adds	r3, r7, #7
 8001cce:	701a      	strb	r2, [r3, #0]
	if(abs((int)CurPos[A] - (int)Stamp[A]) > ACC_STEPS)
 8001cd0:	1dfb      	adds	r3, r7, #7
 8001cd2:	781a      	ldrb	r2, [r3, #0]
 8001cd4:	4b2c      	ldr	r3, [pc, #176]	@ (8001d88 <LowAccelerationHandle+0xc4>)
 8001cd6:	0092      	lsls	r2, r2, #2
 8001cd8:	58d3      	ldr	r3, [r2, r3]
 8001cda:	0019      	movs	r1, r3
 8001cdc:	1dfb      	adds	r3, r7, #7
 8001cde:	781a      	ldrb	r2, [r3, #0]
 8001ce0:	4b2a      	ldr	r3, [pc, #168]	@ (8001d8c <LowAccelerationHandle+0xc8>)
 8001ce2:	0092      	lsls	r2, r2, #2
 8001ce4:	58d3      	ldr	r3, [r2, r3]
 8001ce6:	1acb      	subs	r3, r1, r3
 8001ce8:	17da      	asrs	r2, r3, #31
 8001cea:	189b      	adds	r3, r3, r2
 8001cec:	4053      	eors	r3, r2
 8001cee:	2b64      	cmp	r3, #100	@ 0x64
 8001cf0:	dd46      	ble.n	8001d80 <LowAccelerationHandle+0xbc>
	{
		if(abs((int)ReqPos[A] - (int)CurPos[A]) > AccVal[A])
 8001cf2:	1dfb      	adds	r3, r7, #7
 8001cf4:	781a      	ldrb	r2, [r3, #0]
 8001cf6:	4b26      	ldr	r3, [pc, #152]	@ (8001d90 <LowAccelerationHandle+0xcc>)
 8001cf8:	0092      	lsls	r2, r2, #2
 8001cfa:	58d3      	ldr	r3, [r2, r3]
 8001cfc:	0019      	movs	r1, r3
 8001cfe:	1dfb      	adds	r3, r7, #7
 8001d00:	781a      	ldrb	r2, [r3, #0]
 8001d02:	4b21      	ldr	r3, [pc, #132]	@ (8001d88 <LowAccelerationHandle+0xc4>)
 8001d04:	0092      	lsls	r2, r2, #2
 8001d06:	58d3      	ldr	r3, [r2, r3]
 8001d08:	1acb      	subs	r3, r1, r3
 8001d0a:	17da      	asrs	r2, r3, #31
 8001d0c:	189b      	adds	r3, r3, r2
 8001d0e:	4053      	eors	r3, r2
 8001d10:	1dfa      	adds	r2, r7, #7
 8001d12:	7811      	ldrb	r1, [r2, #0]
 8001d14:	4a1f      	ldr	r2, [pc, #124]	@ (8001d94 <LowAccelerationHandle+0xd0>)
 8001d16:	0049      	lsls	r1, r1, #1
 8001d18:	5a8a      	ldrh	r2, [r1, r2]
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	dd0c      	ble.n	8001d38 <LowAccelerationHandle+0x74>
		{
			if(AccVal[A] <= ACC_END_LOW)
 8001d1e:	1dfb      	adds	r3, r7, #7
 8001d20:	781a      	ldrb	r2, [r3, #0]
 8001d22:	4b1c      	ldr	r3, [pc, #112]	@ (8001d94 <LowAccelerationHandle+0xd0>)
 8001d24:	0052      	lsls	r2, r2, #1
 8001d26:	5ad3      	ldrh	r3, [r2, r3]
 8001d28:	2b14      	cmp	r3, #20
 8001d2a:	d80a      	bhi.n	8001d42 <LowAccelerationHandle+0x7e>
				Accelerate(A);
 8001d2c:	1dfb      	adds	r3, r7, #7
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	0018      	movs	r0, r3
 8001d32:	f7ff ff17 	bl	8001b64 <Accelerate>
 8001d36:	e004      	b.n	8001d42 <LowAccelerationHandle+0x7e>
		}
		else
			Deccelerate(A);
 8001d38:	1dfb      	adds	r3, r7, #7
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	0018      	movs	r0, r3
 8001d3e:	f7ff ff35 	bl	8001bac <Deccelerate>

	  LIM_TIM(A) =  GET_DELAY(A);
 8001d42:	1dfb      	adds	r3, r7, #7
 8001d44:	781a      	ldrb	r2, [r3, #0]
 8001d46:	4b13      	ldr	r3, [pc, #76]	@ (8001d94 <LowAccelerationHandle+0xd0>)
 8001d48:	0052      	lsls	r2, r2, #1
 8001d4a:	5ad3      	ldrh	r3, [r2, r3]
 8001d4c:	001a      	movs	r2, r3
 8001d4e:	2396      	movs	r3, #150	@ 0x96
 8001d50:	1a9a      	subs	r2, r3, r2
 8001d52:	0013      	movs	r3, r2
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	189b      	adds	r3, r3, r2
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	4a0f      	ldr	r2, [pc, #60]	@ (8001d98 <LowAccelerationHandle+0xd4>)
 8001d5c:	1899      	adds	r1, r3, r2
 8001d5e:	1dfb      	adds	r3, r7, #7
 8001d60:	781a      	ldrb	r2, [r3, #0]
 8001d62:	4b0e      	ldr	r3, [pc, #56]	@ (8001d9c <LowAccelerationHandle+0xd8>)
 8001d64:	0092      	lsls	r2, r2, #2
 8001d66:	58d3      	ldr	r3, [r2, r3]
 8001d68:	000a      	movs	r2, r1
 8001d6a:	62da      	str	r2, [r3, #44]	@ 0x2c
	  Stamp[A] = CurPos[A];
 8001d6c:	1dfb      	adds	r3, r7, #7
 8001d6e:	7819      	ldrb	r1, [r3, #0]
 8001d70:	1dfb      	adds	r3, r7, #7
 8001d72:	781a      	ldrb	r2, [r3, #0]
 8001d74:	4b04      	ldr	r3, [pc, #16]	@ (8001d88 <LowAccelerationHandle+0xc4>)
 8001d76:	0089      	lsls	r1, r1, #2
 8001d78:	58c9      	ldr	r1, [r1, r3]
 8001d7a:	4b04      	ldr	r3, [pc, #16]	@ (8001d8c <LowAccelerationHandle+0xc8>)
 8001d7c:	0092      	lsls	r2, r2, #2
 8001d7e:	50d1      	str	r1, [r2, r3]
	}
}
 8001d80:	46c0      	nop			@ (mov r8, r8)
 8001d82:	46bd      	mov	sp, r7
 8001d84:	b002      	add	sp, #8
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	200002b8 	.word	0x200002b8
 8001d8c:	200002d0 	.word	0x200002d0
 8001d90:	200002c4 	.word	0x200002c4
 8001d94:	200002e0 	.word	0x200002e0
 8001d98:	000005dc 	.word	0x000005dc
 8001d9c:	20000000 	.word	0x20000000

08001da0 <MaxAccelerationHandle>:
  * @brief Determines the type of acceleration needed and calls the appropriate function
  * @param A	The axis to apply to
  * @retval None
  */
void MaxAccelerationHandle(Axis A)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	0002      	movs	r2, r0
 8001da8:	1dfb      	adds	r3, r7, #7
 8001daa:	701a      	strb	r2, [r3, #0]
	if(abs((int)CurPos[A] - (int)Stamp[A]) > ACC_STEPS)
 8001dac:	1dfb      	adds	r3, r7, #7
 8001dae:	781a      	ldrb	r2, [r3, #0]
 8001db0:	4b2a      	ldr	r3, [pc, #168]	@ (8001e5c <MaxAccelerationHandle+0xbc>)
 8001db2:	0092      	lsls	r2, r2, #2
 8001db4:	58d3      	ldr	r3, [r2, r3]
 8001db6:	0019      	movs	r1, r3
 8001db8:	1dfb      	adds	r3, r7, #7
 8001dba:	781a      	ldrb	r2, [r3, #0]
 8001dbc:	4b28      	ldr	r3, [pc, #160]	@ (8001e60 <MaxAccelerationHandle+0xc0>)
 8001dbe:	0092      	lsls	r2, r2, #2
 8001dc0:	58d3      	ldr	r3, [r2, r3]
 8001dc2:	1acb      	subs	r3, r1, r3
 8001dc4:	17da      	asrs	r2, r3, #31
 8001dc6:	189b      	adds	r3, r3, r2
 8001dc8:	4053      	eors	r3, r2
 8001dca:	2b64      	cmp	r3, #100	@ 0x64
 8001dcc:	dd42      	ble.n	8001e54 <MaxAccelerationHandle+0xb4>
	{
	  if(abs((int)ReqPos[A] - (int)CurPos[A]) > AccVal[A] * ACC_STEPS)
 8001dce:	1dfb      	adds	r3, r7, #7
 8001dd0:	781a      	ldrb	r2, [r3, #0]
 8001dd2:	4b24      	ldr	r3, [pc, #144]	@ (8001e64 <MaxAccelerationHandle+0xc4>)
 8001dd4:	0092      	lsls	r2, r2, #2
 8001dd6:	58d3      	ldr	r3, [r2, r3]
 8001dd8:	0019      	movs	r1, r3
 8001dda:	1dfb      	adds	r3, r7, #7
 8001ddc:	781a      	ldrb	r2, [r3, #0]
 8001dde:	4b1f      	ldr	r3, [pc, #124]	@ (8001e5c <MaxAccelerationHandle+0xbc>)
 8001de0:	0092      	lsls	r2, r2, #2
 8001de2:	58d3      	ldr	r3, [r2, r3]
 8001de4:	1acb      	subs	r3, r1, r3
 8001de6:	17d9      	asrs	r1, r3, #31
 8001de8:	185a      	adds	r2, r3, r1
 8001dea:	404a      	eors	r2, r1
 8001dec:	1dfb      	adds	r3, r7, #7
 8001dee:	7819      	ldrb	r1, [r3, #0]
 8001df0:	4b1d      	ldr	r3, [pc, #116]	@ (8001e68 <MaxAccelerationHandle+0xc8>)
 8001df2:	0049      	lsls	r1, r1, #1
 8001df4:	5acb      	ldrh	r3, [r1, r3]
 8001df6:	0019      	movs	r1, r3
 8001df8:	2364      	movs	r3, #100	@ 0x64
 8001dfa:	434b      	muls	r3, r1
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	dd05      	ble.n	8001e0c <MaxAccelerationHandle+0x6c>
			Accelerate(A);
 8001e00:	1dfb      	adds	r3, r7, #7
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	0018      	movs	r0, r3
 8001e06:	f7ff fead 	bl	8001b64 <Accelerate>
 8001e0a:	e004      	b.n	8001e16 <MaxAccelerationHandle+0x76>
		else
			Deccelerate(A);
 8001e0c:	1dfb      	adds	r3, r7, #7
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	0018      	movs	r0, r3
 8001e12:	f7ff fecb 	bl	8001bac <Deccelerate>

	  LIM_TIM(A) =  GET_DELAY(A);
 8001e16:	1dfb      	adds	r3, r7, #7
 8001e18:	781a      	ldrb	r2, [r3, #0]
 8001e1a:	4b13      	ldr	r3, [pc, #76]	@ (8001e68 <MaxAccelerationHandle+0xc8>)
 8001e1c:	0052      	lsls	r2, r2, #1
 8001e1e:	5ad3      	ldrh	r3, [r2, r3]
 8001e20:	001a      	movs	r2, r3
 8001e22:	2396      	movs	r3, #150	@ 0x96
 8001e24:	1a9a      	subs	r2, r3, r2
 8001e26:	0013      	movs	r3, r2
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	189b      	adds	r3, r3, r2
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	4a0f      	ldr	r2, [pc, #60]	@ (8001e6c <MaxAccelerationHandle+0xcc>)
 8001e30:	1899      	adds	r1, r3, r2
 8001e32:	1dfb      	adds	r3, r7, #7
 8001e34:	781a      	ldrb	r2, [r3, #0]
 8001e36:	4b0e      	ldr	r3, [pc, #56]	@ (8001e70 <MaxAccelerationHandle+0xd0>)
 8001e38:	0092      	lsls	r2, r2, #2
 8001e3a:	58d3      	ldr	r3, [r2, r3]
 8001e3c:	000a      	movs	r2, r1
 8001e3e:	62da      	str	r2, [r3, #44]	@ 0x2c
	  Stamp[A] = CurPos[A];
 8001e40:	1dfb      	adds	r3, r7, #7
 8001e42:	7819      	ldrb	r1, [r3, #0]
 8001e44:	1dfb      	adds	r3, r7, #7
 8001e46:	781a      	ldrb	r2, [r3, #0]
 8001e48:	4b04      	ldr	r3, [pc, #16]	@ (8001e5c <MaxAccelerationHandle+0xbc>)
 8001e4a:	0089      	lsls	r1, r1, #2
 8001e4c:	58c9      	ldr	r1, [r1, r3]
 8001e4e:	4b04      	ldr	r3, [pc, #16]	@ (8001e60 <MaxAccelerationHandle+0xc0>)
 8001e50:	0092      	lsls	r2, r2, #2
 8001e52:	50d1      	str	r1, [r2, r3]
	}
}
 8001e54:	46c0      	nop			@ (mov r8, r8)
 8001e56:	46bd      	mov	sp, r7
 8001e58:	b002      	add	sp, #8
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	200002b8 	.word	0x200002b8
 8001e60:	200002d0 	.word	0x200002d0
 8001e64:	200002c4 	.word	0x200002c4
 8001e68:	200002e0 	.word	0x200002e0
 8001e6c:	000005dc 	.word	0x000005dc
 8001e70:	20000000 	.word	0x20000000

08001e74 <HomeAxis>:
  * @brief Determines and sets the limit values
  * @param A	The axis to apply to
  * @retval None
  */
void HomeAxis(Axis A)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	0002      	movs	r2, r0
 8001e7c:	1dfb      	adds	r3, r7, #7
 8001e7e:	701a      	strb	r2, [r3, #0]
	switch(A)
 8001e80:	1dfb      	adds	r3, r7, #7
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d100      	bne.n	8001e8a <HomeAxis+0x16>
 8001e88:	e179      	b.n	800217e <HomeAxis+0x30a>
 8001e8a:	dd00      	ble.n	8001e8e <HomeAxis+0x1a>
 8001e8c:	e203      	b.n	8002296 <HomeAxis+0x422>
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d003      	beq.n	8001e9a <HomeAxis+0x26>
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d100      	bne.n	8001e98 <HomeAxis+0x24>
 8001e96:	e0c0      	b.n	800201a <HomeAxis+0x1a6>
			RST_MFLAG(Z);

			break;

		default:
			break;
 8001e98:	e1fd      	b.n	8002296 <HomeAxis+0x422>
			CurPos[X] = 0;
 8001e9a:	4bd4      	ldr	r3, [pc, #848]	@ (80021ec <HomeAxis+0x378>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]
			ReqPos[X] = Limit[X];
 8001ea0:	4bd3      	ldr	r3, [pc, #844]	@ (80021f0 <HomeAxis+0x37c>)
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	4bd3      	ldr	r3, [pc, #844]	@ (80021f4 <HomeAxis+0x380>)
 8001ea6:	601a      	str	r2, [r3, #0]
			SET_MFLAG(X);
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	4bd3      	ldr	r3, [pc, #844]	@ (80021f8 <HomeAxis+0x384>)
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	b2da      	uxtb	r2, r3
 8001eb4:	4bd0      	ldr	r3, [pc, #832]	@ (80021f8 <HomeAxis+0x384>)
 8001eb6:	701a      	strb	r2, [r3, #0]
			Dir[X] = Pos;
 8001eb8:	4bd0      	ldr	r3, [pc, #832]	@ (80021fc <HomeAxis+0x388>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	701a      	strb	r2, [r3, #0]
			SetDirection(X);
 8001ebe:	2000      	movs	r0, #0
 8001ec0:	f7ff fe98 	bl	8001bf4 <SetDirection>
			AccVal[X] = ACC_START;
 8001ec4:	4bce      	ldr	r3, [pc, #824]	@ (8002200 <HomeAxis+0x38c>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	801a      	strh	r2, [r3, #0]
			Stamp[X] = CurPos[X];
 8001eca:	4bc8      	ldr	r3, [pc, #800]	@ (80021ec <HomeAxis+0x378>)
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	4bcd      	ldr	r3, [pc, #820]	@ (8002204 <HomeAxis+0x390>)
 8001ed0:	601a      	str	r2, [r3, #0]
			RST_TIM(X);
 8001ed2:	4bcd      	ldr	r3, [pc, #820]	@ (8002208 <HomeAxis+0x394>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	625a      	str	r2, [r3, #36]	@ 0x24
			LIM_TIM(X) =  GET_DELAY(X);
 8001eda:	4bc9      	ldr	r3, [pc, #804]	@ (8002200 <HomeAxis+0x38c>)
 8001edc:	881b      	ldrh	r3, [r3, #0]
 8001ede:	001a      	movs	r2, r3
 8001ee0:	2396      	movs	r3, #150	@ 0x96
 8001ee2:	1a9a      	subs	r2, r3, r2
 8001ee4:	0013      	movs	r3, r2
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	189b      	adds	r3, r3, r2
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	4ac7      	ldr	r2, [pc, #796]	@ (800220c <HomeAxis+0x398>)
 8001eee:	189a      	adds	r2, r3, r2
 8001ef0:	4bc5      	ldr	r3, [pc, #788]	@ (8002208 <HomeAxis+0x394>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	62da      	str	r2, [r3, #44]	@ 0x2c
			START_TIM(X);
 8001ef6:	4bc4      	ldr	r3, [pc, #784]	@ (8002208 <HomeAxis+0x394>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	4bc2      	ldr	r3, [pc, #776]	@ (8002208 <HomeAxis+0x394>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2101      	movs	r1, #1
 8001f02:	430a      	orrs	r2, r1
 8001f04:	601a      	str	r2, [r3, #0]
			while(*HallPosX > HALL_LOW || *HallPosX2 > HALL_LOW)
 8001f06:	e002      	b.n	8001f0e <HomeAxis+0x9a>
			  LowAccelerationHandle(X); // Accelerate to a lower than normal because deceleration is impossible to predict
 8001f08:	2000      	movs	r0, #0
 8001f0a:	f7ff fedb 	bl	8001cc4 <LowAccelerationHandle>
			while(*HallPosX > HALL_LOW || *HallPosX2 > HALL_LOW)
 8001f0e:	4bc0      	ldr	r3, [pc, #768]	@ (8002210 <HomeAxis+0x39c>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	881a      	ldrh	r2, [r3, #0]
 8001f14:	2380      	movs	r3, #128	@ 0x80
 8001f16:	011b      	lsls	r3, r3, #4
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d2f5      	bcs.n	8001f08 <HomeAxis+0x94>
 8001f1c:	4bbd      	ldr	r3, [pc, #756]	@ (8002214 <HomeAxis+0x3a0>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	881a      	ldrh	r2, [r3, #0]
 8001f22:	2380      	movs	r3, #128	@ 0x80
 8001f24:	011b      	lsls	r3, r3, #4
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d2ee      	bcs.n	8001f08 <HomeAxis+0x94>
			STOP_TIM(X);
 8001f2a:	4bb7      	ldr	r3, [pc, #732]	@ (8002208 <HomeAxis+0x394>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	4bb5      	ldr	r3, [pc, #724]	@ (8002208 <HomeAxis+0x394>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2101      	movs	r1, #1
 8001f36:	438a      	bics	r2, r1
 8001f38:	601a      	str	r2, [r3, #0]
			CurPos[X] = LIM_POS;
 8001f3a:	4bac      	ldr	r3, [pc, #688]	@ (80021ec <HomeAxis+0x378>)
 8001f3c:	2280      	movs	r2, #128	@ 0x80
 8001f3e:	0612      	lsls	r2, r2, #24
 8001f40:	601a      	str	r2, [r3, #0]
			ReqPos[X] = 0;
 8001f42:	4bac      	ldr	r3, [pc, #688]	@ (80021f4 <HomeAxis+0x380>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]
			Dir[X] = Neg;
 8001f48:	4bac      	ldr	r3, [pc, #688]	@ (80021fc <HomeAxis+0x388>)
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	701a      	strb	r2, [r3, #0]
			SetDirection(X);
 8001f4e:	2000      	movs	r0, #0
 8001f50:	f7ff fe50 	bl	8001bf4 <SetDirection>
			AccVal[X] = ACC_START;
 8001f54:	4baa      	ldr	r3, [pc, #680]	@ (8002200 <HomeAxis+0x38c>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	801a      	strh	r2, [r3, #0]
			Stamp[X] = CurPos[X];
 8001f5a:	4ba4      	ldr	r3, [pc, #656]	@ (80021ec <HomeAxis+0x378>)
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	4ba9      	ldr	r3, [pc, #676]	@ (8002204 <HomeAxis+0x390>)
 8001f60:	601a      	str	r2, [r3, #0]
			RST_TIM(X);
 8001f62:	4ba9      	ldr	r3, [pc, #676]	@ (8002208 <HomeAxis+0x394>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	2200      	movs	r2, #0
 8001f68:	625a      	str	r2, [r3, #36]	@ 0x24
			LIM_TIM(X) =  GET_DELAY(X);
 8001f6a:	4ba5      	ldr	r3, [pc, #660]	@ (8002200 <HomeAxis+0x38c>)
 8001f6c:	881b      	ldrh	r3, [r3, #0]
 8001f6e:	001a      	movs	r2, r3
 8001f70:	2396      	movs	r3, #150	@ 0x96
 8001f72:	1a9a      	subs	r2, r3, r2
 8001f74:	0013      	movs	r3, r2
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	189b      	adds	r3, r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	4aa3      	ldr	r2, [pc, #652]	@ (800220c <HomeAxis+0x398>)
 8001f7e:	189a      	adds	r2, r3, r2
 8001f80:	4ba1      	ldr	r3, [pc, #644]	@ (8002208 <HomeAxis+0x394>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	62da      	str	r2, [r3, #44]	@ 0x2c
			START_TIM(X);
 8001f86:	4ba0      	ldr	r3, [pc, #640]	@ (8002208 <HomeAxis+0x394>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	4b9e      	ldr	r3, [pc, #632]	@ (8002208 <HomeAxis+0x394>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2101      	movs	r1, #1
 8001f92:	430a      	orrs	r2, r1
 8001f94:	601a      	str	r2, [r3, #0]
			while(*HallNegX > HALL_LOW || *HallNegX2 > HALL_LOW)
 8001f96:	e002      	b.n	8001f9e <HomeAxis+0x12a>
			  LowAccelerationHandle(X); // Accelerate to a lower than normal because deceleration is impossible to predict
 8001f98:	2000      	movs	r0, #0
 8001f9a:	f7ff fe93 	bl	8001cc4 <LowAccelerationHandle>
			while(*HallNegX > HALL_LOW || *HallNegX2 > HALL_LOW)
 8001f9e:	4b9e      	ldr	r3, [pc, #632]	@ (8002218 <HomeAxis+0x3a4>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	881a      	ldrh	r2, [r3, #0]
 8001fa4:	2380      	movs	r3, #128	@ 0x80
 8001fa6:	011b      	lsls	r3, r3, #4
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d2f5      	bcs.n	8001f98 <HomeAxis+0x124>
 8001fac:	4b9b      	ldr	r3, [pc, #620]	@ (800221c <HomeAxis+0x3a8>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	881a      	ldrh	r2, [r3, #0]
 8001fb2:	2380      	movs	r3, #128	@ 0x80
 8001fb4:	011b      	lsls	r3, r3, #4
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d2ee      	bcs.n	8001f98 <HomeAxis+0x124>
			STOP_TIM(X);
 8001fba:	4b93      	ldr	r3, [pc, #588]	@ (8002208 <HomeAxis+0x394>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	4b91      	ldr	r3, [pc, #580]	@ (8002208 <HomeAxis+0x394>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2101      	movs	r1, #1
 8001fc6:	438a      	bics	r2, r1
 8001fc8:	601a      	str	r2, [r3, #0]
			Limit[X] = LIM_POS - CurPos[X];
 8001fca:	4b88      	ldr	r3, [pc, #544]	@ (80021ec <HomeAxis+0x378>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	2280      	movs	r2, #128	@ 0x80
 8001fd0:	0612      	lsls	r2, r2, #24
 8001fd2:	1ad2      	subs	r2, r2, r3
 8001fd4:	4b86      	ldr	r3, [pc, #536]	@ (80021f0 <HomeAxis+0x37c>)
 8001fd6:	601a      	str	r2, [r3, #0]
			MMtoStep[X] = Limit[X] / LimitReal[X];
 8001fd8:	4b85      	ldr	r3, [pc, #532]	@ (80021f0 <HomeAxis+0x37c>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	0018      	movs	r0, r3
 8001fde:	f7fe ff6d 	bl	8000ebc <__aeabi_ui2f>
 8001fe2:	1c02      	adds	r2, r0, #0
 8001fe4:	4b8e      	ldr	r3, [pc, #568]	@ (8002220 <HomeAxis+0x3ac>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	1c19      	adds	r1, r3, #0
 8001fea:	1c10      	adds	r0, r2, #0
 8001fec:	f7fe f96a 	bl	80002c4 <__aeabi_fdiv>
 8001ff0:	1c03      	adds	r3, r0, #0
 8001ff2:	1c1a      	adds	r2, r3, #0
 8001ff4:	4b8b      	ldr	r3, [pc, #556]	@ (8002224 <HomeAxis+0x3b0>)
 8001ff6:	601a      	str	r2, [r3, #0]
			CurPos[X] = 0;
 8001ff8:	4b7c      	ldr	r3, [pc, #496]	@ (80021ec <HomeAxis+0x378>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	601a      	str	r2, [r3, #0]
			RST_MFLAG(X);
 8001ffe:	2301      	movs	r3, #1
 8002000:	b25b      	sxtb	r3, r3
 8002002:	43db      	mvns	r3, r3
 8002004:	b25b      	sxtb	r3, r3
 8002006:	4a7c      	ldr	r2, [pc, #496]	@ (80021f8 <HomeAxis+0x384>)
 8002008:	7812      	ldrb	r2, [r2, #0]
 800200a:	b2d2      	uxtb	r2, r2
 800200c:	b252      	sxtb	r2, r2
 800200e:	4013      	ands	r3, r2
 8002010:	b25b      	sxtb	r3, r3
 8002012:	b2da      	uxtb	r2, r3
 8002014:	4b78      	ldr	r3, [pc, #480]	@ (80021f8 <HomeAxis+0x384>)
 8002016:	701a      	strb	r2, [r3, #0]
			break;
 8002018:	e13e      	b.n	8002298 <HomeAxis+0x424>
			CurPos[Y] = 0;
 800201a:	4b74      	ldr	r3, [pc, #464]	@ (80021ec <HomeAxis+0x378>)
 800201c:	2200      	movs	r2, #0
 800201e:	605a      	str	r2, [r3, #4]
			ReqPos[Y] = Limit[Y];
 8002020:	4b73      	ldr	r3, [pc, #460]	@ (80021f0 <HomeAxis+0x37c>)
 8002022:	685a      	ldr	r2, [r3, #4]
 8002024:	4b73      	ldr	r3, [pc, #460]	@ (80021f4 <HomeAxis+0x380>)
 8002026:	605a      	str	r2, [r3, #4]
			SET_MFLAG(Y);
 8002028:	2202      	movs	r2, #2
 800202a:	4b73      	ldr	r3, [pc, #460]	@ (80021f8 <HomeAxis+0x384>)
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	b2db      	uxtb	r3, r3
 8002030:	4313      	orrs	r3, r2
 8002032:	b2da      	uxtb	r2, r3
 8002034:	4b70      	ldr	r3, [pc, #448]	@ (80021f8 <HomeAxis+0x384>)
 8002036:	701a      	strb	r2, [r3, #0]
			Dir[Y] = Pos;
 8002038:	4b70      	ldr	r3, [pc, #448]	@ (80021fc <HomeAxis+0x388>)
 800203a:	2200      	movs	r2, #0
 800203c:	705a      	strb	r2, [r3, #1]
			SetDirection(Y);
 800203e:	2001      	movs	r0, #1
 8002040:	f7ff fdd8 	bl	8001bf4 <SetDirection>
			AccVal[Y] = ACC_START;
 8002044:	4b6e      	ldr	r3, [pc, #440]	@ (8002200 <HomeAxis+0x38c>)
 8002046:	2200      	movs	r2, #0
 8002048:	805a      	strh	r2, [r3, #2]
			Stamp[Y] = CurPos[Y];
 800204a:	4b68      	ldr	r3, [pc, #416]	@ (80021ec <HomeAxis+0x378>)
 800204c:	685a      	ldr	r2, [r3, #4]
 800204e:	4b6d      	ldr	r3, [pc, #436]	@ (8002204 <HomeAxis+0x390>)
 8002050:	605a      	str	r2, [r3, #4]
			RST_TIM(Y);
 8002052:	4b6d      	ldr	r3, [pc, #436]	@ (8002208 <HomeAxis+0x394>)
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	625a      	str	r2, [r3, #36]	@ 0x24
			LIM_TIM(Y) =  GET_DELAY(Y);
 800205a:	4b69      	ldr	r3, [pc, #420]	@ (8002200 <HomeAxis+0x38c>)
 800205c:	885b      	ldrh	r3, [r3, #2]
 800205e:	001a      	movs	r2, r3
 8002060:	2396      	movs	r3, #150	@ 0x96
 8002062:	1a9a      	subs	r2, r3, r2
 8002064:	0013      	movs	r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	189b      	adds	r3, r3, r2
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	4a67      	ldr	r2, [pc, #412]	@ (800220c <HomeAxis+0x398>)
 800206e:	189a      	adds	r2, r3, r2
 8002070:	4b65      	ldr	r3, [pc, #404]	@ (8002208 <HomeAxis+0x394>)
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	62da      	str	r2, [r3, #44]	@ 0x2c
			START_TIM(Y);
 8002076:	4b64      	ldr	r3, [pc, #400]	@ (8002208 <HomeAxis+0x394>)
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	4b62      	ldr	r3, [pc, #392]	@ (8002208 <HomeAxis+0x394>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	2101      	movs	r1, #1
 8002082:	430a      	orrs	r2, r1
 8002084:	601a      	str	r2, [r3, #0]
			while(*HallPosY > HALL_LOW)
 8002086:	e002      	b.n	800208e <HomeAxis+0x21a>
			  LowAccelerationHandle(Y); // Accelerate to a lower than normal because deceleration is impossible to predict
 8002088:	2001      	movs	r0, #1
 800208a:	f7ff fe1b 	bl	8001cc4 <LowAccelerationHandle>
			while(*HallPosY > HALL_LOW)
 800208e:	4b66      	ldr	r3, [pc, #408]	@ (8002228 <HomeAxis+0x3b4>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	881a      	ldrh	r2, [r3, #0]
 8002094:	2380      	movs	r3, #128	@ 0x80
 8002096:	011b      	lsls	r3, r3, #4
 8002098:	429a      	cmp	r2, r3
 800209a:	d2f5      	bcs.n	8002088 <HomeAxis+0x214>
			STOP_TIM(Y);
 800209c:	4b5a      	ldr	r3, [pc, #360]	@ (8002208 <HomeAxis+0x394>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	4b59      	ldr	r3, [pc, #356]	@ (8002208 <HomeAxis+0x394>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	2101      	movs	r1, #1
 80020a8:	438a      	bics	r2, r1
 80020aa:	601a      	str	r2, [r3, #0]
			CurPos[Y] = LIM_POS;
 80020ac:	4b4f      	ldr	r3, [pc, #316]	@ (80021ec <HomeAxis+0x378>)
 80020ae:	2280      	movs	r2, #128	@ 0x80
 80020b0:	0612      	lsls	r2, r2, #24
 80020b2:	605a      	str	r2, [r3, #4]
			ReqPos[Y] = 0;
 80020b4:	4b4f      	ldr	r3, [pc, #316]	@ (80021f4 <HomeAxis+0x380>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	605a      	str	r2, [r3, #4]
			Dir[Y] = Neg;
 80020ba:	4b50      	ldr	r3, [pc, #320]	@ (80021fc <HomeAxis+0x388>)
 80020bc:	2201      	movs	r2, #1
 80020be:	705a      	strb	r2, [r3, #1]
			SetDirection(Y);
 80020c0:	2001      	movs	r0, #1
 80020c2:	f7ff fd97 	bl	8001bf4 <SetDirection>
			AccVal[Y] = ACC_START;
 80020c6:	4b4e      	ldr	r3, [pc, #312]	@ (8002200 <HomeAxis+0x38c>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	805a      	strh	r2, [r3, #2]
			Stamp[Y] = CurPos[Y];
 80020cc:	4b47      	ldr	r3, [pc, #284]	@ (80021ec <HomeAxis+0x378>)
 80020ce:	685a      	ldr	r2, [r3, #4]
 80020d0:	4b4c      	ldr	r3, [pc, #304]	@ (8002204 <HomeAxis+0x390>)
 80020d2:	605a      	str	r2, [r3, #4]
			RST_TIM(Y);
 80020d4:	4b4c      	ldr	r3, [pc, #304]	@ (8002208 <HomeAxis+0x394>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	625a      	str	r2, [r3, #36]	@ 0x24
			LIM_TIM(Y) =  GET_DELAY(Y);
 80020dc:	4b48      	ldr	r3, [pc, #288]	@ (8002200 <HomeAxis+0x38c>)
 80020de:	885b      	ldrh	r3, [r3, #2]
 80020e0:	001a      	movs	r2, r3
 80020e2:	2396      	movs	r3, #150	@ 0x96
 80020e4:	1a9a      	subs	r2, r3, r2
 80020e6:	0013      	movs	r3, r2
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	189b      	adds	r3, r3, r2
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	4a47      	ldr	r2, [pc, #284]	@ (800220c <HomeAxis+0x398>)
 80020f0:	189a      	adds	r2, r3, r2
 80020f2:	4b45      	ldr	r3, [pc, #276]	@ (8002208 <HomeAxis+0x394>)
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	62da      	str	r2, [r3, #44]	@ 0x2c
			START_TIM(Y);
 80020f8:	4b43      	ldr	r3, [pc, #268]	@ (8002208 <HomeAxis+0x394>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	4b42      	ldr	r3, [pc, #264]	@ (8002208 <HomeAxis+0x394>)
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	2101      	movs	r1, #1
 8002104:	430a      	orrs	r2, r1
 8002106:	601a      	str	r2, [r3, #0]
			while(*HallNegY > HALL_LOW)
 8002108:	e002      	b.n	8002110 <HomeAxis+0x29c>
			  LowAccelerationHandle(Y);  // Accelerate to a lower than normal because deceleration is impossible to predict
 800210a:	2001      	movs	r0, #1
 800210c:	f7ff fdda 	bl	8001cc4 <LowAccelerationHandle>
			while(*HallNegY > HALL_LOW)
 8002110:	4b46      	ldr	r3, [pc, #280]	@ (800222c <HomeAxis+0x3b8>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	881a      	ldrh	r2, [r3, #0]
 8002116:	2380      	movs	r3, #128	@ 0x80
 8002118:	011b      	lsls	r3, r3, #4
 800211a:	429a      	cmp	r2, r3
 800211c:	d2f5      	bcs.n	800210a <HomeAxis+0x296>
			STOP_TIM(Y);
 800211e:	4b3a      	ldr	r3, [pc, #232]	@ (8002208 <HomeAxis+0x394>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	4b38      	ldr	r3, [pc, #224]	@ (8002208 <HomeAxis+0x394>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	2101      	movs	r1, #1
 800212a:	438a      	bics	r2, r1
 800212c:	601a      	str	r2, [r3, #0]
			Limit[Y] = LIM_POS - CurPos[Y];
 800212e:	4b2f      	ldr	r3, [pc, #188]	@ (80021ec <HomeAxis+0x378>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	2280      	movs	r2, #128	@ 0x80
 8002134:	0612      	lsls	r2, r2, #24
 8002136:	1ad2      	subs	r2, r2, r3
 8002138:	4b2d      	ldr	r3, [pc, #180]	@ (80021f0 <HomeAxis+0x37c>)
 800213a:	605a      	str	r2, [r3, #4]
			MMtoStep[Y] = Limit[Y] / LimitReal[Y];
 800213c:	4b2c      	ldr	r3, [pc, #176]	@ (80021f0 <HomeAxis+0x37c>)
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	0018      	movs	r0, r3
 8002142:	f7fe febb 	bl	8000ebc <__aeabi_ui2f>
 8002146:	1c02      	adds	r2, r0, #0
 8002148:	4b35      	ldr	r3, [pc, #212]	@ (8002220 <HomeAxis+0x3ac>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	1c19      	adds	r1, r3, #0
 800214e:	1c10      	adds	r0, r2, #0
 8002150:	f7fe f8b8 	bl	80002c4 <__aeabi_fdiv>
 8002154:	1c03      	adds	r3, r0, #0
 8002156:	1c1a      	adds	r2, r3, #0
 8002158:	4b32      	ldr	r3, [pc, #200]	@ (8002224 <HomeAxis+0x3b0>)
 800215a:	605a      	str	r2, [r3, #4]
			CurPos[Y] = 0;
 800215c:	4b23      	ldr	r3, [pc, #140]	@ (80021ec <HomeAxis+0x378>)
 800215e:	2200      	movs	r2, #0
 8002160:	605a      	str	r2, [r3, #4]
			RST_MFLAG(Y);
 8002162:	2302      	movs	r3, #2
 8002164:	b25b      	sxtb	r3, r3
 8002166:	43db      	mvns	r3, r3
 8002168:	b25b      	sxtb	r3, r3
 800216a:	4a23      	ldr	r2, [pc, #140]	@ (80021f8 <HomeAxis+0x384>)
 800216c:	7812      	ldrb	r2, [r2, #0]
 800216e:	b2d2      	uxtb	r2, r2
 8002170:	b252      	sxtb	r2, r2
 8002172:	4013      	ands	r3, r2
 8002174:	b25b      	sxtb	r3, r3
 8002176:	b2da      	uxtb	r2, r3
 8002178:	4b1f      	ldr	r3, [pc, #124]	@ (80021f8 <HomeAxis+0x384>)
 800217a:	701a      	strb	r2, [r3, #0]
			break;
 800217c:	e08c      	b.n	8002298 <HomeAxis+0x424>
			CurPos[Z] = LIM_POS;
 800217e:	4b1b      	ldr	r3, [pc, #108]	@ (80021ec <HomeAxis+0x378>)
 8002180:	2280      	movs	r2, #128	@ 0x80
 8002182:	0612      	lsls	r2, r2, #24
 8002184:	609a      	str	r2, [r3, #8]
			ReqPos[Z] = 0;
 8002186:	4b1b      	ldr	r3, [pc, #108]	@ (80021f4 <HomeAxis+0x380>)
 8002188:	2200      	movs	r2, #0
 800218a:	609a      	str	r2, [r3, #8]
			SET_MFLAG(Z);
 800218c:	2204      	movs	r2, #4
 800218e:	4b1a      	ldr	r3, [pc, #104]	@ (80021f8 <HomeAxis+0x384>)
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	b2db      	uxtb	r3, r3
 8002194:	4313      	orrs	r3, r2
 8002196:	b2da      	uxtb	r2, r3
 8002198:	4b17      	ldr	r3, [pc, #92]	@ (80021f8 <HomeAxis+0x384>)
 800219a:	701a      	strb	r2, [r3, #0]
			Dir[Z] = Neg;
 800219c:	4b17      	ldr	r3, [pc, #92]	@ (80021fc <HomeAxis+0x388>)
 800219e:	2201      	movs	r2, #1
 80021a0:	709a      	strb	r2, [r3, #2]
			SetDirection(Z);
 80021a2:	2002      	movs	r0, #2
 80021a4:	f7ff fd26 	bl	8001bf4 <SetDirection>
			AccVal[Z] = ACC_START;
 80021a8:	4b15      	ldr	r3, [pc, #84]	@ (8002200 <HomeAxis+0x38c>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	809a      	strh	r2, [r3, #4]
			Stamp[Z] = CurPos[Z];
 80021ae:	4b0f      	ldr	r3, [pc, #60]	@ (80021ec <HomeAxis+0x378>)
 80021b0:	689a      	ldr	r2, [r3, #8]
 80021b2:	4b14      	ldr	r3, [pc, #80]	@ (8002204 <HomeAxis+0x390>)
 80021b4:	609a      	str	r2, [r3, #8]
			RST_TIM(Z);
 80021b6:	4b14      	ldr	r3, [pc, #80]	@ (8002208 <HomeAxis+0x394>)
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	2200      	movs	r2, #0
 80021bc:	625a      	str	r2, [r3, #36]	@ 0x24
			LIM_TIM(Z) =  GET_DELAY(Z);
 80021be:	4b10      	ldr	r3, [pc, #64]	@ (8002200 <HomeAxis+0x38c>)
 80021c0:	889b      	ldrh	r3, [r3, #4]
 80021c2:	001a      	movs	r2, r3
 80021c4:	2396      	movs	r3, #150	@ 0x96
 80021c6:	1a9a      	subs	r2, r3, r2
 80021c8:	0013      	movs	r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	189b      	adds	r3, r3, r2
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	4a0e      	ldr	r2, [pc, #56]	@ (800220c <HomeAxis+0x398>)
 80021d2:	189a      	adds	r2, r3, r2
 80021d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002208 <HomeAxis+0x394>)
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	62da      	str	r2, [r3, #44]	@ 0x2c
			START_TIM(Z);
 80021da:	4b0b      	ldr	r3, [pc, #44]	@ (8002208 <HomeAxis+0x394>)
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	4b09      	ldr	r3, [pc, #36]	@ (8002208 <HomeAxis+0x394>)
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	2101      	movs	r1, #1
 80021e6:	430a      	orrs	r2, r1
 80021e8:	601a      	str	r2, [r3, #0]
			while(*HallPosZ > HALL_LOW)
 80021ea:	e024      	b.n	8002236 <HomeAxis+0x3c2>
 80021ec:	200002b8 	.word	0x200002b8
 80021f0:	2000004c 	.word	0x2000004c
 80021f4:	200002c4 	.word	0x200002c4
 80021f8:	200002e7 	.word	0x200002e7
 80021fc:	200002dc 	.word	0x200002dc
 8002200:	200002e0 	.word	0x200002e0
 8002204:	200002d0 	.word	0x200002d0
 8002208:	20000000 	.word	0x20000000
 800220c:	000005dc 	.word	0x000005dc
 8002210:	2000001c 	.word	0x2000001c
 8002214:	20000018 	.word	0x20000018
 8002218:	2000002c 	.word	0x2000002c
 800221c:	20000028 	.word	0x20000028
 8002220:	2000000c 	.word	0x2000000c
 8002224:	20000058 	.word	0x20000058
 8002228:	20000020 	.word	0x20000020
 800222c:	20000030 	.word	0x20000030
			  LowAccelerationHandle(Z); // Accelerate to a lower than normal because deceleration is impossible to predict
 8002230:	2002      	movs	r0, #2
 8002232:	f7ff fd47 	bl	8001cc4 <LowAccelerationHandle>
			while(*HallPosZ > HALL_LOW)
 8002236:	4b1a      	ldr	r3, [pc, #104]	@ (80022a0 <HomeAxis+0x42c>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	881a      	ldrh	r2, [r3, #0]
 800223c:	2380      	movs	r3, #128	@ 0x80
 800223e:	011b      	lsls	r3, r3, #4
 8002240:	429a      	cmp	r2, r3
 8002242:	d2f5      	bcs.n	8002230 <HomeAxis+0x3bc>
			STOP_TIM(Z);
 8002244:	4b17      	ldr	r3, [pc, #92]	@ (80022a4 <HomeAxis+0x430>)
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	4b16      	ldr	r3, [pc, #88]	@ (80022a4 <HomeAxis+0x430>)
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	2101      	movs	r1, #1
 8002250:	438a      	bics	r2, r1
 8002252:	601a      	str	r2, [r3, #0]
			MMtoStep[Z] = Limit[Z] / LimitReal[Z];
 8002254:	4b14      	ldr	r3, [pc, #80]	@ (80022a8 <HomeAxis+0x434>)
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	0018      	movs	r0, r3
 800225a:	f7fe fe2f 	bl	8000ebc <__aeabi_ui2f>
 800225e:	1c02      	adds	r2, r0, #0
 8002260:	4b12      	ldr	r3, [pc, #72]	@ (80022ac <HomeAxis+0x438>)
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	1c19      	adds	r1, r3, #0
 8002266:	1c10      	adds	r0, r2, #0
 8002268:	f7fe f82c 	bl	80002c4 <__aeabi_fdiv>
 800226c:	1c03      	adds	r3, r0, #0
 800226e:	1c1a      	adds	r2, r3, #0
 8002270:	4b0f      	ldr	r3, [pc, #60]	@ (80022b0 <HomeAxis+0x43c>)
 8002272:	609a      	str	r2, [r3, #8]
			CurPos[Z] = 0;
 8002274:	4b0f      	ldr	r3, [pc, #60]	@ (80022b4 <HomeAxis+0x440>)
 8002276:	2200      	movs	r2, #0
 8002278:	609a      	str	r2, [r3, #8]
			RST_MFLAG(Z);
 800227a:	2304      	movs	r3, #4
 800227c:	b25b      	sxtb	r3, r3
 800227e:	43db      	mvns	r3, r3
 8002280:	b25b      	sxtb	r3, r3
 8002282:	4a0d      	ldr	r2, [pc, #52]	@ (80022b8 <HomeAxis+0x444>)
 8002284:	7812      	ldrb	r2, [r2, #0]
 8002286:	b2d2      	uxtb	r2, r2
 8002288:	b252      	sxtb	r2, r2
 800228a:	4013      	ands	r3, r2
 800228c:	b25b      	sxtb	r3, r3
 800228e:	b2da      	uxtb	r2, r3
 8002290:	4b09      	ldr	r3, [pc, #36]	@ (80022b8 <HomeAxis+0x444>)
 8002292:	701a      	strb	r2, [r3, #0]
			break;
 8002294:	e000      	b.n	8002298 <HomeAxis+0x424>
			break;
 8002296:	46c0      	nop			@ (mov r8, r8)
	}
}
 8002298:	46c0      	nop			@ (mov r8, r8)
 800229a:	46bd      	mov	sp, r7
 800229c:	b002      	add	sp, #8
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	20000024 	.word	0x20000024
 80022a4:	20000000 	.word	0x20000000
 80022a8:	2000004c 	.word	0x2000004c
 80022ac:	2000000c 	.word	0x2000000c
 80022b0:	20000058 	.word	0x20000058
 80022b4:	200002b8 	.word	0x200002b8
 80022b8:	200002e7 	.word	0x200002e7

080022bc <StopCheck>:
  * @brief Checks if the requested value has been reached and stops movement if so
  * @param A	The axis to apply to
  * @retval None
  */
void StopCheck(Axis A)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	0002      	movs	r2, r0
 80022c4:	1dfb      	adds	r3, r7, #7
 80022c6:	701a      	strb	r2, [r3, #0]
	// Direction determines the logical operation that determines if we've met or passed the requested position
	if(Dir[A])
 80022c8:	1dfb      	adds	r3, r7, #7
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	4a34      	ldr	r2, [pc, #208]	@ (80023a0 <StopCheck+0xe4>)
 80022ce:	5cd3      	ldrb	r3, [r2, r3]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d030      	beq.n	8002336 <StopCheck+0x7a>
	{
	  if(CurPos[A] <= ReqPos[A])
 80022d4:	1dfb      	adds	r3, r7, #7
 80022d6:	781a      	ldrb	r2, [r3, #0]
 80022d8:	4b32      	ldr	r3, [pc, #200]	@ (80023a4 <StopCheck+0xe8>)
 80022da:	0092      	lsls	r2, r2, #2
 80022dc:	58d2      	ldr	r2, [r2, r3]
 80022de:	1dfb      	adds	r3, r7, #7
 80022e0:	7819      	ldrb	r1, [r3, #0]
 80022e2:	4b31      	ldr	r3, [pc, #196]	@ (80023a8 <StopCheck+0xec>)
 80022e4:	0089      	lsls	r1, r1, #2
 80022e6:	58cb      	ldr	r3, [r1, r3]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d854      	bhi.n	8002396 <StopCheck+0xda>
	  {
		  STOP_TIM(A);
 80022ec:	1dfb      	adds	r3, r7, #7
 80022ee:	781a      	ldrb	r2, [r3, #0]
 80022f0:	4b2e      	ldr	r3, [pc, #184]	@ (80023ac <StopCheck+0xf0>)
 80022f2:	0092      	lsls	r2, r2, #2
 80022f4:	58d3      	ldr	r3, [r2, r3]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	1dfb      	adds	r3, r7, #7
 80022fa:	7819      	ldrb	r1, [r3, #0]
 80022fc:	4b2b      	ldr	r3, [pc, #172]	@ (80023ac <StopCheck+0xf0>)
 80022fe:	0089      	lsls	r1, r1, #2
 8002300:	58cb      	ldr	r3, [r1, r3]
 8002302:	2101      	movs	r1, #1
 8002304:	438a      	bics	r2, r1
 8002306:	601a      	str	r2, [r3, #0]
		  AccVal[A] = 0;
 8002308:	1dfb      	adds	r3, r7, #7
 800230a:	781a      	ldrb	r2, [r3, #0]
 800230c:	4b28      	ldr	r3, [pc, #160]	@ (80023b0 <StopCheck+0xf4>)
 800230e:	0052      	lsls	r2, r2, #1
 8002310:	2100      	movs	r1, #0
 8002312:	52d1      	strh	r1, [r2, r3]
		  RST_MFLAG(A);
 8002314:	1dfb      	adds	r3, r7, #7
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	4a26      	ldr	r2, [pc, #152]	@ (80023b4 <StopCheck+0xf8>)
 800231a:	5cd3      	ldrb	r3, [r2, r3]
 800231c:	b25b      	sxtb	r3, r3
 800231e:	43db      	mvns	r3, r3
 8002320:	b25b      	sxtb	r3, r3
 8002322:	4a25      	ldr	r2, [pc, #148]	@ (80023b8 <StopCheck+0xfc>)
 8002324:	7812      	ldrb	r2, [r2, #0]
 8002326:	b2d2      	uxtb	r2, r2
 8002328:	b252      	sxtb	r2, r2
 800232a:	4013      	ands	r3, r2
 800232c:	b25b      	sxtb	r3, r3
 800232e:	b2da      	uxtb	r2, r3
 8002330:	4b21      	ldr	r3, [pc, #132]	@ (80023b8 <StopCheck+0xfc>)
 8002332:	701a      	strb	r2, [r3, #0]
		  STOP_TIM(A);
		  AccVal[A] = 0;
		  RST_MFLAG(A);
	  }
	}
}
 8002334:	e02f      	b.n	8002396 <StopCheck+0xda>
	  if(CurPos[A] >= ReqPos[A])
 8002336:	1dfb      	adds	r3, r7, #7
 8002338:	781a      	ldrb	r2, [r3, #0]
 800233a:	4b1a      	ldr	r3, [pc, #104]	@ (80023a4 <StopCheck+0xe8>)
 800233c:	0092      	lsls	r2, r2, #2
 800233e:	58d2      	ldr	r2, [r2, r3]
 8002340:	1dfb      	adds	r3, r7, #7
 8002342:	7819      	ldrb	r1, [r3, #0]
 8002344:	4b18      	ldr	r3, [pc, #96]	@ (80023a8 <StopCheck+0xec>)
 8002346:	0089      	lsls	r1, r1, #2
 8002348:	58cb      	ldr	r3, [r1, r3]
 800234a:	429a      	cmp	r2, r3
 800234c:	d323      	bcc.n	8002396 <StopCheck+0xda>
		  STOP_TIM(A);
 800234e:	1dfb      	adds	r3, r7, #7
 8002350:	781a      	ldrb	r2, [r3, #0]
 8002352:	4b16      	ldr	r3, [pc, #88]	@ (80023ac <StopCheck+0xf0>)
 8002354:	0092      	lsls	r2, r2, #2
 8002356:	58d3      	ldr	r3, [r2, r3]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	1dfb      	adds	r3, r7, #7
 800235c:	7819      	ldrb	r1, [r3, #0]
 800235e:	4b13      	ldr	r3, [pc, #76]	@ (80023ac <StopCheck+0xf0>)
 8002360:	0089      	lsls	r1, r1, #2
 8002362:	58cb      	ldr	r3, [r1, r3]
 8002364:	2101      	movs	r1, #1
 8002366:	438a      	bics	r2, r1
 8002368:	601a      	str	r2, [r3, #0]
		  AccVal[A] = 0;
 800236a:	1dfb      	adds	r3, r7, #7
 800236c:	781a      	ldrb	r2, [r3, #0]
 800236e:	4b10      	ldr	r3, [pc, #64]	@ (80023b0 <StopCheck+0xf4>)
 8002370:	0052      	lsls	r2, r2, #1
 8002372:	2100      	movs	r1, #0
 8002374:	52d1      	strh	r1, [r2, r3]
		  RST_MFLAG(A);
 8002376:	1dfb      	adds	r3, r7, #7
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	4a0e      	ldr	r2, [pc, #56]	@ (80023b4 <StopCheck+0xf8>)
 800237c:	5cd3      	ldrb	r3, [r2, r3]
 800237e:	b25b      	sxtb	r3, r3
 8002380:	43db      	mvns	r3, r3
 8002382:	b25b      	sxtb	r3, r3
 8002384:	4a0c      	ldr	r2, [pc, #48]	@ (80023b8 <StopCheck+0xfc>)
 8002386:	7812      	ldrb	r2, [r2, #0]
 8002388:	b2d2      	uxtb	r2, r2
 800238a:	b252      	sxtb	r2, r2
 800238c:	4013      	ands	r3, r2
 800238e:	b25b      	sxtb	r3, r3
 8002390:	b2da      	uxtb	r2, r3
 8002392:	4b09      	ldr	r3, [pc, #36]	@ (80023b8 <StopCheck+0xfc>)
 8002394:	701a      	strb	r2, [r3, #0]
}
 8002396:	46c0      	nop			@ (mov r8, r8)
 8002398:	46bd      	mov	sp, r7
 800239a:	b002      	add	sp, #8
 800239c:	bd80      	pop	{r7, pc}
 800239e:	46c0      	nop			@ (mov r8, r8)
 80023a0:	200002dc 	.word	0x200002dc
 80023a4:	200002b8 	.word	0x200002b8
 80023a8:	200002c4 	.word	0x200002c4
 80023ac:	20000000 	.word	0x20000000
 80023b0:	200002e0 	.word	0x200002e0
 80023b4:	08006250 	.word	0x08006250
 80023b8:	200002e7 	.word	0x200002e7

080023bc <RequestCheck>:
  * @brief Checks if the requested value has changed and sets flags if so
  * @param A	The axis to apply to
  * @retval None
  */
void RequestCheck(Axis A)
{
 80023bc:	b590      	push	{r4, r7, lr}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	0002      	movs	r2, r0
 80023c4:	1dfb      	adds	r3, r7, #7
 80023c6:	701a      	strb	r2, [r3, #0]
	// If the position is off by more than one half a MM, set movement flags
	if(abs((int)CurPos[A] - (int)ReqPos[A]) > (MMtoStep[A] / 2))
 80023c8:	1dfb      	adds	r3, r7, #7
 80023ca:	781a      	ldrb	r2, [r3, #0]
 80023cc:	4b3c      	ldr	r3, [pc, #240]	@ (80024c0 <RequestCheck+0x104>)
 80023ce:	0092      	lsls	r2, r2, #2
 80023d0:	58d3      	ldr	r3, [r2, r3]
 80023d2:	0019      	movs	r1, r3
 80023d4:	1dfb      	adds	r3, r7, #7
 80023d6:	781a      	ldrb	r2, [r3, #0]
 80023d8:	4b3a      	ldr	r3, [pc, #232]	@ (80024c4 <RequestCheck+0x108>)
 80023da:	0092      	lsls	r2, r2, #2
 80023dc:	58d3      	ldr	r3, [r2, r3]
 80023de:	1acb      	subs	r3, r1, r3
 80023e0:	17da      	asrs	r2, r3, #31
 80023e2:	189b      	adds	r3, r3, r2
 80023e4:	4053      	eors	r3, r2
 80023e6:	0018      	movs	r0, r3
 80023e8:	f7fe fd18 	bl	8000e1c <__aeabi_i2f>
 80023ec:	1c04      	adds	r4, r0, #0
 80023ee:	1dfb      	adds	r3, r7, #7
 80023f0:	781a      	ldrb	r2, [r3, #0]
 80023f2:	4b35      	ldr	r3, [pc, #212]	@ (80024c8 <RequestCheck+0x10c>)
 80023f4:	0092      	lsls	r2, r2, #2
 80023f6:	58d3      	ldr	r3, [r2, r3]
 80023f8:	2180      	movs	r1, #128	@ 0x80
 80023fa:	05c9      	lsls	r1, r1, #23
 80023fc:	1c18      	adds	r0, r3, #0
 80023fe:	f7fd ff61 	bl	80002c4 <__aeabi_fdiv>
 8002402:	1c03      	adds	r3, r0, #0
 8002404:	1c19      	adds	r1, r3, #0
 8002406:	1c20      	adds	r0, r4, #0
 8002408:	f7fd ff30 	bl	800026c <__aeabi_fcmpgt>
 800240c:	1e03      	subs	r3, r0, #0
 800240e:	d100      	bne.n	8002412 <RequestCheck+0x56>
	  SET_MFLAG(A);

	  RST_TIM(A);
	  LIM_TIM(A) =  GET_DELAY(A);
	}
}
 8002410:	e052      	b.n	80024b8 <RequestCheck+0xfc>
	  if(CurPos[A] > ReqPos[A])
 8002412:	1dfb      	adds	r3, r7, #7
 8002414:	781a      	ldrb	r2, [r3, #0]
 8002416:	4b2a      	ldr	r3, [pc, #168]	@ (80024c0 <RequestCheck+0x104>)
 8002418:	0092      	lsls	r2, r2, #2
 800241a:	58d2      	ldr	r2, [r2, r3]
 800241c:	1dfb      	adds	r3, r7, #7
 800241e:	7819      	ldrb	r1, [r3, #0]
 8002420:	4b28      	ldr	r3, [pc, #160]	@ (80024c4 <RequestCheck+0x108>)
 8002422:	0089      	lsls	r1, r1, #2
 8002424:	58cb      	ldr	r3, [r1, r3]
 8002426:	429a      	cmp	r2, r3
 8002428:	d905      	bls.n	8002436 <RequestCheck+0x7a>
		  Dir[A] = Neg;
 800242a:	1dfb      	adds	r3, r7, #7
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	4a27      	ldr	r2, [pc, #156]	@ (80024cc <RequestCheck+0x110>)
 8002430:	2101      	movs	r1, #1
 8002432:	54d1      	strb	r1, [r2, r3]
 8002434:	e004      	b.n	8002440 <RequestCheck+0x84>
		  Dir[A] = Pos;
 8002436:	1dfb      	adds	r3, r7, #7
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	4a24      	ldr	r2, [pc, #144]	@ (80024cc <RequestCheck+0x110>)
 800243c:	2100      	movs	r1, #0
 800243e:	54d1      	strb	r1, [r2, r3]
	  SetDirection(A);
 8002440:	1dfb      	adds	r3, r7, #7
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	0018      	movs	r0, r3
 8002446:	f7ff fbd5 	bl	8001bf4 <SetDirection>
	  AccVal[A] = ACC_START;
 800244a:	1dfb      	adds	r3, r7, #7
 800244c:	781a      	ldrb	r2, [r3, #0]
 800244e:	4b20      	ldr	r3, [pc, #128]	@ (80024d0 <RequestCheck+0x114>)
 8002450:	0052      	lsls	r2, r2, #1
 8002452:	2100      	movs	r1, #0
 8002454:	52d1      	strh	r1, [r2, r3]
	  Stamp[A] = CurPos[A];
 8002456:	1dfb      	adds	r3, r7, #7
 8002458:	7819      	ldrb	r1, [r3, #0]
 800245a:	1dfb      	adds	r3, r7, #7
 800245c:	781a      	ldrb	r2, [r3, #0]
 800245e:	4b18      	ldr	r3, [pc, #96]	@ (80024c0 <RequestCheck+0x104>)
 8002460:	0089      	lsls	r1, r1, #2
 8002462:	58c9      	ldr	r1, [r1, r3]
 8002464:	4b1b      	ldr	r3, [pc, #108]	@ (80024d4 <RequestCheck+0x118>)
 8002466:	0092      	lsls	r2, r2, #2
 8002468:	50d1      	str	r1, [r2, r3]
	  SET_MFLAG(A);
 800246a:	1dfb      	adds	r3, r7, #7
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	4a1a      	ldr	r2, [pc, #104]	@ (80024d8 <RequestCheck+0x11c>)
 8002470:	5cd2      	ldrb	r2, [r2, r3]
 8002472:	4b1a      	ldr	r3, [pc, #104]	@ (80024dc <RequestCheck+0x120>)
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	b2db      	uxtb	r3, r3
 8002478:	4313      	orrs	r3, r2
 800247a:	b2da      	uxtb	r2, r3
 800247c:	4b17      	ldr	r3, [pc, #92]	@ (80024dc <RequestCheck+0x120>)
 800247e:	701a      	strb	r2, [r3, #0]
	  RST_TIM(A);
 8002480:	1dfb      	adds	r3, r7, #7
 8002482:	781a      	ldrb	r2, [r3, #0]
 8002484:	4b16      	ldr	r3, [pc, #88]	@ (80024e0 <RequestCheck+0x124>)
 8002486:	0092      	lsls	r2, r2, #2
 8002488:	58d3      	ldr	r3, [r2, r3]
 800248a:	2200      	movs	r2, #0
 800248c:	625a      	str	r2, [r3, #36]	@ 0x24
	  LIM_TIM(A) =  GET_DELAY(A);
 800248e:	1dfb      	adds	r3, r7, #7
 8002490:	781a      	ldrb	r2, [r3, #0]
 8002492:	4b0f      	ldr	r3, [pc, #60]	@ (80024d0 <RequestCheck+0x114>)
 8002494:	0052      	lsls	r2, r2, #1
 8002496:	5ad3      	ldrh	r3, [r2, r3]
 8002498:	001a      	movs	r2, r3
 800249a:	2396      	movs	r3, #150	@ 0x96
 800249c:	1a9a      	subs	r2, r3, r2
 800249e:	0013      	movs	r3, r2
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	189b      	adds	r3, r3, r2
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	4a0f      	ldr	r2, [pc, #60]	@ (80024e4 <RequestCheck+0x128>)
 80024a8:	1899      	adds	r1, r3, r2
 80024aa:	1dfb      	adds	r3, r7, #7
 80024ac:	781a      	ldrb	r2, [r3, #0]
 80024ae:	4b0c      	ldr	r3, [pc, #48]	@ (80024e0 <RequestCheck+0x124>)
 80024b0:	0092      	lsls	r2, r2, #2
 80024b2:	58d3      	ldr	r3, [r2, r3]
 80024b4:	000a      	movs	r2, r1
 80024b6:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80024b8:	46c0      	nop			@ (mov r8, r8)
 80024ba:	46bd      	mov	sp, r7
 80024bc:	b003      	add	sp, #12
 80024be:	bd90      	pop	{r4, r7, pc}
 80024c0:	200002b8 	.word	0x200002b8
 80024c4:	200002c4 	.word	0x200002c4
 80024c8:	20000058 	.word	0x20000058
 80024cc:	200002dc 	.word	0x200002dc
 80024d0:	200002e0 	.word	0x200002e0
 80024d4:	200002d0 	.word	0x200002d0
 80024d8:	08006250 	.word	0x08006250
 80024dc:	200002e7 	.word	0x200002e7
 80024e0:	20000000 	.word	0x20000000
 80024e4:	000005dc 	.word	0x000005dc

080024e8 <GetSPICrd>:
  * @brief Converts the SPI mm values to step values
  * @param A	The axis to apply to
  * @retval The step value
  */
uint32_t GetSPICrd(Axis A)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	0002      	movs	r2, r0
 80024f0:	1dfb      	adds	r3, r7, #7
 80024f2:	701a      	strb	r2, [r3, #0]
	return (uint32_t)(((RX_Buffer[(2*A) + 2] & 0x7) << 8) + RX_Buffer[(2*A) + 3]) * MMtoStep[A];
 80024f4:	1dfb      	adds	r3, r7, #7
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	3301      	adds	r3, #1
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	4a10      	ldr	r2, [pc, #64]	@ (8002540 <GetSPICrd+0x58>)
 80024fe:	5cd3      	ldrb	r3, [r2, r3]
 8002500:	021a      	lsls	r2, r3, #8
 8002502:	23e0      	movs	r3, #224	@ 0xe0
 8002504:	00db      	lsls	r3, r3, #3
 8002506:	4013      	ands	r3, r2
 8002508:	1dfa      	adds	r2, r7, #7
 800250a:	7812      	ldrb	r2, [r2, #0]
 800250c:	0052      	lsls	r2, r2, #1
 800250e:	3203      	adds	r2, #3
 8002510:	490b      	ldr	r1, [pc, #44]	@ (8002540 <GetSPICrd+0x58>)
 8002512:	5c8a      	ldrb	r2, [r1, r2]
 8002514:	189b      	adds	r3, r3, r2
 8002516:	0018      	movs	r0, r3
 8002518:	f7fe fcd0 	bl	8000ebc <__aeabi_ui2f>
 800251c:	1dfb      	adds	r3, r7, #7
 800251e:	781a      	ldrb	r2, [r3, #0]
 8002520:	4b08      	ldr	r3, [pc, #32]	@ (8002544 <GetSPICrd+0x5c>)
 8002522:	0092      	lsls	r2, r2, #2
 8002524:	58d3      	ldr	r3, [r2, r3]
 8002526:	1c19      	adds	r1, r3, #0
 8002528:	f7fe f89a 	bl	8000660 <__aeabi_fmul>
 800252c:	1c03      	adds	r3, r0, #0
 800252e:	1c18      	adds	r0, r3, #0
 8002530:	f7fd feb0 	bl	8000294 <__aeabi_f2uiz>
 8002534:	0003      	movs	r3, r0
}
 8002536:	0018      	movs	r0, r3
 8002538:	46bd      	mov	sp, r7
 800253a:	b002      	add	sp, #8
 800253c:	bd80      	pop	{r7, pc}
 800253e:	46c0      	nop			@ (mov r8, r8)
 8002540:	200002a4 	.word	0x200002a4
 8002544:	20000058 	.word	0x20000058

08002548 <ParseGCode>:
  * @brief Determines the GCode operation and executes it
  * @param None
  * @retval None
  */
void ParseGCode(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
	switch((GcodeCMD)RX_Buffer[0])
 800254e:	4b57      	ldr	r3, [pc, #348]	@ (80026ac <ParseGCode+0x164>)
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	2b09      	cmp	r3, #9
 8002554:	d100      	bne.n	8002558 <ParseGCode+0x10>
 8002556:	e06e      	b.n	8002636 <ParseGCode+0xee>
 8002558:	dd00      	ble.n	800255c <ParseGCode+0x14>
 800255a:	e070      	b.n	800263e <ParseGCode+0xf6>
 800255c:	2b02      	cmp	r3, #2
 800255e:	d021      	beq.n	80025a4 <ParseGCode+0x5c>
 8002560:	dc6d      	bgt.n	800263e <ParseGCode+0xf6>
 8002562:	2b00      	cmp	r3, #0
 8002564:	d002      	beq.n	800256c <ParseGCode+0x24>
 8002566:	2b01      	cmp	r3, #1
 8002568:	d009      	beq.n	800257e <ParseGCode+0x36>
		case Err:
			MainState = Init;
			break;

		default:
			break;
 800256a:	e068      	b.n	800263e <ParseGCode+0xf6>
			SET_HMEFLAG();
 800256c:	4b50      	ldr	r3, [pc, #320]	@ (80026b0 <ParseGCode+0x168>)
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2220      	movs	r2, #32
 8002574:	4313      	orrs	r3, r2
 8002576:	b2da      	uxtb	r2, r3
 8002578:	4b4d      	ldr	r3, [pc, #308]	@ (80026b0 <ParseGCode+0x168>)
 800257a:	701a      	strb	r2, [r3, #0]
			break;
 800257c:	e060      	b.n	8002640 <ParseGCode+0xf8>
			ReqPos[X] = GetSPICrd(X);
 800257e:	2000      	movs	r0, #0
 8002580:	f7ff ffb2 	bl	80024e8 <GetSPICrd>
 8002584:	0002      	movs	r2, r0
 8002586:	4b4b      	ldr	r3, [pc, #300]	@ (80026b4 <ParseGCode+0x16c>)
 8002588:	601a      	str	r2, [r3, #0]
			ReqPos[Y] = GetSPICrd(Y);
 800258a:	2001      	movs	r0, #1
 800258c:	f7ff ffac 	bl	80024e8 <GetSPICrd>
 8002590:	0002      	movs	r2, r0
 8002592:	4b48      	ldr	r3, [pc, #288]	@ (80026b4 <ParseGCode+0x16c>)
 8002594:	605a      	str	r2, [r3, #4]
			ReqPos[Z] = GetSPICrd(Z);
 8002596:	2002      	movs	r0, #2
 8002598:	f7ff ffa6 	bl	80024e8 <GetSPICrd>
 800259c:	0002      	movs	r2, r0
 800259e:	4b45      	ldr	r3, [pc, #276]	@ (80026b4 <ParseGCode+0x16c>)
 80025a0:	609a      	str	r2, [r3, #8]
			break;
 80025a2:	e04d      	b.n	8002640 <ParseGCode+0xf8>
			if(RX_Buffer[2] & 0x80)
 80025a4:	4b41      	ldr	r3, [pc, #260]	@ (80026ac <ParseGCode+0x164>)
 80025a6:	789b      	ldrb	r3, [r3, #2]
 80025a8:	b25b      	sxtb	r3, r3
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	da09      	bge.n	80025c2 <ParseGCode+0x7a>
				ReqPos[X] -= GetSPICrd(X);
 80025ae:	2000      	movs	r0, #0
 80025b0:	f7ff ff9a 	bl	80024e8 <GetSPICrd>
 80025b4:	0002      	movs	r2, r0
 80025b6:	4b3f      	ldr	r3, [pc, #252]	@ (80026b4 <ParseGCode+0x16c>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	1a9a      	subs	r2, r3, r2
 80025bc:	4b3d      	ldr	r3, [pc, #244]	@ (80026b4 <ParseGCode+0x16c>)
 80025be:	601a      	str	r2, [r3, #0]
 80025c0:	e008      	b.n	80025d4 <ParseGCode+0x8c>
				ReqPos[X] += GetSPICrd(X);
 80025c2:	2000      	movs	r0, #0
 80025c4:	f7ff ff90 	bl	80024e8 <GetSPICrd>
 80025c8:	0002      	movs	r2, r0
 80025ca:	4b3a      	ldr	r3, [pc, #232]	@ (80026b4 <ParseGCode+0x16c>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	18d2      	adds	r2, r2, r3
 80025d0:	4b38      	ldr	r3, [pc, #224]	@ (80026b4 <ParseGCode+0x16c>)
 80025d2:	601a      	str	r2, [r3, #0]
			if(RX_Buffer[4] & 0x80)
 80025d4:	4b35      	ldr	r3, [pc, #212]	@ (80026ac <ParseGCode+0x164>)
 80025d6:	791b      	ldrb	r3, [r3, #4]
 80025d8:	b25b      	sxtb	r3, r3
 80025da:	2b00      	cmp	r3, #0
 80025dc:	da09      	bge.n	80025f2 <ParseGCode+0xaa>
				ReqPos[Y] -= GetSPICrd(Y);
 80025de:	2001      	movs	r0, #1
 80025e0:	f7ff ff82 	bl	80024e8 <GetSPICrd>
 80025e4:	0002      	movs	r2, r0
 80025e6:	4b33      	ldr	r3, [pc, #204]	@ (80026b4 <ParseGCode+0x16c>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	1a9a      	subs	r2, r3, r2
 80025ec:	4b31      	ldr	r3, [pc, #196]	@ (80026b4 <ParseGCode+0x16c>)
 80025ee:	605a      	str	r2, [r3, #4]
 80025f0:	e008      	b.n	8002604 <ParseGCode+0xbc>
				ReqPos[Y] += GetSPICrd(Y);
 80025f2:	2001      	movs	r0, #1
 80025f4:	f7ff ff78 	bl	80024e8 <GetSPICrd>
 80025f8:	0002      	movs	r2, r0
 80025fa:	4b2e      	ldr	r3, [pc, #184]	@ (80026b4 <ParseGCode+0x16c>)
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	18d2      	adds	r2, r2, r3
 8002600:	4b2c      	ldr	r3, [pc, #176]	@ (80026b4 <ParseGCode+0x16c>)
 8002602:	605a      	str	r2, [r3, #4]
			if(RX_Buffer[6] & 0x80)
 8002604:	4b29      	ldr	r3, [pc, #164]	@ (80026ac <ParseGCode+0x164>)
 8002606:	799b      	ldrb	r3, [r3, #6]
 8002608:	b25b      	sxtb	r3, r3
 800260a:	2b00      	cmp	r3, #0
 800260c:	da09      	bge.n	8002622 <ParseGCode+0xda>
				ReqPos[Z] -= GetSPICrd(Z);
 800260e:	2002      	movs	r0, #2
 8002610:	f7ff ff6a 	bl	80024e8 <GetSPICrd>
 8002614:	0002      	movs	r2, r0
 8002616:	4b27      	ldr	r3, [pc, #156]	@ (80026b4 <ParseGCode+0x16c>)
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	1a9a      	subs	r2, r3, r2
 800261c:	4b25      	ldr	r3, [pc, #148]	@ (80026b4 <ParseGCode+0x16c>)
 800261e:	609a      	str	r2, [r3, #8]
			break;
 8002620:	e00e      	b.n	8002640 <ParseGCode+0xf8>
				ReqPos[Z] += GetSPICrd(Z);
 8002622:	2002      	movs	r0, #2
 8002624:	f7ff ff60 	bl	80024e8 <GetSPICrd>
 8002628:	0002      	movs	r2, r0
 800262a:	4b22      	ldr	r3, [pc, #136]	@ (80026b4 <ParseGCode+0x16c>)
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	18d2      	adds	r2, r2, r3
 8002630:	4b20      	ldr	r3, [pc, #128]	@ (80026b4 <ParseGCode+0x16c>)
 8002632:	609a      	str	r2, [r3, #8]
			break;
 8002634:	e004      	b.n	8002640 <ParseGCode+0xf8>
			MainState = Init;
 8002636:	4b20      	ldr	r3, [pc, #128]	@ (80026b8 <ParseGCode+0x170>)
 8002638:	2200      	movs	r2, #0
 800263a:	701a      	strb	r2, [r3, #0]
			break;
 800263c:	e000      	b.n	8002640 <ParseGCode+0xf8>
			break;
 800263e:	46c0      	nop			@ (mov r8, r8)

	}

	// Assure that requested position did not overflow or go out of range
	for(Axis A = X; A < END; A++)
 8002640:	1dfb      	adds	r3, r7, #7
 8002642:	2200      	movs	r2, #0
 8002644:	701a      	strb	r2, [r3, #0]
 8002646:	e028      	b.n	800269a <ParseGCode+0x152>
		if(ReqPos[A] & LIM_POS)
 8002648:	1dfb      	adds	r3, r7, #7
 800264a:	781a      	ldrb	r2, [r3, #0]
 800264c:	4b19      	ldr	r3, [pc, #100]	@ (80026b4 <ParseGCode+0x16c>)
 800264e:	0092      	lsls	r2, r2, #2
 8002650:	58d3      	ldr	r3, [r2, r3]
 8002652:	2b00      	cmp	r3, #0
 8002654:	da06      	bge.n	8002664 <ParseGCode+0x11c>
			ReqPos[A] = 0;
 8002656:	1dfb      	adds	r3, r7, #7
 8002658:	781a      	ldrb	r2, [r3, #0]
 800265a:	4b16      	ldr	r3, [pc, #88]	@ (80026b4 <ParseGCode+0x16c>)
 800265c:	0092      	lsls	r2, r2, #2
 800265e:	2100      	movs	r1, #0
 8002660:	50d1      	str	r1, [r2, r3]
 8002662:	e015      	b.n	8002690 <ParseGCode+0x148>
		else if (ReqPos[A] > Limit[A])
 8002664:	1dfb      	adds	r3, r7, #7
 8002666:	781a      	ldrb	r2, [r3, #0]
 8002668:	4b12      	ldr	r3, [pc, #72]	@ (80026b4 <ParseGCode+0x16c>)
 800266a:	0092      	lsls	r2, r2, #2
 800266c:	58d2      	ldr	r2, [r2, r3]
 800266e:	1dfb      	adds	r3, r7, #7
 8002670:	7819      	ldrb	r1, [r3, #0]
 8002672:	4b12      	ldr	r3, [pc, #72]	@ (80026bc <ParseGCode+0x174>)
 8002674:	0089      	lsls	r1, r1, #2
 8002676:	58cb      	ldr	r3, [r1, r3]
 8002678:	429a      	cmp	r2, r3
 800267a:	d909      	bls.n	8002690 <ParseGCode+0x148>
			ReqPos[A] = Limit[A];
 800267c:	1dfb      	adds	r3, r7, #7
 800267e:	7819      	ldrb	r1, [r3, #0]
 8002680:	1dfb      	adds	r3, r7, #7
 8002682:	781a      	ldrb	r2, [r3, #0]
 8002684:	4b0d      	ldr	r3, [pc, #52]	@ (80026bc <ParseGCode+0x174>)
 8002686:	0089      	lsls	r1, r1, #2
 8002688:	58c9      	ldr	r1, [r1, r3]
 800268a:	4b0a      	ldr	r3, [pc, #40]	@ (80026b4 <ParseGCode+0x16c>)
 800268c:	0092      	lsls	r2, r2, #2
 800268e:	50d1      	str	r1, [r2, r3]
	for(Axis A = X; A < END; A++)
 8002690:	1dfb      	adds	r3, r7, #7
 8002692:	781a      	ldrb	r2, [r3, #0]
 8002694:	1dfb      	adds	r3, r7, #7
 8002696:	3201      	adds	r2, #1
 8002698:	701a      	strb	r2, [r3, #0]
 800269a:	1dfb      	adds	r3, r7, #7
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d9d2      	bls.n	8002648 <ParseGCode+0x100>
}
 80026a2:	46c0      	nop			@ (mov r8, r8)
 80026a4:	46c0      	nop			@ (mov r8, r8)
 80026a6:	46bd      	mov	sp, r7
 80026a8:	b002      	add	sp, #8
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	200002a4 	.word	0x200002a4
 80026b0:	200002e7 	.word	0x200002e7
 80026b4:	200002c4 	.word	0x200002c4
 80026b8:	200002e6 	.word	0x200002e6
 80026bc:	2000004c 	.word	0x2000004c

080026c0 <SetPIPinActive>:
  * @brief Sets the PI GPIO indicator to low to communicate activity
  * @param None
  * @retval None
  */
void SetPIPinActive(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
	GPIOWrite(SPI_OUT_GPIO_Port,  SPI_OUT_Pin,  GPIO_PIN_RESET);
 80026c4:	2380      	movs	r3, #128	@ 0x80
 80026c6:	015b      	lsls	r3, r3, #5
 80026c8:	4803      	ldr	r0, [pc, #12]	@ (80026d8 <SetPIPinActive+0x18>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	0019      	movs	r1, r3
 80026ce:	f7ff f9fd 	bl	8001acc <GPIOWrite>
}
 80026d2:	46c0      	nop			@ (mov r8, r8)
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	48000400 	.word	0x48000400

080026dc <SetPIPinIdle>:
  * @brief Sets the PI GPIO indicator to high to communicate inactivity
  * @param None
  * @retval None
  */
void SetPIPinIdle(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
	GPIOWrite(SPI_OUT_GPIO_Port,  SPI_OUT_Pin,  GPIO_PIN_SET);
 80026e0:	2380      	movs	r3, #128	@ 0x80
 80026e2:	015b      	lsls	r3, r3, #5
 80026e4:	4803      	ldr	r0, [pc, #12]	@ (80026f4 <SetPIPinIdle+0x18>)
 80026e6:	2201      	movs	r2, #1
 80026e8:	0019      	movs	r1, r3
 80026ea:	f7ff f9ef 	bl	8001acc <GPIOWrite>
}
 80026ee:	46c0      	nop			@ (mov r8, r8)
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	48000400 	.word	0x48000400

080026f8 <ReadPIPin>:
  * @brief Reads the PI GPIO indicator
  * @param None
  * @retval None
  */
int ReadPIPin(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
	return GPIORead(SPI_IN_GPIO_Port,  SPI_IN_Pin);
 80026fc:	4b04      	ldr	r3, [pc, #16]	@ (8002710 <ReadPIPin+0x18>)
 80026fe:	2140      	movs	r1, #64	@ 0x40
 8002700:	0018      	movs	r0, r3
 8002702:	f7ff fa00 	bl	8001b06 <GPIORead>
 8002706:	0003      	movs	r3, r0
}
 8002708:	0018      	movs	r0, r3
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	46c0      	nop			@ (mov r8, r8)
 8002710:	48000400 	.word	0x48000400

08002714 <HAL_TIM_PeriodElapsedCallback>:
 * 		Interrupt functions
 *
 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
	// no switch here because of compile reduction :(

	// Check the timer instance and toggle the appropriate axis
	// Additionally increment and evaluate the current position

	if(htim->Instance == AxisTimers[X])
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	4b51      	ldr	r3, [pc, #324]	@ (8002868 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	429a      	cmp	r2, r3
 8002726:	d13b      	bne.n	80027a0 <HAL_TIM_PeriodElapsedCallback+0x8c>
	{
		if(*(HallX[Dir[X]]) > HALL_LOW )
 8002728:	4b50      	ldr	r3, [pc, #320]	@ (800286c <HAL_TIM_PeriodElapsedCallback+0x158>)
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	001a      	movs	r2, r3
 800272e:	4b50      	ldr	r3, [pc, #320]	@ (8002870 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8002730:	0092      	lsls	r2, r2, #2
 8002732:	58d3      	ldr	r3, [r2, r3]
 8002734:	881a      	ldrh	r2, [r3, #0]
 8002736:	2380      	movs	r3, #128	@ 0x80
 8002738:	011b      	lsls	r3, r3, #4
 800273a:	429a      	cmp	r2, r3
 800273c:	d306      	bcc.n	800274c <HAL_TIM_PeriodElapsedCallback+0x38>
			GPIOToggle(pulX1_GPIO_Port, pulX1_Pin);
 800273e:	2380      	movs	r3, #128	@ 0x80
 8002740:	00db      	lsls	r3, r3, #3
 8002742:	4a4c      	ldr	r2, [pc, #304]	@ (8002874 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8002744:	0019      	movs	r1, r3
 8002746:	0010      	movs	r0, r2
 8002748:	f7ff f9f1 	bl	8001b2e <GPIOToggle>

		if(*(HallX2[Dir[X]]) > HALL_LOW )
 800274c:	4b47      	ldr	r3, [pc, #284]	@ (800286c <HAL_TIM_PeriodElapsedCallback+0x158>)
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	001a      	movs	r2, r3
 8002752:	4b49      	ldr	r3, [pc, #292]	@ (8002878 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8002754:	0092      	lsls	r2, r2, #2
 8002756:	58d3      	ldr	r3, [r2, r3]
 8002758:	881a      	ldrh	r2, [r3, #0]
 800275a:	2380      	movs	r3, #128	@ 0x80
 800275c:	011b      	lsls	r3, r3, #4
 800275e:	429a      	cmp	r2, r3
 8002760:	d304      	bcc.n	800276c <HAL_TIM_PeriodElapsedCallback+0x58>
			GPIOToggle(pulX2_GPIO_Port, pulX2_Pin);
 8002762:	4b46      	ldr	r3, [pc, #280]	@ (800287c <HAL_TIM_PeriodElapsedCallback+0x168>)
 8002764:	2180      	movs	r1, #128	@ 0x80
 8002766:	0018      	movs	r0, r3
 8002768:	f7ff f9e1 	bl	8001b2e <GPIOToggle>

		if(Dir[X])
 800276c:	4b3f      	ldr	r3, [pc, #252]	@ (800286c <HAL_TIM_PeriodElapsedCallback+0x158>)
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d005      	beq.n	8002780 <HAL_TIM_PeriodElapsedCallback+0x6c>
			CurPos[X]--;
 8002774:	4b42      	ldr	r3, [pc, #264]	@ (8002880 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	1e5a      	subs	r2, r3, #1
 800277a:	4b41      	ldr	r3, [pc, #260]	@ (8002880 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800277c:	601a      	str	r2, [r3, #0]
 800277e:	e004      	b.n	800278a <HAL_TIM_PeriodElapsedCallback+0x76>
		else
			CurPos[X]++;
 8002780:	4b3f      	ldr	r3, [pc, #252]	@ (8002880 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	1c5a      	adds	r2, r3, #1
 8002786:	4b3e      	ldr	r3, [pc, #248]	@ (8002880 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8002788:	601a      	str	r2, [r3, #0]


		if(CurPos[X] & LIM_POS)
 800278a:	4b3d      	ldr	r3, [pc, #244]	@ (8002880 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2b00      	cmp	r3, #0
 8002790:	da02      	bge.n	8002798 <HAL_TIM_PeriodElapsedCallback+0x84>
			CurPos[X] = 0;
 8002792:	4b3b      	ldr	r3, [pc, #236]	@ (8002880 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8002794:	2200      	movs	r2, #0
 8002796:	601a      	str	r2, [r3, #0]

		StopCheck(X);
 8002798:	2000      	movs	r0, #0
 800279a:	f7ff fd8f 	bl	80022bc <StopCheck>
		//StopCheckHall(X);


		return;
 800279e:	e05f      	b.n	8002860 <HAL_TIM_PeriodElapsedCallback+0x14c>
	}

	if(htim->Instance == AxisTimers[Y])
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	4b30      	ldr	r3, [pc, #192]	@ (8002868 <HAL_TIM_PeriodElapsedCallback+0x154>)
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d129      	bne.n	8002800 <HAL_TIM_PeriodElapsedCallback+0xec>
	{
		if(*HallY[Dir[Y]] > HALL_LOW )
 80027ac:	4b2f      	ldr	r3, [pc, #188]	@ (800286c <HAL_TIM_PeriodElapsedCallback+0x158>)
 80027ae:	785b      	ldrb	r3, [r3, #1]
 80027b0:	001a      	movs	r2, r3
 80027b2:	4b34      	ldr	r3, [pc, #208]	@ (8002884 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80027b4:	0092      	lsls	r2, r2, #2
 80027b6:	58d3      	ldr	r3, [r2, r3]
 80027b8:	881a      	ldrh	r2, [r3, #0]
 80027ba:	2380      	movs	r3, #128	@ 0x80
 80027bc:	011b      	lsls	r3, r3, #4
 80027be:	429a      	cmp	r2, r3
 80027c0:	d304      	bcc.n	80027cc <HAL_TIM_PeriodElapsedCallback+0xb8>
			GPIOToggle(pulY_GPIO_Port,  pulY_Pin);
 80027c2:	4b2c      	ldr	r3, [pc, #176]	@ (8002874 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80027c4:	2110      	movs	r1, #16
 80027c6:	0018      	movs	r0, r3
 80027c8:	f7ff f9b1 	bl	8001b2e <GPIOToggle>

		if(Dir[Y])
 80027cc:	4b27      	ldr	r3, [pc, #156]	@ (800286c <HAL_TIM_PeriodElapsedCallback+0x158>)
 80027ce:	785b      	ldrb	r3, [r3, #1]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d005      	beq.n	80027e0 <HAL_TIM_PeriodElapsedCallback+0xcc>
			CurPos[Y]--;
 80027d4:	4b2a      	ldr	r3, [pc, #168]	@ (8002880 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	1e5a      	subs	r2, r3, #1
 80027da:	4b29      	ldr	r3, [pc, #164]	@ (8002880 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80027dc:	605a      	str	r2, [r3, #4]
 80027de:	e004      	b.n	80027ea <HAL_TIM_PeriodElapsedCallback+0xd6>
		else
			CurPos[Y]++;
 80027e0:	4b27      	ldr	r3, [pc, #156]	@ (8002880 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	1c5a      	adds	r2, r3, #1
 80027e6:	4b26      	ldr	r3, [pc, #152]	@ (8002880 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80027e8:	605a      	str	r2, [r3, #4]

		if(CurPos[Y] & LIM_POS)
 80027ea:	4b25      	ldr	r3, [pc, #148]	@ (8002880 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	da02      	bge.n	80027f8 <HAL_TIM_PeriodElapsedCallback+0xe4>
			CurPos[Y] = 0;
 80027f2:	4b23      	ldr	r3, [pc, #140]	@ (8002880 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	605a      	str	r2, [r3, #4]

		StopCheck(Y);
 80027f8:	2001      	movs	r0, #1
 80027fa:	f7ff fd5f 	bl	80022bc <StopCheck>
		//StopCheckHall(Y);


		return;
 80027fe:	e02f      	b.n	8002860 <HAL_TIM_PeriodElapsedCallback+0x14c>
	}

	if(htim->Instance == AxisTimers[Z])
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	4b18      	ldr	r3, [pc, #96]	@ (8002868 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	429a      	cmp	r2, r3
 800280a:	d129      	bne.n	8002860 <HAL_TIM_PeriodElapsedCallback+0x14c>
	{
		if(*HallPosZ > HALL_LOW || Dir[Z])
 800280c:	4b1e      	ldr	r3, [pc, #120]	@ (8002888 <HAL_TIM_PeriodElapsedCallback+0x174>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	881a      	ldrh	r2, [r3, #0]
 8002812:	2380      	movs	r3, #128	@ 0x80
 8002814:	011b      	lsls	r3, r3, #4
 8002816:	429a      	cmp	r2, r3
 8002818:	d203      	bcs.n	8002822 <HAL_TIM_PeriodElapsedCallback+0x10e>
 800281a:	4b14      	ldr	r3, [pc, #80]	@ (800286c <HAL_TIM_PeriodElapsedCallback+0x158>)
 800281c:	789b      	ldrb	r3, [r3, #2]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d004      	beq.n	800282c <HAL_TIM_PeriodElapsedCallback+0x118>
			GPIOToggle(pulZ_GPIO_Port,  pulZ_Pin);
 8002822:	4b14      	ldr	r3, [pc, #80]	@ (8002874 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8002824:	2108      	movs	r1, #8
 8002826:	0018      	movs	r0, r3
 8002828:	f7ff f981 	bl	8001b2e <GPIOToggle>

		if(Dir[Z])
 800282c:	4b0f      	ldr	r3, [pc, #60]	@ (800286c <HAL_TIM_PeriodElapsedCallback+0x158>)
 800282e:	789b      	ldrb	r3, [r3, #2]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d005      	beq.n	8002840 <HAL_TIM_PeriodElapsedCallback+0x12c>
			CurPos[Z]--;
 8002834:	4b12      	ldr	r3, [pc, #72]	@ (8002880 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	1e5a      	subs	r2, r3, #1
 800283a:	4b11      	ldr	r3, [pc, #68]	@ (8002880 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800283c:	609a      	str	r2, [r3, #8]
 800283e:	e004      	b.n	800284a <HAL_TIM_PeriodElapsedCallback+0x136>
		else
			CurPos[Z]++;
 8002840:	4b0f      	ldr	r3, [pc, #60]	@ (8002880 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	1c5a      	adds	r2, r3, #1
 8002846:	4b0e      	ldr	r3, [pc, #56]	@ (8002880 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8002848:	609a      	str	r2, [r3, #8]

		if(CurPos[Z] & LIM_POS)
 800284a:	4b0d      	ldr	r3, [pc, #52]	@ (8002880 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	2b00      	cmp	r3, #0
 8002850:	da02      	bge.n	8002858 <HAL_TIM_PeriodElapsedCallback+0x144>
			CurPos[Z] = 0;
 8002852:	4b0b      	ldr	r3, [pc, #44]	@ (8002880 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8002854:	2200      	movs	r2, #0
 8002856:	609a      	str	r2, [r3, #8]

		StopCheck(Z);
 8002858:	2002      	movs	r0, #2
 800285a:	f7ff fd2f 	bl	80022bc <StopCheck>
		//StopCheckHall(Z);

		return;
 800285e:	46c0      	nop			@ (mov r8, r8)
	}

}
 8002860:	46bd      	mov	sp, r7
 8002862:	b002      	add	sp, #8
 8002864:	bd80      	pop	{r7, pc}
 8002866:	46c0      	nop			@ (mov r8, r8)
 8002868:	20000000 	.word	0x20000000
 800286c:	200002dc 	.word	0x200002dc
 8002870:	2000003c 	.word	0x2000003c
 8002874:	48000400 	.word	0x48000400
 8002878:	20000034 	.word	0x20000034
 800287c:	48000800 	.word	0x48000800
 8002880:	200002b8 	.word	0x200002b8
 8002884:	20000044 	.word	0x20000044
 8002888:	20000024 	.word	0x20000024

0800288c <HAL_SPI_TxCpltCallback>:

// This is called when SPI transmit is done
void HAL_SPI_TxCpltCallback (SPI_HandleTypeDef * hspi)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
	SetPIPinActive();
 8002894:	f7ff ff14 	bl	80026c0 <SetPIPinActive>

	TXcount++;
 8002898:	4b0c      	ldr	r3, [pc, #48]	@ (80028cc <HAL_SPI_TxCpltCallback+0x40>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	1c5a      	adds	r2, r3, #1
 800289e:	4b0b      	ldr	r3, [pc, #44]	@ (80028cc <HAL_SPI_TxCpltCallback+0x40>)
 80028a0:	601a      	str	r2, [r3, #0]
	SET_TXFLAG();
 80028a2:	4b0b      	ldr	r3, [pc, #44]	@ (80028d0 <HAL_SPI_TxCpltCallback+0x44>)
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	2210      	movs	r2, #16
 80028aa:	4313      	orrs	r3, r2
 80028ac:	b2da      	uxtb	r2, r3
 80028ae:	4b08      	ldr	r3, [pc, #32]	@ (80028d0 <HAL_SPI_TxCpltCallback+0x44>)
 80028b0:	701a      	strb	r2, [r3, #0]

	// Call for another RX handler only after sending a TX response to avoid overwhelming
	HAL_SPI_Receive_IT(&hspi1, RX_Buffer, GCODE_BYTES);
 80028b2:	4908      	ldr	r1, [pc, #32]	@ (80028d4 <HAL_SPI_TxCpltCallback+0x48>)
 80028b4:	4b08      	ldr	r3, [pc, #32]	@ (80028d8 <HAL_SPI_TxCpltCallback+0x4c>)
 80028b6:	2208      	movs	r2, #8
 80028b8:	0018      	movs	r0, r3
 80028ba:	f002 f893 	bl	80049e4 <HAL_SPI_Receive_IT>

	SetPIPinIdle();
 80028be:	f7ff ff0d 	bl	80026dc <SetPIPinIdle>
}
 80028c2:	46c0      	nop			@ (mov r8, r8)
 80028c4:	46bd      	mov	sp, r7
 80028c6:	b002      	add	sp, #8
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	46c0      	nop			@ (mov r8, r8)
 80028cc:	200002b4 	.word	0x200002b4
 80028d0:	200002e7 	.word	0x200002e7
 80028d4:	200002a4 	.word	0x200002a4
 80028d8:	20000110 	.word	0x20000110

080028dc <HAL_SPI_RxCpltCallback>:

// This is called when SPI receive is done
void HAL_SPI_RxCpltCallback (SPI_HandleTypeDef * hspi)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
	SetPIPinActive();
 80028e4:	f7ff feec 	bl	80026c0 <SetPIPinActive>

	RXcount++;
 80028e8:	4b09      	ldr	r3, [pc, #36]	@ (8002910 <HAL_SPI_RxCpltCallback+0x34>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	1c5a      	adds	r2, r3, #1
 80028ee:	4b08      	ldr	r3, [pc, #32]	@ (8002910 <HAL_SPI_RxCpltCallback+0x34>)
 80028f0:	601a      	str	r2, [r3, #0]
	SET_RXFLAG();
 80028f2:	4b08      	ldr	r3, [pc, #32]	@ (8002914 <HAL_SPI_RxCpltCallback+0x38>)
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	2208      	movs	r2, #8
 80028fa:	4313      	orrs	r3, r2
 80028fc:	b2da      	uxtb	r2, r3
 80028fe:	4b05      	ldr	r3, [pc, #20]	@ (8002914 <HAL_SPI_RxCpltCallback+0x38>)
 8002900:	701a      	strb	r2, [r3, #0]

	SetPIPinIdle();
 8002902:	f7ff feeb 	bl	80026dc <SetPIPinIdle>
}
 8002906:	46c0      	nop			@ (mov r8, r8)
 8002908:	46bd      	mov	sp, r7
 800290a:	b002      	add	sp, #8
 800290c:	bd80      	pop	{r7, pc}
 800290e:	46c0      	nop			@ (mov r8, r8)
 8002910:	200002b0 	.word	0x200002b0
 8002914:	200002e7 	.word	0x200002e7

08002918 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800291c:	b672      	cpsid	i
}
 800291e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002920:	46c0      	nop			@ (mov r8, r8)
 8002922:	e7fd      	b.n	8002920 <Error_Handler+0x8>

08002924 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800292a:	4b0f      	ldr	r3, [pc, #60]	@ (8002968 <HAL_MspInit+0x44>)
 800292c:	699a      	ldr	r2, [r3, #24]
 800292e:	4b0e      	ldr	r3, [pc, #56]	@ (8002968 <HAL_MspInit+0x44>)
 8002930:	2101      	movs	r1, #1
 8002932:	430a      	orrs	r2, r1
 8002934:	619a      	str	r2, [r3, #24]
 8002936:	4b0c      	ldr	r3, [pc, #48]	@ (8002968 <HAL_MspInit+0x44>)
 8002938:	699b      	ldr	r3, [r3, #24]
 800293a:	2201      	movs	r2, #1
 800293c:	4013      	ands	r3, r2
 800293e:	607b      	str	r3, [r7, #4]
 8002940:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002942:	4b09      	ldr	r3, [pc, #36]	@ (8002968 <HAL_MspInit+0x44>)
 8002944:	69da      	ldr	r2, [r3, #28]
 8002946:	4b08      	ldr	r3, [pc, #32]	@ (8002968 <HAL_MspInit+0x44>)
 8002948:	2180      	movs	r1, #128	@ 0x80
 800294a:	0549      	lsls	r1, r1, #21
 800294c:	430a      	orrs	r2, r1
 800294e:	61da      	str	r2, [r3, #28]
 8002950:	4b05      	ldr	r3, [pc, #20]	@ (8002968 <HAL_MspInit+0x44>)
 8002952:	69da      	ldr	r2, [r3, #28]
 8002954:	2380      	movs	r3, #128	@ 0x80
 8002956:	055b      	lsls	r3, r3, #21
 8002958:	4013      	ands	r3, r2
 800295a:	603b      	str	r3, [r7, #0]
 800295c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800295e:	46c0      	nop			@ (mov r8, r8)
 8002960:	46bd      	mov	sp, r7
 8002962:	b002      	add	sp, #8
 8002964:	bd80      	pop	{r7, pc}
 8002966:	46c0      	nop			@ (mov r8, r8)
 8002968:	40021000 	.word	0x40021000

0800296c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800296c:	b590      	push	{r4, r7, lr}
 800296e:	b08d      	sub	sp, #52	@ 0x34
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002974:	241c      	movs	r4, #28
 8002976:	193b      	adds	r3, r7, r4
 8002978:	0018      	movs	r0, r3
 800297a:	2314      	movs	r3, #20
 800297c:	001a      	movs	r2, r3
 800297e:	2100      	movs	r1, #0
 8002980:	f003 fbf0 	bl	8006164 <memset>
  if(hadc->Instance==ADC1)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a4a      	ldr	r2, [pc, #296]	@ (8002ab4 <HAL_ADC_MspInit+0x148>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d000      	beq.n	8002990 <HAL_ADC_MspInit+0x24>
 800298e:	e08d      	b.n	8002aac <HAL_ADC_MspInit+0x140>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002990:	4b49      	ldr	r3, [pc, #292]	@ (8002ab8 <HAL_ADC_MspInit+0x14c>)
 8002992:	699a      	ldr	r2, [r3, #24]
 8002994:	4b48      	ldr	r3, [pc, #288]	@ (8002ab8 <HAL_ADC_MspInit+0x14c>)
 8002996:	2180      	movs	r1, #128	@ 0x80
 8002998:	0089      	lsls	r1, r1, #2
 800299a:	430a      	orrs	r2, r1
 800299c:	619a      	str	r2, [r3, #24]
 800299e:	4b46      	ldr	r3, [pc, #280]	@ (8002ab8 <HAL_ADC_MspInit+0x14c>)
 80029a0:	699a      	ldr	r2, [r3, #24]
 80029a2:	2380      	movs	r3, #128	@ 0x80
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	4013      	ands	r3, r2
 80029a8:	61bb      	str	r3, [r7, #24]
 80029aa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029ac:	4b42      	ldr	r3, [pc, #264]	@ (8002ab8 <HAL_ADC_MspInit+0x14c>)
 80029ae:	695a      	ldr	r2, [r3, #20]
 80029b0:	4b41      	ldr	r3, [pc, #260]	@ (8002ab8 <HAL_ADC_MspInit+0x14c>)
 80029b2:	2180      	movs	r1, #128	@ 0x80
 80029b4:	0309      	lsls	r1, r1, #12
 80029b6:	430a      	orrs	r2, r1
 80029b8:	615a      	str	r2, [r3, #20]
 80029ba:	4b3f      	ldr	r3, [pc, #252]	@ (8002ab8 <HAL_ADC_MspInit+0x14c>)
 80029bc:	695a      	ldr	r2, [r3, #20]
 80029be:	2380      	movs	r3, #128	@ 0x80
 80029c0:	031b      	lsls	r3, r3, #12
 80029c2:	4013      	ands	r3, r2
 80029c4:	617b      	str	r3, [r7, #20]
 80029c6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029c8:	4b3b      	ldr	r3, [pc, #236]	@ (8002ab8 <HAL_ADC_MspInit+0x14c>)
 80029ca:	695a      	ldr	r2, [r3, #20]
 80029cc:	4b3a      	ldr	r3, [pc, #232]	@ (8002ab8 <HAL_ADC_MspInit+0x14c>)
 80029ce:	2180      	movs	r1, #128	@ 0x80
 80029d0:	0289      	lsls	r1, r1, #10
 80029d2:	430a      	orrs	r2, r1
 80029d4:	615a      	str	r2, [r3, #20]
 80029d6:	4b38      	ldr	r3, [pc, #224]	@ (8002ab8 <HAL_ADC_MspInit+0x14c>)
 80029d8:	695a      	ldr	r2, [r3, #20]
 80029da:	2380      	movs	r3, #128	@ 0x80
 80029dc:	029b      	lsls	r3, r3, #10
 80029de:	4013      	ands	r3, r2
 80029e0:	613b      	str	r3, [r7, #16]
 80029e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029e4:	4b34      	ldr	r3, [pc, #208]	@ (8002ab8 <HAL_ADC_MspInit+0x14c>)
 80029e6:	695a      	ldr	r2, [r3, #20]
 80029e8:	4b33      	ldr	r3, [pc, #204]	@ (8002ab8 <HAL_ADC_MspInit+0x14c>)
 80029ea:	2180      	movs	r1, #128	@ 0x80
 80029ec:	02c9      	lsls	r1, r1, #11
 80029ee:	430a      	orrs	r2, r1
 80029f0:	615a      	str	r2, [r3, #20]
 80029f2:	4b31      	ldr	r3, [pc, #196]	@ (8002ab8 <HAL_ADC_MspInit+0x14c>)
 80029f4:	695a      	ldr	r2, [r3, #20]
 80029f6:	2380      	movs	r3, #128	@ 0x80
 80029f8:	02db      	lsls	r3, r3, #11
 80029fa:	4013      	ands	r3, r2
 80029fc:	60fb      	str	r3, [r7, #12]
 80029fe:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    PA4     ------> ADC_IN4
    PB0     ------> ADC_IN8
    */
    GPIO_InitStruct.Pin = Y_2_Pin|Y_1_Pin|Z_1_Pin;
 8002a00:	193b      	adds	r3, r7, r4
 8002a02:	220b      	movs	r2, #11
 8002a04:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a06:	193b      	adds	r3, r7, r4
 8002a08:	2203      	movs	r2, #3
 8002a0a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0c:	193b      	adds	r3, r7, r4
 8002a0e:	2200      	movs	r2, #0
 8002a10:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a12:	193b      	adds	r3, r7, r4
 8002a14:	4a29      	ldr	r2, [pc, #164]	@ (8002abc <HAL_ADC_MspInit+0x150>)
 8002a16:	0019      	movs	r1, r3
 8002a18:	0010      	movs	r0, r2
 8002a1a:	f001 f8c7 	bl	8003bac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = X1_1_Pin|X1_2_Pin|X2_1_Pin;
 8002a1e:	193b      	adds	r3, r7, r4
 8002a20:	2213      	movs	r2, #19
 8002a22:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a24:	193b      	adds	r3, r7, r4
 8002a26:	2203      	movs	r2, #3
 8002a28:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2a:	193b      	adds	r3, r7, r4
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a30:	193a      	adds	r2, r7, r4
 8002a32:	2390      	movs	r3, #144	@ 0x90
 8002a34:	05db      	lsls	r3, r3, #23
 8002a36:	0011      	movs	r1, r2
 8002a38:	0018      	movs	r0, r3
 8002a3a:	f001 f8b7 	bl	8003bac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = X2_2_Pin;
 8002a3e:	193b      	adds	r3, r7, r4
 8002a40:	2201      	movs	r2, #1
 8002a42:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a44:	193b      	adds	r3, r7, r4
 8002a46:	2203      	movs	r2, #3
 8002a48:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4a:	193b      	adds	r3, r7, r4
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(X2_2_GPIO_Port, &GPIO_InitStruct);
 8002a50:	193b      	adds	r3, r7, r4
 8002a52:	4a1b      	ldr	r2, [pc, #108]	@ (8002ac0 <HAL_ADC_MspInit+0x154>)
 8002a54:	0019      	movs	r1, r3
 8002a56:	0010      	movs	r0, r2
 8002a58:	f001 f8a8 	bl	8003bac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8002a5c:	4b19      	ldr	r3, [pc, #100]	@ (8002ac4 <HAL_ADC_MspInit+0x158>)
 8002a5e:	4a1a      	ldr	r2, [pc, #104]	@ (8002ac8 <HAL_ADC_MspInit+0x15c>)
 8002a60:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a62:	4b18      	ldr	r3, [pc, #96]	@ (8002ac4 <HAL_ADC_MspInit+0x158>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a68:	4b16      	ldr	r3, [pc, #88]	@ (8002ac4 <HAL_ADC_MspInit+0x158>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8002a6e:	4b15      	ldr	r3, [pc, #84]	@ (8002ac4 <HAL_ADC_MspInit+0x158>)
 8002a70:	2280      	movs	r2, #128	@ 0x80
 8002a72:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002a74:	4b13      	ldr	r3, [pc, #76]	@ (8002ac4 <HAL_ADC_MspInit+0x158>)
 8002a76:	2280      	movs	r2, #128	@ 0x80
 8002a78:	0052      	lsls	r2, r2, #1
 8002a7a:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002a7c:	4b11      	ldr	r3, [pc, #68]	@ (8002ac4 <HAL_ADC_MspInit+0x158>)
 8002a7e:	2280      	movs	r2, #128	@ 0x80
 8002a80:	00d2      	lsls	r2, r2, #3
 8002a82:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8002a84:	4b0f      	ldr	r3, [pc, #60]	@ (8002ac4 <HAL_ADC_MspInit+0x158>)
 8002a86:	2220      	movs	r2, #32
 8002a88:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8002a8a:	4b0e      	ldr	r3, [pc, #56]	@ (8002ac4 <HAL_ADC_MspInit+0x158>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8002a90:	4b0c      	ldr	r3, [pc, #48]	@ (8002ac4 <HAL_ADC_MspInit+0x158>)
 8002a92:	0018      	movs	r0, r3
 8002a94:	f000 feac 	bl	80037f0 <HAL_DMA_Init>
 8002a98:	1e03      	subs	r3, r0, #0
 8002a9a:	d001      	beq.n	8002aa0 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8002a9c:	f7ff ff3c 	bl	8002918 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	4a08      	ldr	r2, [pc, #32]	@ (8002ac4 <HAL_ADC_MspInit+0x158>)
 8002aa4:	631a      	str	r2, [r3, #48]	@ 0x30
 8002aa6:	4b07      	ldr	r3, [pc, #28]	@ (8002ac4 <HAL_ADC_MspInit+0x158>)
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002aac:	46c0      	nop			@ (mov r8, r8)
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	b00d      	add	sp, #52	@ 0x34
 8002ab2:	bd90      	pop	{r4, r7, pc}
 8002ab4:	40012400 	.word	0x40012400
 8002ab8:	40021000 	.word	0x40021000
 8002abc:	48000800 	.word	0x48000800
 8002ac0:	48000400 	.word	0x48000400
 8002ac4:	200000cc 	.word	0x200000cc
 8002ac8:	40020008 	.word	0x40020008

08002acc <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002acc:	b590      	push	{r4, r7, lr}
 8002ace:	b08b      	sub	sp, #44	@ 0x2c
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ad4:	2414      	movs	r4, #20
 8002ad6:	193b      	adds	r3, r7, r4
 8002ad8:	0018      	movs	r0, r3
 8002ada:	2314      	movs	r3, #20
 8002adc:	001a      	movs	r2, r3
 8002ade:	2100      	movs	r1, #0
 8002ae0:	f003 fb40 	bl	8006164 <memset>
  if(hspi->Instance==SPI1)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a20      	ldr	r2, [pc, #128]	@ (8002b6c <HAL_SPI_MspInit+0xa0>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d13a      	bne.n	8002b64 <HAL_SPI_MspInit+0x98>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002aee:	4b20      	ldr	r3, [pc, #128]	@ (8002b70 <HAL_SPI_MspInit+0xa4>)
 8002af0:	699a      	ldr	r2, [r3, #24]
 8002af2:	4b1f      	ldr	r3, [pc, #124]	@ (8002b70 <HAL_SPI_MspInit+0xa4>)
 8002af4:	2180      	movs	r1, #128	@ 0x80
 8002af6:	0149      	lsls	r1, r1, #5
 8002af8:	430a      	orrs	r2, r1
 8002afa:	619a      	str	r2, [r3, #24]
 8002afc:	4b1c      	ldr	r3, [pc, #112]	@ (8002b70 <HAL_SPI_MspInit+0xa4>)
 8002afe:	699a      	ldr	r2, [r3, #24]
 8002b00:	2380      	movs	r3, #128	@ 0x80
 8002b02:	015b      	lsls	r3, r3, #5
 8002b04:	4013      	ands	r3, r2
 8002b06:	613b      	str	r3, [r7, #16]
 8002b08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b0a:	4b19      	ldr	r3, [pc, #100]	@ (8002b70 <HAL_SPI_MspInit+0xa4>)
 8002b0c:	695a      	ldr	r2, [r3, #20]
 8002b0e:	4b18      	ldr	r3, [pc, #96]	@ (8002b70 <HAL_SPI_MspInit+0xa4>)
 8002b10:	2180      	movs	r1, #128	@ 0x80
 8002b12:	0289      	lsls	r1, r1, #10
 8002b14:	430a      	orrs	r2, r1
 8002b16:	615a      	str	r2, [r3, #20]
 8002b18:	4b15      	ldr	r3, [pc, #84]	@ (8002b70 <HAL_SPI_MspInit+0xa4>)
 8002b1a:	695a      	ldr	r2, [r3, #20]
 8002b1c:	2380      	movs	r3, #128	@ 0x80
 8002b1e:	029b      	lsls	r3, r3, #10
 8002b20:	4013      	ands	r3, r2
 8002b22:	60fb      	str	r3, [r7, #12]
 8002b24:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002b26:	0021      	movs	r1, r4
 8002b28:	187b      	adds	r3, r7, r1
 8002b2a:	22e0      	movs	r2, #224	@ 0xe0
 8002b2c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b2e:	187b      	adds	r3, r7, r1
 8002b30:	2202      	movs	r2, #2
 8002b32:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b34:	187b      	adds	r3, r7, r1
 8002b36:	2200      	movs	r2, #0
 8002b38:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b3a:	187b      	adds	r3, r7, r1
 8002b3c:	2203      	movs	r2, #3
 8002b3e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002b40:	187b      	adds	r3, r7, r1
 8002b42:	2200      	movs	r2, #0
 8002b44:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b46:	187a      	adds	r2, r7, r1
 8002b48:	2390      	movs	r3, #144	@ 0x90
 8002b4a:	05db      	lsls	r3, r3, #23
 8002b4c:	0011      	movs	r1, r2
 8002b4e:	0018      	movs	r0, r3
 8002b50:	f001 f82c 	bl	8003bac <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 1, 0);
 8002b54:	2200      	movs	r2, #0
 8002b56:	2101      	movs	r1, #1
 8002b58:	2019      	movs	r0, #25
 8002b5a:	f000 fe17 	bl	800378c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002b5e:	2019      	movs	r0, #25
 8002b60:	f000 fe29 	bl	80037b6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002b64:	46c0      	nop			@ (mov r8, r8)
 8002b66:	46bd      	mov	sp, r7
 8002b68:	b00b      	add	sp, #44	@ 0x2c
 8002b6a:	bd90      	pop	{r4, r7, pc}
 8002b6c:	40013000 	.word	0x40013000
 8002b70:	40021000 	.word	0x40021000

08002b74 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b086      	sub	sp, #24
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a34      	ldr	r2, [pc, #208]	@ (8002c54 <HAL_TIM_Base_MspInit+0xe0>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d10e      	bne.n	8002ba4 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002b86:	4b34      	ldr	r3, [pc, #208]	@ (8002c58 <HAL_TIM_Base_MspInit+0xe4>)
 8002b88:	699a      	ldr	r2, [r3, #24]
 8002b8a:	4b33      	ldr	r3, [pc, #204]	@ (8002c58 <HAL_TIM_Base_MspInit+0xe4>)
 8002b8c:	2180      	movs	r1, #128	@ 0x80
 8002b8e:	0109      	lsls	r1, r1, #4
 8002b90:	430a      	orrs	r2, r1
 8002b92:	619a      	str	r2, [r3, #24]
 8002b94:	4b30      	ldr	r3, [pc, #192]	@ (8002c58 <HAL_TIM_Base_MspInit+0xe4>)
 8002b96:	699a      	ldr	r2, [r3, #24]
 8002b98:	2380      	movs	r3, #128	@ 0x80
 8002b9a:	011b      	lsls	r3, r3, #4
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	617b      	str	r3, [r7, #20]
 8002ba0:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM17_MspInit 1 */

    /* USER CODE END TIM17_MspInit 1 */
  }

}
 8002ba2:	e052      	b.n	8002c4a <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM14)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a2c      	ldr	r2, [pc, #176]	@ (8002c5c <HAL_TIM_Base_MspInit+0xe8>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d116      	bne.n	8002bdc <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002bae:	4b2a      	ldr	r3, [pc, #168]	@ (8002c58 <HAL_TIM_Base_MspInit+0xe4>)
 8002bb0:	69da      	ldr	r2, [r3, #28]
 8002bb2:	4b29      	ldr	r3, [pc, #164]	@ (8002c58 <HAL_TIM_Base_MspInit+0xe4>)
 8002bb4:	2180      	movs	r1, #128	@ 0x80
 8002bb6:	0049      	lsls	r1, r1, #1
 8002bb8:	430a      	orrs	r2, r1
 8002bba:	61da      	str	r2, [r3, #28]
 8002bbc:	4b26      	ldr	r3, [pc, #152]	@ (8002c58 <HAL_TIM_Base_MspInit+0xe4>)
 8002bbe:	69da      	ldr	r2, [r3, #28]
 8002bc0:	2380      	movs	r3, #128	@ 0x80
 8002bc2:	005b      	lsls	r3, r3, #1
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	613b      	str	r3, [r7, #16]
 8002bc8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8002bca:	2200      	movs	r2, #0
 8002bcc:	2100      	movs	r1, #0
 8002bce:	2013      	movs	r0, #19
 8002bd0:	f000 fddc 	bl	800378c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8002bd4:	2013      	movs	r0, #19
 8002bd6:	f000 fdee 	bl	80037b6 <HAL_NVIC_EnableIRQ>
}
 8002bda:	e036      	b.n	8002c4a <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM16)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a1f      	ldr	r2, [pc, #124]	@ (8002c60 <HAL_TIM_Base_MspInit+0xec>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d116      	bne.n	8002c14 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002be6:	4b1c      	ldr	r3, [pc, #112]	@ (8002c58 <HAL_TIM_Base_MspInit+0xe4>)
 8002be8:	699a      	ldr	r2, [r3, #24]
 8002bea:	4b1b      	ldr	r3, [pc, #108]	@ (8002c58 <HAL_TIM_Base_MspInit+0xe4>)
 8002bec:	2180      	movs	r1, #128	@ 0x80
 8002bee:	0289      	lsls	r1, r1, #10
 8002bf0:	430a      	orrs	r2, r1
 8002bf2:	619a      	str	r2, [r3, #24]
 8002bf4:	4b18      	ldr	r3, [pc, #96]	@ (8002c58 <HAL_TIM_Base_MspInit+0xe4>)
 8002bf6:	699a      	ldr	r2, [r3, #24]
 8002bf8:	2380      	movs	r3, #128	@ 0x80
 8002bfa:	029b      	lsls	r3, r3, #10
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	60fb      	str	r3, [r7, #12]
 8002c00:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8002c02:	2200      	movs	r2, #0
 8002c04:	2100      	movs	r1, #0
 8002c06:	2015      	movs	r0, #21
 8002c08:	f000 fdc0 	bl	800378c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002c0c:	2015      	movs	r0, #21
 8002c0e:	f000 fdd2 	bl	80037b6 <HAL_NVIC_EnableIRQ>
}
 8002c12:	e01a      	b.n	8002c4a <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM17)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a12      	ldr	r2, [pc, #72]	@ (8002c64 <HAL_TIM_Base_MspInit+0xf0>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d115      	bne.n	8002c4a <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002c1e:	4b0e      	ldr	r3, [pc, #56]	@ (8002c58 <HAL_TIM_Base_MspInit+0xe4>)
 8002c20:	699a      	ldr	r2, [r3, #24]
 8002c22:	4b0d      	ldr	r3, [pc, #52]	@ (8002c58 <HAL_TIM_Base_MspInit+0xe4>)
 8002c24:	2180      	movs	r1, #128	@ 0x80
 8002c26:	02c9      	lsls	r1, r1, #11
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	619a      	str	r2, [r3, #24]
 8002c2c:	4b0a      	ldr	r3, [pc, #40]	@ (8002c58 <HAL_TIM_Base_MspInit+0xe4>)
 8002c2e:	699a      	ldr	r2, [r3, #24]
 8002c30:	2380      	movs	r3, #128	@ 0x80
 8002c32:	02db      	lsls	r3, r3, #11
 8002c34:	4013      	ands	r3, r2
 8002c36:	60bb      	str	r3, [r7, #8]
 8002c38:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	2100      	movs	r1, #0
 8002c3e:	2016      	movs	r0, #22
 8002c40:	f000 fda4 	bl	800378c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8002c44:	2016      	movs	r0, #22
 8002c46:	f000 fdb6 	bl	80037b6 <HAL_NVIC_EnableIRQ>
}
 8002c4a:	46c0      	nop			@ (mov r8, r8)
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	b006      	add	sp, #24
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	46c0      	nop			@ (mov r8, r8)
 8002c54:	40012c00 	.word	0x40012c00
 8002c58:	40021000 	.word	0x40021000
 8002c5c:	40002000 	.word	0x40002000
 8002c60:	40014400 	.word	0x40014400
 8002c64:	40014800 	.word	0x40014800

08002c68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002c6c:	46c0      	nop			@ (mov r8, r8)
 8002c6e:	e7fd      	b.n	8002c6c <NMI_Handler+0x4>

08002c70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c74:	46c0      	nop			@ (mov r8, r8)
 8002c76:	e7fd      	b.n	8002c74 <HardFault_Handler+0x4>

08002c78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002c7c:	46c0      	nop			@ (mov r8, r8)
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c82:	b580      	push	{r7, lr}
 8002c84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c86:	46c0      	nop			@ (mov r8, r8)
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c90:	f000 f8b8 	bl	8002e04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c94:	46c0      	nop			@ (mov r8, r8)
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
	...

08002c9c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8002ca0:	4b03      	ldr	r3, [pc, #12]	@ (8002cb0 <DMA1_Channel1_IRQHandler+0x14>)
 8002ca2:	0018      	movs	r0, r3
 8002ca4:	f000 fe97 	bl	80039d6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002ca8:	46c0      	nop			@ (mov r8, r8)
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	46c0      	nop			@ (mov r8, r8)
 8002cb0:	200000cc 	.word	0x200000cc

08002cb4 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002cb8:	4b03      	ldr	r3, [pc, #12]	@ (8002cc8 <TIM14_IRQHandler+0x14>)
 8002cba:	0018      	movs	r0, r3
 8002cbc:	f002 fe12 	bl	80058e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8002cc0:	46c0      	nop			@ (mov r8, r8)
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	46c0      	nop			@ (mov r8, r8)
 8002cc8:	200001bc 	.word	0x200001bc

08002ccc <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002cd0:	4b03      	ldr	r3, [pc, #12]	@ (8002ce0 <TIM16_IRQHandler+0x14>)
 8002cd2:	0018      	movs	r0, r3
 8002cd4:	f002 fe06 	bl	80058e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8002cd8:	46c0      	nop			@ (mov r8, r8)
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	46c0      	nop			@ (mov r8, r8)
 8002ce0:	20000204 	.word	0x20000204

08002ce4 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8002ce8:	4b03      	ldr	r3, [pc, #12]	@ (8002cf8 <TIM17_IRQHandler+0x14>)
 8002cea:	0018      	movs	r0, r3
 8002cec:	f002 fdfa 	bl	80058e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8002cf0:	46c0      	nop			@ (mov r8, r8)
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	46c0      	nop			@ (mov r8, r8)
 8002cf8:	2000024c 	.word	0x2000024c

08002cfc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002d00:	4b03      	ldr	r3, [pc, #12]	@ (8002d10 <SPI1_IRQHandler+0x14>)
 8002d02:	0018      	movs	r0, r3
 8002d04:	f001 fff8 	bl	8004cf8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002d08:	46c0      	nop			@ (mov r8, r8)
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	46c0      	nop			@ (mov r8, r8)
 8002d10:	20000110 	.word	0x20000110

08002d14 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002d18:	46c0      	nop			@ (mov r8, r8)
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
	...

08002d20 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002d20:	480d      	ldr	r0, [pc, #52]	@ (8002d58 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002d22:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002d24:	f7ff fff6 	bl	8002d14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d28:	480c      	ldr	r0, [pc, #48]	@ (8002d5c <LoopForever+0x6>)
  ldr r1, =_edata
 8002d2a:	490d      	ldr	r1, [pc, #52]	@ (8002d60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002d2c:	4a0d      	ldr	r2, [pc, #52]	@ (8002d64 <LoopForever+0xe>)
  movs r3, #0
 8002d2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d30:	e002      	b.n	8002d38 <LoopCopyDataInit>

08002d32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d36:	3304      	adds	r3, #4

08002d38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d3c:	d3f9      	bcc.n	8002d32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d3e:	4a0a      	ldr	r2, [pc, #40]	@ (8002d68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002d40:	4c0a      	ldr	r4, [pc, #40]	@ (8002d6c <LoopForever+0x16>)
  movs r3, #0
 8002d42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d44:	e001      	b.n	8002d4a <LoopFillZerobss>

08002d46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d48:	3204      	adds	r2, #4

08002d4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d4c:	d3fb      	bcc.n	8002d46 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002d4e:	f003 fa11 	bl	8006174 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002d52:	f7fe f917 	bl	8000f84 <main>

08002d56 <LoopForever>:

LoopForever:
    b LoopForever
 8002d56:	e7fe      	b.n	8002d56 <LoopForever>
  ldr   r0, =_estack
 8002d58:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002d5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d60:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002d64:	0800628c 	.word	0x0800628c
  ldr r2, =_sbss
 8002d68:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002d6c:	200002ec 	.word	0x200002ec

08002d70 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d70:	e7fe      	b.n	8002d70 <ADC1_IRQHandler>
	...

08002d74 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d78:	4b07      	ldr	r3, [pc, #28]	@ (8002d98 <HAL_Init+0x24>)
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	4b06      	ldr	r3, [pc, #24]	@ (8002d98 <HAL_Init+0x24>)
 8002d7e:	2110      	movs	r1, #16
 8002d80:	430a      	orrs	r2, r1
 8002d82:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002d84:	2000      	movs	r0, #0
 8002d86:	f000 f809 	bl	8002d9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d8a:	f7ff fdcb 	bl	8002924 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d8e:	2300      	movs	r3, #0
}
 8002d90:	0018      	movs	r0, r3
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	46c0      	nop			@ (mov r8, r8)
 8002d98:	40022000 	.word	0x40022000

08002d9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d9c:	b590      	push	{r4, r7, lr}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002da4:	4b14      	ldr	r3, [pc, #80]	@ (8002df8 <HAL_InitTick+0x5c>)
 8002da6:	681c      	ldr	r4, [r3, #0]
 8002da8:	4b14      	ldr	r3, [pc, #80]	@ (8002dfc <HAL_InitTick+0x60>)
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	0019      	movs	r1, r3
 8002dae:	23fa      	movs	r3, #250	@ 0xfa
 8002db0:	0098      	lsls	r0, r3, #2
 8002db2:	f7fd f9a9 	bl	8000108 <__udivsi3>
 8002db6:	0003      	movs	r3, r0
 8002db8:	0019      	movs	r1, r3
 8002dba:	0020      	movs	r0, r4
 8002dbc:	f7fd f9a4 	bl	8000108 <__udivsi3>
 8002dc0:	0003      	movs	r3, r0
 8002dc2:	0018      	movs	r0, r3
 8002dc4:	f000 fd07 	bl	80037d6 <HAL_SYSTICK_Config>
 8002dc8:	1e03      	subs	r3, r0, #0
 8002dca:	d001      	beq.n	8002dd0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e00f      	b.n	8002df0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2b03      	cmp	r3, #3
 8002dd4:	d80b      	bhi.n	8002dee <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002dd6:	6879      	ldr	r1, [r7, #4]
 8002dd8:	2301      	movs	r3, #1
 8002dda:	425b      	negs	r3, r3
 8002ddc:	2200      	movs	r2, #0
 8002dde:	0018      	movs	r0, r3
 8002de0:	f000 fcd4 	bl	800378c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002de4:	4b06      	ldr	r3, [pc, #24]	@ (8002e00 <HAL_InitTick+0x64>)
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002dea:	2300      	movs	r3, #0
 8002dec:	e000      	b.n	8002df0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
}
 8002df0:	0018      	movs	r0, r3
 8002df2:	46bd      	mov	sp, r7
 8002df4:	b003      	add	sp, #12
 8002df6:	bd90      	pop	{r4, r7, pc}
 8002df8:	20000064 	.word	0x20000064
 8002dfc:	2000006c 	.word	0x2000006c
 8002e00:	20000068 	.word	0x20000068

08002e04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e08:	4b05      	ldr	r3, [pc, #20]	@ (8002e20 <HAL_IncTick+0x1c>)
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	001a      	movs	r2, r3
 8002e0e:	4b05      	ldr	r3, [pc, #20]	@ (8002e24 <HAL_IncTick+0x20>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	18d2      	adds	r2, r2, r3
 8002e14:	4b03      	ldr	r3, [pc, #12]	@ (8002e24 <HAL_IncTick+0x20>)
 8002e16:	601a      	str	r2, [r3, #0]
}
 8002e18:	46c0      	nop			@ (mov r8, r8)
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	46c0      	nop			@ (mov r8, r8)
 8002e20:	2000006c 	.word	0x2000006c
 8002e24:	200002e8 	.word	0x200002e8

08002e28 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	af00      	add	r7, sp, #0
  return uwTick;
 8002e2c:	4b02      	ldr	r3, [pc, #8]	@ (8002e38 <HAL_GetTick+0x10>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
}
 8002e30:	0018      	movs	r0, r3
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	46c0      	nop			@ (mov r8, r8)
 8002e38:	200002e8 	.word	0x200002e8

08002e3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e44:	f7ff fff0 	bl	8002e28 <HAL_GetTick>
 8002e48:	0003      	movs	r3, r0
 8002e4a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	3301      	adds	r3, #1
 8002e54:	d005      	beq.n	8002e62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e56:	4b0a      	ldr	r3, [pc, #40]	@ (8002e80 <HAL_Delay+0x44>)
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	001a      	movs	r2, r3
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	189b      	adds	r3, r3, r2
 8002e60:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002e62:	46c0      	nop			@ (mov r8, r8)
 8002e64:	f7ff ffe0 	bl	8002e28 <HAL_GetTick>
 8002e68:	0002      	movs	r2, r0
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	68fa      	ldr	r2, [r7, #12]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d8f7      	bhi.n	8002e64 <HAL_Delay+0x28>
  {
  }
}
 8002e74:	46c0      	nop			@ (mov r8, r8)
 8002e76:	46c0      	nop			@ (mov r8, r8)
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	b004      	add	sp, #16
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	46c0      	nop			@ (mov r8, r8)
 8002e80:	2000006c 	.word	0x2000006c

08002e84 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e8c:	230f      	movs	r3, #15
 8002e8e:	18fb      	adds	r3, r7, r3
 8002e90:	2200      	movs	r2, #0
 8002e92:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8002e94:	2300      	movs	r3, #0
 8002e96:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d101      	bne.n	8002ea2 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e125      	b.n	80030ee <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d10a      	bne.n	8002ec0 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2234      	movs	r2, #52	@ 0x34
 8002eb4:	2100      	movs	r1, #0
 8002eb6:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	0018      	movs	r0, r3
 8002ebc:	f7ff fd56 	bl	800296c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ec4:	2210      	movs	r2, #16
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	d000      	beq.n	8002ecc <HAL_ADC_Init+0x48>
 8002eca:	e103      	b.n	80030d4 <HAL_ADC_Init+0x250>
 8002ecc:	230f      	movs	r3, #15
 8002ece:	18fb      	adds	r3, r7, r3
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d000      	beq.n	8002ed8 <HAL_ADC_Init+0x54>
 8002ed6:	e0fd      	b.n	80030d4 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	2204      	movs	r2, #4
 8002ee0:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8002ee2:	d000      	beq.n	8002ee6 <HAL_ADC_Init+0x62>
 8002ee4:	e0f6      	b.n	80030d4 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eea:	4a83      	ldr	r2, [pc, #524]	@ (80030f8 <HAL_ADC_Init+0x274>)
 8002eec:	4013      	ands	r3, r2
 8002eee:	2202      	movs	r2, #2
 8002ef0:	431a      	orrs	r2, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	2203      	movs	r2, #3
 8002efe:	4013      	ands	r3, r2
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d112      	bne.n	8002f2a <HAL_ADC_Init+0xa6>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d009      	beq.n	8002f26 <HAL_ADC_Init+0xa2>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	68da      	ldr	r2, [r3, #12]
 8002f18:	2380      	movs	r3, #128	@ 0x80
 8002f1a:	021b      	lsls	r3, r3, #8
 8002f1c:	401a      	ands	r2, r3
 8002f1e:	2380      	movs	r3, #128	@ 0x80
 8002f20:	021b      	lsls	r3, r3, #8
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d101      	bne.n	8002f2a <HAL_ADC_Init+0xa6>
 8002f26:	2301      	movs	r3, #1
 8002f28:	e000      	b.n	8002f2c <HAL_ADC_Init+0xa8>
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d116      	bne.n	8002f5e <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	2218      	movs	r2, #24
 8002f38:	4393      	bics	r3, r2
 8002f3a:	0019      	movs	r1, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689a      	ldr	r2, [r3, #8]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	430a      	orrs	r2, r1
 8002f46:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	0899      	lsrs	r1, r3, #2
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685a      	ldr	r2, [r3, #4]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68da      	ldr	r2, [r3, #12]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4964      	ldr	r1, [pc, #400]	@ (80030fc <HAL_ADC_Init+0x278>)
 8002f6a:	400a      	ands	r2, r1
 8002f6c:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	7e1b      	ldrb	r3, [r3, #24]
 8002f72:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	7e5b      	ldrb	r3, [r3, #25]
 8002f78:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002f7a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	7e9b      	ldrb	r3, [r3, #26]
 8002f80:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002f82:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d002      	beq.n	8002f92 <HAL_ADC_Init+0x10e>
 8002f8c:	2380      	movs	r3, #128	@ 0x80
 8002f8e:	015b      	lsls	r3, r3, #5
 8002f90:	e000      	b.n	8002f94 <HAL_ADC_Init+0x110>
 8002f92:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002f94:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002f9a:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	691b      	ldr	r3, [r3, #16]
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d101      	bne.n	8002fa8 <HAL_ADC_Init+0x124>
 8002fa4:	2304      	movs	r3, #4
 8002fa6:	e000      	b.n	8002faa <HAL_ADC_Init+0x126>
 8002fa8:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8002faa:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2124      	movs	r1, #36	@ 0x24
 8002fb0:	5c5b      	ldrb	r3, [r3, r1]
 8002fb2:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002fb4:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002fb6:	68ba      	ldr	r2, [r7, #8]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	7edb      	ldrb	r3, [r3, #27]
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d115      	bne.n	8002ff0 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	7e9b      	ldrb	r3, [r3, #26]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d105      	bne.n	8002fd8 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	2280      	movs	r2, #128	@ 0x80
 8002fd0:	0252      	lsls	r2, r2, #9
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	60bb      	str	r3, [r7, #8]
 8002fd6:	e00b      	b.n	8002ff0 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fdc:	2220      	movs	r2, #32
 8002fde:	431a      	orrs	r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fe8:	2201      	movs	r2, #1
 8002fea:	431a      	orrs	r2, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	69da      	ldr	r2, [r3, #28]
 8002ff4:	23c2      	movs	r3, #194	@ 0xc2
 8002ff6:	33ff      	adds	r3, #255	@ 0xff
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d007      	beq.n	800300c <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003004:	4313      	orrs	r3, r2
 8003006:	68ba      	ldr	r2, [r7, #8]
 8003008:	4313      	orrs	r3, r2
 800300a:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	68d9      	ldr	r1, [r3, #12]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	68ba      	ldr	r2, [r7, #8]
 8003018:	430a      	orrs	r2, r1
 800301a:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003020:	2380      	movs	r3, #128	@ 0x80
 8003022:	055b      	lsls	r3, r3, #21
 8003024:	429a      	cmp	r2, r3
 8003026:	d01b      	beq.n	8003060 <HAL_ADC_Init+0x1dc>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800302c:	2b01      	cmp	r3, #1
 800302e:	d017      	beq.n	8003060 <HAL_ADC_Init+0x1dc>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003034:	2b02      	cmp	r3, #2
 8003036:	d013      	beq.n	8003060 <HAL_ADC_Init+0x1dc>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800303c:	2b03      	cmp	r3, #3
 800303e:	d00f      	beq.n	8003060 <HAL_ADC_Init+0x1dc>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003044:	2b04      	cmp	r3, #4
 8003046:	d00b      	beq.n	8003060 <HAL_ADC_Init+0x1dc>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800304c:	2b05      	cmp	r3, #5
 800304e:	d007      	beq.n	8003060 <HAL_ADC_Init+0x1dc>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003054:	2b06      	cmp	r3, #6
 8003056:	d003      	beq.n	8003060 <HAL_ADC_Init+0x1dc>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800305c:	2b07      	cmp	r3, #7
 800305e:	d112      	bne.n	8003086 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	695a      	ldr	r2, [r3, #20]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2107      	movs	r1, #7
 800306c:	438a      	bics	r2, r1
 800306e:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	6959      	ldr	r1, [r3, #20]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800307a:	2207      	movs	r2, #7
 800307c:	401a      	ands	r2, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	430a      	orrs	r2, r1
 8003084:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	4a1c      	ldr	r2, [pc, #112]	@ (8003100 <HAL_ADC_Init+0x27c>)
 800308e:	4013      	ands	r3, r2
 8003090:	68ba      	ldr	r2, [r7, #8]
 8003092:	429a      	cmp	r2, r3
 8003094:	d10b      	bne.n	80030ae <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030a0:	2203      	movs	r2, #3
 80030a2:	4393      	bics	r3, r2
 80030a4:	2201      	movs	r2, #1
 80030a6:	431a      	orrs	r2, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80030ac:	e01c      	b.n	80030e8 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030b2:	2212      	movs	r2, #18
 80030b4:	4393      	bics	r3, r2
 80030b6:	2210      	movs	r2, #16
 80030b8:	431a      	orrs	r2, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030c2:	2201      	movs	r2, #1
 80030c4:	431a      	orrs	r2, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80030ca:	230f      	movs	r3, #15
 80030cc:	18fb      	adds	r3, r7, r3
 80030ce:	2201      	movs	r2, #1
 80030d0:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80030d2:	e009      	b.n	80030e8 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030d8:	2210      	movs	r2, #16
 80030da:	431a      	orrs	r2, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 80030e0:	230f      	movs	r3, #15
 80030e2:	18fb      	adds	r3, r7, r3
 80030e4:	2201      	movs	r2, #1
 80030e6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80030e8:	230f      	movs	r3, #15
 80030ea:	18fb      	adds	r3, r7, r3
 80030ec:	781b      	ldrb	r3, [r3, #0]
}
 80030ee:	0018      	movs	r0, r3
 80030f0:	46bd      	mov	sp, r7
 80030f2:	b004      	add	sp, #16
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	46c0      	nop			@ (mov r8, r8)
 80030f8:	fffffefd 	.word	0xfffffefd
 80030fc:	fffe0219 	.word	0xfffe0219
 8003100:	833fffe7 	.word	0x833fffe7

08003104 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003104:	b590      	push	{r4, r7, lr}
 8003106:	b087      	sub	sp, #28
 8003108:	af00      	add	r7, sp, #0
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003110:	2317      	movs	r3, #23
 8003112:	18fb      	adds	r3, r7, r3
 8003114:	2200      	movs	r2, #0
 8003116:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	2204      	movs	r2, #4
 8003120:	4013      	ands	r3, r2
 8003122:	d15e      	bne.n	80031e2 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2234      	movs	r2, #52	@ 0x34
 8003128:	5c9b      	ldrb	r3, [r3, r2]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d101      	bne.n	8003132 <HAL_ADC_Start_DMA+0x2e>
 800312e:	2302      	movs	r3, #2
 8003130:	e05e      	b.n	80031f0 <HAL_ADC_Start_DMA+0xec>
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2234      	movs	r2, #52	@ 0x34
 8003136:	2101      	movs	r1, #1
 8003138:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	7e5b      	ldrb	r3, [r3, #25]
 800313e:	2b01      	cmp	r3, #1
 8003140:	d007      	beq.n	8003152 <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8003142:	2317      	movs	r3, #23
 8003144:	18fc      	adds	r4, r7, r3
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	0018      	movs	r0, r3
 800314a:	f000 f96b 	bl	8003424 <ADC_Enable>
 800314e:	0003      	movs	r3, r0
 8003150:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003152:	2317      	movs	r3, #23
 8003154:	18fb      	adds	r3, r7, r3
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d146      	bne.n	80031ea <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003160:	4a25      	ldr	r2, [pc, #148]	@ (80031f8 <HAL_ADC_Start_DMA+0xf4>)
 8003162:	4013      	ands	r3, r2
 8003164:	2280      	movs	r2, #128	@ 0x80
 8003166:	0052      	lsls	r2, r2, #1
 8003168:	431a      	orrs	r2, r3
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2200      	movs	r2, #0
 8003172:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2234      	movs	r2, #52	@ 0x34
 8003178:	2100      	movs	r1, #0
 800317a:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003180:	4a1e      	ldr	r2, [pc, #120]	@ (80031fc <HAL_ADC_Start_DMA+0xf8>)
 8003182:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003188:	4a1d      	ldr	r2, [pc, #116]	@ (8003200 <HAL_ADC_Start_DMA+0xfc>)
 800318a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003190:	4a1c      	ldr	r2, [pc, #112]	@ (8003204 <HAL_ADC_Start_DMA+0x100>)
 8003192:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	221c      	movs	r2, #28
 800319a:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	685a      	ldr	r2, [r3, #4]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2110      	movs	r1, #16
 80031a8:	430a      	orrs	r2, r1
 80031aa:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	68da      	ldr	r2, [r3, #12]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2101      	movs	r1, #1
 80031b8:	430a      	orrs	r2, r1
 80031ba:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	3340      	adds	r3, #64	@ 0x40
 80031c6:	0019      	movs	r1, r3
 80031c8:	68ba      	ldr	r2, [r7, #8]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f000 fb58 	bl	8003880 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	689a      	ldr	r2, [r3, #8]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2104      	movs	r1, #4
 80031dc:	430a      	orrs	r2, r1
 80031de:	609a      	str	r2, [r3, #8]
 80031e0:	e003      	b.n	80031ea <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80031e2:	2317      	movs	r3, #23
 80031e4:	18fb      	adds	r3, r7, r3
 80031e6:	2202      	movs	r2, #2
 80031e8:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 80031ea:	2317      	movs	r3, #23
 80031ec:	18fb      	adds	r3, r7, r3
 80031ee:	781b      	ldrb	r3, [r3, #0]
}
 80031f0:	0018      	movs	r0, r3
 80031f2:	46bd      	mov	sp, r7
 80031f4:	b007      	add	sp, #28
 80031f6:	bd90      	pop	{r4, r7, pc}
 80031f8:	fffff0fe 	.word	0xfffff0fe
 80031fc:	0800352d 	.word	0x0800352d
 8003200:	080035e1 	.word	0x080035e1
 8003204:	080035ff 	.word	0x080035ff

08003208 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003210:	46c0      	nop			@ (mov r8, r8)
 8003212:	46bd      	mov	sp, r7
 8003214:	b002      	add	sp, #8
 8003216:	bd80      	pop	{r7, pc}

08003218 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003220:	46c0      	nop			@ (mov r8, r8)
 8003222:	46bd      	mov	sp, r7
 8003224:	b002      	add	sp, #8
 8003226:	bd80      	pop	{r7, pc}

08003228 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003230:	46c0      	nop			@ (mov r8, r8)
 8003232:	46bd      	mov	sp, r7
 8003234:	b002      	add	sp, #8
 8003236:	bd80      	pop	{r7, pc}

08003238 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003242:	230f      	movs	r3, #15
 8003244:	18fb      	adds	r3, r7, r3
 8003246:	2200      	movs	r2, #0
 8003248:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800324a:	2300      	movs	r3, #0
 800324c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003252:	2380      	movs	r3, #128	@ 0x80
 8003254:	055b      	lsls	r3, r3, #21
 8003256:	429a      	cmp	r2, r3
 8003258:	d011      	beq.n	800327e <HAL_ADC_ConfigChannel+0x46>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800325e:	2b01      	cmp	r3, #1
 8003260:	d00d      	beq.n	800327e <HAL_ADC_ConfigChannel+0x46>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003266:	2b02      	cmp	r3, #2
 8003268:	d009      	beq.n	800327e <HAL_ADC_ConfigChannel+0x46>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800326e:	2b03      	cmp	r3, #3
 8003270:	d005      	beq.n	800327e <HAL_ADC_ConfigChannel+0x46>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003276:	2b04      	cmp	r3, #4
 8003278:	d001      	beq.n	800327e <HAL_ADC_ConfigChannel+0x46>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2234      	movs	r2, #52	@ 0x34
 8003282:	5c9b      	ldrb	r3, [r3, r2]
 8003284:	2b01      	cmp	r3, #1
 8003286:	d101      	bne.n	800328c <HAL_ADC_ConfigChannel+0x54>
 8003288:	2302      	movs	r3, #2
 800328a:	e0bb      	b.n	8003404 <HAL_ADC_ConfigChannel+0x1cc>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2234      	movs	r2, #52	@ 0x34
 8003290:	2101      	movs	r1, #1
 8003292:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	2204      	movs	r2, #4
 800329c:	4013      	ands	r3, r2
 800329e:	d000      	beq.n	80032a2 <HAL_ADC_ConfigChannel+0x6a>
 80032a0:	e09f      	b.n	80033e2 <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	4a59      	ldr	r2, [pc, #356]	@ (800340c <HAL_ADC_ConfigChannel+0x1d4>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d100      	bne.n	80032ae <HAL_ADC_ConfigChannel+0x76>
 80032ac:	e077      	b.n	800339e <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2201      	movs	r2, #1
 80032ba:	409a      	lsls	r2, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	430a      	orrs	r2, r1
 80032c2:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032c8:	2380      	movs	r3, #128	@ 0x80
 80032ca:	055b      	lsls	r3, r3, #21
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d037      	beq.n	8003340 <HAL_ADC_ConfigChannel+0x108>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d033      	beq.n	8003340 <HAL_ADC_ConfigChannel+0x108>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d02f      	beq.n	8003340 <HAL_ADC_ConfigChannel+0x108>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032e4:	2b03      	cmp	r3, #3
 80032e6:	d02b      	beq.n	8003340 <HAL_ADC_ConfigChannel+0x108>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ec:	2b04      	cmp	r3, #4
 80032ee:	d027      	beq.n	8003340 <HAL_ADC_ConfigChannel+0x108>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032f4:	2b05      	cmp	r3, #5
 80032f6:	d023      	beq.n	8003340 <HAL_ADC_ConfigChannel+0x108>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032fc:	2b06      	cmp	r3, #6
 80032fe:	d01f      	beq.n	8003340 <HAL_ADC_ConfigChannel+0x108>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003304:	2b07      	cmp	r3, #7
 8003306:	d01b      	beq.n	8003340 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	689a      	ldr	r2, [r3, #8]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	695b      	ldr	r3, [r3, #20]
 8003312:	2107      	movs	r1, #7
 8003314:	400b      	ands	r3, r1
 8003316:	429a      	cmp	r2, r3
 8003318:	d012      	beq.n	8003340 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	695a      	ldr	r2, [r3, #20]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	2107      	movs	r1, #7
 8003326:	438a      	bics	r2, r1
 8003328:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	6959      	ldr	r1, [r3, #20]
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	2207      	movs	r2, #7
 8003336:	401a      	ands	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	430a      	orrs	r2, r1
 800333e:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2b10      	cmp	r3, #16
 8003346:	d003      	beq.n	8003350 <HAL_ADC_ConfigChannel+0x118>
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2b11      	cmp	r3, #17
 800334e:	d152      	bne.n	80033f6 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003350:	4b2f      	ldr	r3, [pc, #188]	@ (8003410 <HAL_ADC_ConfigChannel+0x1d8>)
 8003352:	6819      	ldr	r1, [r3, #0]
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2b10      	cmp	r3, #16
 800335a:	d102      	bne.n	8003362 <HAL_ADC_ConfigChannel+0x12a>
 800335c:	2380      	movs	r3, #128	@ 0x80
 800335e:	041b      	lsls	r3, r3, #16
 8003360:	e001      	b.n	8003366 <HAL_ADC_ConfigChannel+0x12e>
 8003362:	2380      	movs	r3, #128	@ 0x80
 8003364:	03db      	lsls	r3, r3, #15
 8003366:	4a2a      	ldr	r2, [pc, #168]	@ (8003410 <HAL_ADC_ConfigChannel+0x1d8>)
 8003368:	430b      	orrs	r3, r1
 800336a:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2b10      	cmp	r3, #16
 8003372:	d140      	bne.n	80033f6 <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003374:	4b27      	ldr	r3, [pc, #156]	@ (8003414 <HAL_ADC_ConfigChannel+0x1dc>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4927      	ldr	r1, [pc, #156]	@ (8003418 <HAL_ADC_ConfigChannel+0x1e0>)
 800337a:	0018      	movs	r0, r3
 800337c:	f7fc fec4 	bl	8000108 <__udivsi3>
 8003380:	0003      	movs	r3, r0
 8003382:	001a      	movs	r2, r3
 8003384:	0013      	movs	r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	189b      	adds	r3, r3, r2
 800338a:	005b      	lsls	r3, r3, #1
 800338c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800338e:	e002      	b.n	8003396 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	3b01      	subs	r3, #1
 8003394:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d1f9      	bne.n	8003390 <HAL_ADC_ConfigChannel+0x158>
 800339c:	e02b      	b.n	80033f6 <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2101      	movs	r1, #1
 80033aa:	4099      	lsls	r1, r3
 80033ac:	000b      	movs	r3, r1
 80033ae:	43d9      	mvns	r1, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	400a      	ands	r2, r1
 80033b6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2b10      	cmp	r3, #16
 80033be:	d003      	beq.n	80033c8 <HAL_ADC_ConfigChannel+0x190>
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2b11      	cmp	r3, #17
 80033c6:	d116      	bne.n	80033f6 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80033c8:	4b11      	ldr	r3, [pc, #68]	@ (8003410 <HAL_ADC_ConfigChannel+0x1d8>)
 80033ca:	6819      	ldr	r1, [r3, #0]
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2b10      	cmp	r3, #16
 80033d2:	d101      	bne.n	80033d8 <HAL_ADC_ConfigChannel+0x1a0>
 80033d4:	4a11      	ldr	r2, [pc, #68]	@ (800341c <HAL_ADC_ConfigChannel+0x1e4>)
 80033d6:	e000      	b.n	80033da <HAL_ADC_ConfigChannel+0x1a2>
 80033d8:	4a11      	ldr	r2, [pc, #68]	@ (8003420 <HAL_ADC_ConfigChannel+0x1e8>)
 80033da:	4b0d      	ldr	r3, [pc, #52]	@ (8003410 <HAL_ADC_ConfigChannel+0x1d8>)
 80033dc:	400a      	ands	r2, r1
 80033de:	601a      	str	r2, [r3, #0]
 80033e0:	e009      	b.n	80033f6 <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033e6:	2220      	movs	r2, #32
 80033e8:	431a      	orrs	r2, r3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 80033ee:	230f      	movs	r3, #15
 80033f0:	18fb      	adds	r3, r7, r3
 80033f2:	2201      	movs	r2, #1
 80033f4:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2234      	movs	r2, #52	@ 0x34
 80033fa:	2100      	movs	r1, #0
 80033fc:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80033fe:	230f      	movs	r3, #15
 8003400:	18fb      	adds	r3, r7, r3
 8003402:	781b      	ldrb	r3, [r3, #0]
}
 8003404:	0018      	movs	r0, r3
 8003406:	46bd      	mov	sp, r7
 8003408:	b004      	add	sp, #16
 800340a:	bd80      	pop	{r7, pc}
 800340c:	00001001 	.word	0x00001001
 8003410:	40012708 	.word	0x40012708
 8003414:	20000064 	.word	0x20000064
 8003418:	000f4240 	.word	0x000f4240
 800341c:	ff7fffff 	.word	0xff7fffff
 8003420:	ffbfffff 	.word	0xffbfffff

08003424 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800342c:	2300      	movs	r3, #0
 800342e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003430:	2300      	movs	r3, #0
 8003432:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	2203      	movs	r2, #3
 800343c:	4013      	ands	r3, r2
 800343e:	2b01      	cmp	r3, #1
 8003440:	d112      	bne.n	8003468 <ADC_Enable+0x44>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2201      	movs	r2, #1
 800344a:	4013      	ands	r3, r2
 800344c:	2b01      	cmp	r3, #1
 800344e:	d009      	beq.n	8003464 <ADC_Enable+0x40>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	68da      	ldr	r2, [r3, #12]
 8003456:	2380      	movs	r3, #128	@ 0x80
 8003458:	021b      	lsls	r3, r3, #8
 800345a:	401a      	ands	r2, r3
 800345c:	2380      	movs	r3, #128	@ 0x80
 800345e:	021b      	lsls	r3, r3, #8
 8003460:	429a      	cmp	r2, r3
 8003462:	d101      	bne.n	8003468 <ADC_Enable+0x44>
 8003464:	2301      	movs	r3, #1
 8003466:	e000      	b.n	800346a <ADC_Enable+0x46>
 8003468:	2300      	movs	r3, #0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d152      	bne.n	8003514 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	4a2a      	ldr	r2, [pc, #168]	@ (8003520 <ADC_Enable+0xfc>)
 8003476:	4013      	ands	r3, r2
 8003478:	d00d      	beq.n	8003496 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800347e:	2210      	movs	r2, #16
 8003480:	431a      	orrs	r2, r3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	639a      	str	r2, [r3, #56]	@ 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800348a:	2201      	movs	r2, #1
 800348c:	431a      	orrs	r2, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e03f      	b.n	8003516 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	689a      	ldr	r2, [r3, #8]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2101      	movs	r1, #1
 80034a2:	430a      	orrs	r2, r1
 80034a4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80034a6:	4b1f      	ldr	r3, [pc, #124]	@ (8003524 <ADC_Enable+0x100>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	491f      	ldr	r1, [pc, #124]	@ (8003528 <ADC_Enable+0x104>)
 80034ac:	0018      	movs	r0, r3
 80034ae:	f7fc fe2b 	bl	8000108 <__udivsi3>
 80034b2:	0003      	movs	r3, r0
 80034b4:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80034b6:	e002      	b.n	80034be <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	3b01      	subs	r3, #1
 80034bc:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d1f9      	bne.n	80034b8 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 80034c4:	f7ff fcb0 	bl	8002e28 <HAL_GetTick>
 80034c8:	0003      	movs	r3, r0
 80034ca:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80034cc:	e01b      	b.n	8003506 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80034ce:	f7ff fcab 	bl	8002e28 <HAL_GetTick>
 80034d2:	0002      	movs	r2, r0
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d914      	bls.n	8003506 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2201      	movs	r2, #1
 80034e4:	4013      	ands	r3, r2
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d00d      	beq.n	8003506 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034ee:	2210      	movs	r2, #16
 80034f0:	431a      	orrs	r2, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034fa:	2201      	movs	r2, #1
 80034fc:	431a      	orrs	r2, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e007      	b.n	8003516 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2201      	movs	r2, #1
 800350e:	4013      	ands	r3, r2
 8003510:	2b01      	cmp	r3, #1
 8003512:	d1dc      	bne.n	80034ce <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003514:	2300      	movs	r3, #0
}
 8003516:	0018      	movs	r0, r3
 8003518:	46bd      	mov	sp, r7
 800351a:	b004      	add	sp, #16
 800351c:	bd80      	pop	{r7, pc}
 800351e:	46c0      	nop			@ (mov r8, r8)
 8003520:	80000017 	.word	0x80000017
 8003524:	20000064 	.word	0x20000064
 8003528:	000f4240 	.word	0x000f4240

0800352c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003538:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800353e:	2250      	movs	r2, #80	@ 0x50
 8003540:	4013      	ands	r3, r2
 8003542:	d140      	bne.n	80035c6 <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003548:	2280      	movs	r2, #128	@ 0x80
 800354a:	0092      	lsls	r2, r2, #2
 800354c:	431a      	orrs	r2, r3
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	68da      	ldr	r2, [r3, #12]
 8003558:	23c0      	movs	r3, #192	@ 0xc0
 800355a:	011b      	lsls	r3, r3, #4
 800355c:	4013      	ands	r3, r2
 800355e:	d12d      	bne.n	80035bc <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003564:	2b00      	cmp	r3, #0
 8003566:	d129      	bne.n	80035bc <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2208      	movs	r2, #8
 8003570:	4013      	ands	r3, r2
 8003572:	2b08      	cmp	r3, #8
 8003574:	d122      	bne.n	80035bc <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	2204      	movs	r2, #4
 800357e:	4013      	ands	r3, r2
 8003580:	d110      	bne.n	80035a4 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	685a      	ldr	r2, [r3, #4]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	210c      	movs	r1, #12
 800358e:	438a      	bics	r2, r1
 8003590:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003596:	4a11      	ldr	r2, [pc, #68]	@ (80035dc <ADC_DMAConvCplt+0xb0>)
 8003598:	4013      	ands	r3, r2
 800359a:	2201      	movs	r2, #1
 800359c:	431a      	orrs	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	639a      	str	r2, [r3, #56]	@ 0x38
 80035a2:	e00b      	b.n	80035bc <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035a8:	2220      	movs	r2, #32
 80035aa:	431a      	orrs	r2, r3
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	639a      	str	r2, [r3, #56]	@ 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035b4:	2201      	movs	r2, #1
 80035b6:	431a      	orrs	r2, r3
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	0018      	movs	r0, r3
 80035c0:	f7ff fe22 	bl	8003208 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 80035c4:	e005      	b.n	80035d2 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	0010      	movs	r0, r2
 80035d0:	4798      	blx	r3
}
 80035d2:	46c0      	nop			@ (mov r8, r8)
 80035d4:	46bd      	mov	sp, r7
 80035d6:	b004      	add	sp, #16
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	46c0      	nop			@ (mov r8, r8)
 80035dc:	fffffefe 	.word	0xfffffefe

080035e0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ec:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	0018      	movs	r0, r3
 80035f2:	f7ff fe11 	bl	8003218 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80035f6:	46c0      	nop			@ (mov r8, r8)
 80035f8:	46bd      	mov	sp, r7
 80035fa:	b004      	add	sp, #16
 80035fc:	bd80      	pop	{r7, pc}

080035fe <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80035fe:	b580      	push	{r7, lr}
 8003600:	b084      	sub	sp, #16
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800360a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003610:	2240      	movs	r2, #64	@ 0x40
 8003612:	431a      	orrs	r2, r3
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800361c:	2204      	movs	r2, #4
 800361e:	431a      	orrs	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	63da      	str	r2, [r3, #60]	@ 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	0018      	movs	r0, r3
 8003628:	f7ff fdfe 	bl	8003228 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800362c:	46c0      	nop			@ (mov r8, r8)
 800362e:	46bd      	mov	sp, r7
 8003630:	b004      	add	sp, #16
 8003632:	bd80      	pop	{r7, pc}

08003634 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	0002      	movs	r2, r0
 800363c:	1dfb      	adds	r3, r7, #7
 800363e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003640:	1dfb      	adds	r3, r7, #7
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	2b7f      	cmp	r3, #127	@ 0x7f
 8003646:	d809      	bhi.n	800365c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003648:	1dfb      	adds	r3, r7, #7
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	001a      	movs	r2, r3
 800364e:	231f      	movs	r3, #31
 8003650:	401a      	ands	r2, r3
 8003652:	4b04      	ldr	r3, [pc, #16]	@ (8003664 <__NVIC_EnableIRQ+0x30>)
 8003654:	2101      	movs	r1, #1
 8003656:	4091      	lsls	r1, r2
 8003658:	000a      	movs	r2, r1
 800365a:	601a      	str	r2, [r3, #0]
  }
}
 800365c:	46c0      	nop			@ (mov r8, r8)
 800365e:	46bd      	mov	sp, r7
 8003660:	b002      	add	sp, #8
 8003662:	bd80      	pop	{r7, pc}
 8003664:	e000e100 	.word	0xe000e100

08003668 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003668:	b590      	push	{r4, r7, lr}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	0002      	movs	r2, r0
 8003670:	6039      	str	r1, [r7, #0]
 8003672:	1dfb      	adds	r3, r7, #7
 8003674:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003676:	1dfb      	adds	r3, r7, #7
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	2b7f      	cmp	r3, #127	@ 0x7f
 800367c:	d828      	bhi.n	80036d0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800367e:	4a2f      	ldr	r2, [pc, #188]	@ (800373c <__NVIC_SetPriority+0xd4>)
 8003680:	1dfb      	adds	r3, r7, #7
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	b25b      	sxtb	r3, r3
 8003686:	089b      	lsrs	r3, r3, #2
 8003688:	33c0      	adds	r3, #192	@ 0xc0
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	589b      	ldr	r3, [r3, r2]
 800368e:	1dfa      	adds	r2, r7, #7
 8003690:	7812      	ldrb	r2, [r2, #0]
 8003692:	0011      	movs	r1, r2
 8003694:	2203      	movs	r2, #3
 8003696:	400a      	ands	r2, r1
 8003698:	00d2      	lsls	r2, r2, #3
 800369a:	21ff      	movs	r1, #255	@ 0xff
 800369c:	4091      	lsls	r1, r2
 800369e:	000a      	movs	r2, r1
 80036a0:	43d2      	mvns	r2, r2
 80036a2:	401a      	ands	r2, r3
 80036a4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	019b      	lsls	r3, r3, #6
 80036aa:	22ff      	movs	r2, #255	@ 0xff
 80036ac:	401a      	ands	r2, r3
 80036ae:	1dfb      	adds	r3, r7, #7
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	0018      	movs	r0, r3
 80036b4:	2303      	movs	r3, #3
 80036b6:	4003      	ands	r3, r0
 80036b8:	00db      	lsls	r3, r3, #3
 80036ba:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80036bc:	481f      	ldr	r0, [pc, #124]	@ (800373c <__NVIC_SetPriority+0xd4>)
 80036be:	1dfb      	adds	r3, r7, #7
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	b25b      	sxtb	r3, r3
 80036c4:	089b      	lsrs	r3, r3, #2
 80036c6:	430a      	orrs	r2, r1
 80036c8:	33c0      	adds	r3, #192	@ 0xc0
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80036ce:	e031      	b.n	8003734 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80036d0:	4a1b      	ldr	r2, [pc, #108]	@ (8003740 <__NVIC_SetPriority+0xd8>)
 80036d2:	1dfb      	adds	r3, r7, #7
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	0019      	movs	r1, r3
 80036d8:	230f      	movs	r3, #15
 80036da:	400b      	ands	r3, r1
 80036dc:	3b08      	subs	r3, #8
 80036de:	089b      	lsrs	r3, r3, #2
 80036e0:	3306      	adds	r3, #6
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	18d3      	adds	r3, r2, r3
 80036e6:	3304      	adds	r3, #4
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	1dfa      	adds	r2, r7, #7
 80036ec:	7812      	ldrb	r2, [r2, #0]
 80036ee:	0011      	movs	r1, r2
 80036f0:	2203      	movs	r2, #3
 80036f2:	400a      	ands	r2, r1
 80036f4:	00d2      	lsls	r2, r2, #3
 80036f6:	21ff      	movs	r1, #255	@ 0xff
 80036f8:	4091      	lsls	r1, r2
 80036fa:	000a      	movs	r2, r1
 80036fc:	43d2      	mvns	r2, r2
 80036fe:	401a      	ands	r2, r3
 8003700:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	019b      	lsls	r3, r3, #6
 8003706:	22ff      	movs	r2, #255	@ 0xff
 8003708:	401a      	ands	r2, r3
 800370a:	1dfb      	adds	r3, r7, #7
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	0018      	movs	r0, r3
 8003710:	2303      	movs	r3, #3
 8003712:	4003      	ands	r3, r0
 8003714:	00db      	lsls	r3, r3, #3
 8003716:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003718:	4809      	ldr	r0, [pc, #36]	@ (8003740 <__NVIC_SetPriority+0xd8>)
 800371a:	1dfb      	adds	r3, r7, #7
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	001c      	movs	r4, r3
 8003720:	230f      	movs	r3, #15
 8003722:	4023      	ands	r3, r4
 8003724:	3b08      	subs	r3, #8
 8003726:	089b      	lsrs	r3, r3, #2
 8003728:	430a      	orrs	r2, r1
 800372a:	3306      	adds	r3, #6
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	18c3      	adds	r3, r0, r3
 8003730:	3304      	adds	r3, #4
 8003732:	601a      	str	r2, [r3, #0]
}
 8003734:	46c0      	nop			@ (mov r8, r8)
 8003736:	46bd      	mov	sp, r7
 8003738:	b003      	add	sp, #12
 800373a:	bd90      	pop	{r4, r7, pc}
 800373c:	e000e100 	.word	0xe000e100
 8003740:	e000ed00 	.word	0xe000ed00

08003744 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	1e5a      	subs	r2, r3, #1
 8003750:	2380      	movs	r3, #128	@ 0x80
 8003752:	045b      	lsls	r3, r3, #17
 8003754:	429a      	cmp	r2, r3
 8003756:	d301      	bcc.n	800375c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003758:	2301      	movs	r3, #1
 800375a:	e010      	b.n	800377e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800375c:	4b0a      	ldr	r3, [pc, #40]	@ (8003788 <SysTick_Config+0x44>)
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	3a01      	subs	r2, #1
 8003762:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003764:	2301      	movs	r3, #1
 8003766:	425b      	negs	r3, r3
 8003768:	2103      	movs	r1, #3
 800376a:	0018      	movs	r0, r3
 800376c:	f7ff ff7c 	bl	8003668 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003770:	4b05      	ldr	r3, [pc, #20]	@ (8003788 <SysTick_Config+0x44>)
 8003772:	2200      	movs	r2, #0
 8003774:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003776:	4b04      	ldr	r3, [pc, #16]	@ (8003788 <SysTick_Config+0x44>)
 8003778:	2207      	movs	r2, #7
 800377a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800377c:	2300      	movs	r3, #0
}
 800377e:	0018      	movs	r0, r3
 8003780:	46bd      	mov	sp, r7
 8003782:	b002      	add	sp, #8
 8003784:	bd80      	pop	{r7, pc}
 8003786:	46c0      	nop			@ (mov r8, r8)
 8003788:	e000e010 	.word	0xe000e010

0800378c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	60b9      	str	r1, [r7, #8]
 8003794:	607a      	str	r2, [r7, #4]
 8003796:	210f      	movs	r1, #15
 8003798:	187b      	adds	r3, r7, r1
 800379a:	1c02      	adds	r2, r0, #0
 800379c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800379e:	68ba      	ldr	r2, [r7, #8]
 80037a0:	187b      	adds	r3, r7, r1
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	b25b      	sxtb	r3, r3
 80037a6:	0011      	movs	r1, r2
 80037a8:	0018      	movs	r0, r3
 80037aa:	f7ff ff5d 	bl	8003668 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 80037ae:	46c0      	nop			@ (mov r8, r8)
 80037b0:	46bd      	mov	sp, r7
 80037b2:	b004      	add	sp, #16
 80037b4:	bd80      	pop	{r7, pc}

080037b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037b6:	b580      	push	{r7, lr}
 80037b8:	b082      	sub	sp, #8
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	0002      	movs	r2, r0
 80037be:	1dfb      	adds	r3, r7, #7
 80037c0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037c2:	1dfb      	adds	r3, r7, #7
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	b25b      	sxtb	r3, r3
 80037c8:	0018      	movs	r0, r3
 80037ca:	f7ff ff33 	bl	8003634 <__NVIC_EnableIRQ>
}
 80037ce:	46c0      	nop			@ (mov r8, r8)
 80037d0:	46bd      	mov	sp, r7
 80037d2:	b002      	add	sp, #8
 80037d4:	bd80      	pop	{r7, pc}

080037d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037d6:	b580      	push	{r7, lr}
 80037d8:	b082      	sub	sp, #8
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	0018      	movs	r0, r3
 80037e2:	f7ff ffaf 	bl	8003744 <SysTick_Config>
 80037e6:	0003      	movs	r3, r0
}
 80037e8:	0018      	movs	r0, r3
 80037ea:	46bd      	mov	sp, r7
 80037ec:	b002      	add	sp, #8
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80037f8:	2300      	movs	r3, #0
 80037fa:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d101      	bne.n	8003806 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e036      	b.n	8003874 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2221      	movs	r2, #33	@ 0x21
 800380a:	2102      	movs	r1, #2
 800380c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	4a18      	ldr	r2, [pc, #96]	@ (800387c <HAL_DMA_Init+0x8c>)
 800381a:	4013      	ands	r3, r2
 800381c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003826:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003832:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	695b      	ldr	r3, [r3, #20]
 8003838:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800383e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	69db      	ldr	r3, [r3, #28]
 8003844:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003846:	68fa      	ldr	r2, [r7, #12]
 8003848:	4313      	orrs	r3, r2
 800384a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	68fa      	ldr	r2, [r7, #12]
 8003852:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	0018      	movs	r0, r3
 8003858:	f000 f98c 	bl	8003b74 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2221      	movs	r2, #33	@ 0x21
 8003866:	2101      	movs	r1, #1
 8003868:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2220      	movs	r2, #32
 800386e:	2100      	movs	r1, #0
 8003870:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003872:	2300      	movs	r3, #0
}
 8003874:	0018      	movs	r0, r3
 8003876:	46bd      	mov	sp, r7
 8003878:	b004      	add	sp, #16
 800387a:	bd80      	pop	{r7, pc}
 800387c:	ffffc00f 	.word	0xffffc00f

08003880 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b086      	sub	sp, #24
 8003884:	af00      	add	r7, sp, #0
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	607a      	str	r2, [r7, #4]
 800388c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800388e:	2317      	movs	r3, #23
 8003890:	18fb      	adds	r3, r7, r3
 8003892:	2200      	movs	r2, #0
 8003894:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2220      	movs	r2, #32
 800389a:	5c9b      	ldrb	r3, [r3, r2]
 800389c:	2b01      	cmp	r3, #1
 800389e:	d101      	bne.n	80038a4 <HAL_DMA_Start_IT+0x24>
 80038a0:	2302      	movs	r3, #2
 80038a2:	e04f      	b.n	8003944 <HAL_DMA_Start_IT+0xc4>
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2220      	movs	r2, #32
 80038a8:	2101      	movs	r1, #1
 80038aa:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2221      	movs	r2, #33	@ 0x21
 80038b0:	5c9b      	ldrb	r3, [r3, r2]
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d13a      	bne.n	800392e <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2221      	movs	r2, #33	@ 0x21
 80038bc:	2102      	movs	r1, #2
 80038be:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2200      	movs	r2, #0
 80038c4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2101      	movs	r1, #1
 80038d2:	438a      	bics	r2, r1
 80038d4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	68b9      	ldr	r1, [r7, #8]
 80038dc:	68f8      	ldr	r0, [r7, #12]
 80038de:	f000 f91c 	bl	8003b1a <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d008      	beq.n	80038fc <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	210e      	movs	r1, #14
 80038f6:	430a      	orrs	r2, r1
 80038f8:	601a      	str	r2, [r3, #0]
 80038fa:	e00f      	b.n	800391c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	210a      	movs	r1, #10
 8003908:	430a      	orrs	r2, r1
 800390a:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	2104      	movs	r1, #4
 8003918:	438a      	bics	r2, r1
 800391a:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	2101      	movs	r1, #1
 8003928:	430a      	orrs	r2, r1
 800392a:	601a      	str	r2, [r3, #0]
 800392c:	e007      	b.n	800393e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2220      	movs	r2, #32
 8003932:	2100      	movs	r1, #0
 8003934:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003936:	2317      	movs	r3, #23
 8003938:	18fb      	adds	r3, r7, r3
 800393a:	2202      	movs	r2, #2
 800393c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800393e:	2317      	movs	r3, #23
 8003940:	18fb      	adds	r3, r7, r3
 8003942:	781b      	ldrb	r3, [r3, #0]
}
 8003944:	0018      	movs	r0, r3
 8003946:	46bd      	mov	sp, r7
 8003948:	b006      	add	sp, #24
 800394a:	bd80      	pop	{r7, pc}

0800394c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003954:	210f      	movs	r1, #15
 8003956:	187b      	adds	r3, r7, r1
 8003958:	2200      	movs	r2, #0
 800395a:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2221      	movs	r2, #33	@ 0x21
 8003960:	5c9b      	ldrb	r3, [r3, r2]
 8003962:	b2db      	uxtb	r3, r3
 8003964:	2b02      	cmp	r3, #2
 8003966:	d006      	beq.n	8003976 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2204      	movs	r2, #4
 800396c:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 800396e:	187b      	adds	r3, r7, r1
 8003970:	2201      	movs	r2, #1
 8003972:	701a      	strb	r2, [r3, #0]
 8003974:	e028      	b.n	80039c8 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	210e      	movs	r1, #14
 8003982:	438a      	bics	r2, r1
 8003984:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2101      	movs	r1, #1
 8003992:	438a      	bics	r2, r1
 8003994:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800399e:	2101      	movs	r1, #1
 80039a0:	4091      	lsls	r1, r2
 80039a2:	000a      	movs	r2, r1
 80039a4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2221      	movs	r2, #33	@ 0x21
 80039aa:	2101      	movs	r1, #1
 80039ac:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2220      	movs	r2, #32
 80039b2:	2100      	movs	r1, #0
 80039b4:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d004      	beq.n	80039c8 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	0010      	movs	r0, r2
 80039c6:	4798      	blx	r3
    }
  }
  return status;
 80039c8:	230f      	movs	r3, #15
 80039ca:	18fb      	adds	r3, r7, r3
 80039cc:	781b      	ldrb	r3, [r3, #0]
}
 80039ce:	0018      	movs	r0, r3
 80039d0:	46bd      	mov	sp, r7
 80039d2:	b004      	add	sp, #16
 80039d4:	bd80      	pop	{r7, pc}

080039d6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80039d6:	b580      	push	{r7, lr}
 80039d8:	b084      	sub	sp, #16
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f2:	2204      	movs	r2, #4
 80039f4:	409a      	lsls	r2, r3
 80039f6:	0013      	movs	r3, r2
 80039f8:	68fa      	ldr	r2, [r7, #12]
 80039fa:	4013      	ands	r3, r2
 80039fc:	d024      	beq.n	8003a48 <HAL_DMA_IRQHandler+0x72>
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	2204      	movs	r2, #4
 8003a02:	4013      	ands	r3, r2
 8003a04:	d020      	beq.n	8003a48 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2220      	movs	r2, #32
 8003a0e:	4013      	ands	r3, r2
 8003a10:	d107      	bne.n	8003a22 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	2104      	movs	r1, #4
 8003a1e:	438a      	bics	r2, r1
 8003a20:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a2a:	2104      	movs	r1, #4
 8003a2c:	4091      	lsls	r1, r2
 8003a2e:	000a      	movs	r2, r1
 8003a30:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d100      	bne.n	8003a3c <HAL_DMA_IRQHandler+0x66>
 8003a3a:	e06a      	b.n	8003b12 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	0010      	movs	r0, r2
 8003a44:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003a46:	e064      	b.n	8003b12 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a4c:	2202      	movs	r2, #2
 8003a4e:	409a      	lsls	r2, r3
 8003a50:	0013      	movs	r3, r2
 8003a52:	68fa      	ldr	r2, [r7, #12]
 8003a54:	4013      	ands	r3, r2
 8003a56:	d02b      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0xda>
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	2202      	movs	r2, #2
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	d027      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	2220      	movs	r2, #32
 8003a68:	4013      	ands	r3, r2
 8003a6a:	d10b      	bne.n	8003a84 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	210a      	movs	r1, #10
 8003a78:	438a      	bics	r2, r1
 8003a7a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2221      	movs	r2, #33	@ 0x21
 8003a80:	2101      	movs	r1, #1
 8003a82:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a8c:	2102      	movs	r1, #2
 8003a8e:	4091      	lsls	r1, r2
 8003a90:	000a      	movs	r2, r1
 8003a92:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2220      	movs	r2, #32
 8003a98:	2100      	movs	r1, #0
 8003a9a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d036      	beq.n	8003b12 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	0010      	movs	r0, r2
 8003aac:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003aae:	e030      	b.n	8003b12 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab4:	2208      	movs	r2, #8
 8003ab6:	409a      	lsls	r2, r3
 8003ab8:	0013      	movs	r3, r2
 8003aba:	68fa      	ldr	r2, [r7, #12]
 8003abc:	4013      	ands	r3, r2
 8003abe:	d028      	beq.n	8003b12 <HAL_DMA_IRQHandler+0x13c>
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	2208      	movs	r2, #8
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	d024      	beq.n	8003b12 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	210e      	movs	r1, #14
 8003ad4:	438a      	bics	r2, r1
 8003ad6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ae0:	2101      	movs	r1, #1
 8003ae2:	4091      	lsls	r1, r2
 8003ae4:	000a      	movs	r2, r1
 8003ae6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2221      	movs	r2, #33	@ 0x21
 8003af2:	2101      	movs	r1, #1
 8003af4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2220      	movs	r2, #32
 8003afa:	2100      	movs	r1, #0
 8003afc:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d005      	beq.n	8003b12 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	0010      	movs	r0, r2
 8003b0e:	4798      	blx	r3
    }
  }
}
 8003b10:	e7ff      	b.n	8003b12 <HAL_DMA_IRQHandler+0x13c>
 8003b12:	46c0      	nop			@ (mov r8, r8)
 8003b14:	46bd      	mov	sp, r7
 8003b16:	b004      	add	sp, #16
 8003b18:	bd80      	pop	{r7, pc}

08003b1a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b1a:	b580      	push	{r7, lr}
 8003b1c:	b084      	sub	sp, #16
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	60f8      	str	r0, [r7, #12]
 8003b22:	60b9      	str	r1, [r7, #8]
 8003b24:	607a      	str	r2, [r7, #4]
 8003b26:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b30:	2101      	movs	r1, #1
 8003b32:	4091      	lsls	r1, r2
 8003b34:	000a      	movs	r2, r1
 8003b36:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	683a      	ldr	r2, [r7, #0]
 8003b3e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	2b10      	cmp	r3, #16
 8003b46:	d108      	bne.n	8003b5a <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68ba      	ldr	r2, [r7, #8]
 8003b56:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003b58:	e007      	b.n	8003b6a <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	68ba      	ldr	r2, [r7, #8]
 8003b60:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	60da      	str	r2, [r3, #12]
}
 8003b6a:	46c0      	nop			@ (mov r8, r8)
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	b004      	add	sp, #16
 8003b70:	bd80      	pop	{r7, pc}
	...

08003b74 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a08      	ldr	r2, [pc, #32]	@ (8003ba4 <DMA_CalcBaseAndBitshift+0x30>)
 8003b82:	4694      	mov	ip, r2
 8003b84:	4463      	add	r3, ip
 8003b86:	2114      	movs	r1, #20
 8003b88:	0018      	movs	r0, r3
 8003b8a:	f7fc fabd 	bl	8000108 <__udivsi3>
 8003b8e:	0003      	movs	r3, r0
 8003b90:	009a      	lsls	r2, r3, #2
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a03      	ldr	r2, [pc, #12]	@ (8003ba8 <DMA_CalcBaseAndBitshift+0x34>)
 8003b9a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8003b9c:	46c0      	nop			@ (mov r8, r8)
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	b002      	add	sp, #8
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	bffdfff8 	.word	0xbffdfff8
 8003ba8:	40020000 	.word	0x40020000

08003bac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b086      	sub	sp, #24
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bba:	e14f      	b.n	8003e5c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	2101      	movs	r1, #1
 8003bc2:	697a      	ldr	r2, [r7, #20]
 8003bc4:	4091      	lsls	r1, r2
 8003bc6:	000a      	movs	r2, r1
 8003bc8:	4013      	ands	r3, r2
 8003bca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d100      	bne.n	8003bd4 <HAL_GPIO_Init+0x28>
 8003bd2:	e140      	b.n	8003e56 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	2203      	movs	r2, #3
 8003bda:	4013      	ands	r3, r2
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d005      	beq.n	8003bec <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	2203      	movs	r2, #3
 8003be6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003be8:	2b02      	cmp	r3, #2
 8003bea:	d130      	bne.n	8003c4e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	005b      	lsls	r3, r3, #1
 8003bf6:	2203      	movs	r2, #3
 8003bf8:	409a      	lsls	r2, r3
 8003bfa:	0013      	movs	r3, r2
 8003bfc:	43da      	mvns	r2, r3
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	4013      	ands	r3, r2
 8003c02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	68da      	ldr	r2, [r3, #12]
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	005b      	lsls	r3, r3, #1
 8003c0c:	409a      	lsls	r2, r3
 8003c0e:	0013      	movs	r3, r2
 8003c10:	693a      	ldr	r2, [r7, #16]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	693a      	ldr	r2, [r7, #16]
 8003c1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c22:	2201      	movs	r2, #1
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	409a      	lsls	r2, r3
 8003c28:	0013      	movs	r3, r2
 8003c2a:	43da      	mvns	r2, r3
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	4013      	ands	r3, r2
 8003c30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	091b      	lsrs	r3, r3, #4
 8003c38:	2201      	movs	r2, #1
 8003c3a:	401a      	ands	r2, r3
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	409a      	lsls	r2, r3
 8003c40:	0013      	movs	r3, r2
 8003c42:	693a      	ldr	r2, [r7, #16]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	693a      	ldr	r2, [r7, #16]
 8003c4c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	2203      	movs	r2, #3
 8003c54:	4013      	ands	r3, r2
 8003c56:	2b03      	cmp	r3, #3
 8003c58:	d017      	beq.n	8003c8a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	005b      	lsls	r3, r3, #1
 8003c64:	2203      	movs	r2, #3
 8003c66:	409a      	lsls	r2, r3
 8003c68:	0013      	movs	r3, r2
 8003c6a:	43da      	mvns	r2, r3
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	4013      	ands	r3, r2
 8003c70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	689a      	ldr	r2, [r3, #8]
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	005b      	lsls	r3, r3, #1
 8003c7a:	409a      	lsls	r2, r3
 8003c7c:	0013      	movs	r3, r2
 8003c7e:	693a      	ldr	r2, [r7, #16]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	693a      	ldr	r2, [r7, #16]
 8003c88:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	2203      	movs	r2, #3
 8003c90:	4013      	ands	r3, r2
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d123      	bne.n	8003cde <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	08da      	lsrs	r2, r3, #3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	3208      	adds	r2, #8
 8003c9e:	0092      	lsls	r2, r2, #2
 8003ca0:	58d3      	ldr	r3, [r2, r3]
 8003ca2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	2207      	movs	r2, #7
 8003ca8:	4013      	ands	r3, r2
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	220f      	movs	r2, #15
 8003cae:	409a      	lsls	r2, r3
 8003cb0:	0013      	movs	r3, r2
 8003cb2:	43da      	mvns	r2, r3
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	691a      	ldr	r2, [r3, #16]
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	2107      	movs	r1, #7
 8003cc2:	400b      	ands	r3, r1
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	409a      	lsls	r2, r3
 8003cc8:	0013      	movs	r3, r2
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	08da      	lsrs	r2, r3, #3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	3208      	adds	r2, #8
 8003cd8:	0092      	lsls	r2, r2, #2
 8003cda:	6939      	ldr	r1, [r7, #16]
 8003cdc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	005b      	lsls	r3, r3, #1
 8003ce8:	2203      	movs	r2, #3
 8003cea:	409a      	lsls	r2, r3
 8003cec:	0013      	movs	r3, r2
 8003cee:	43da      	mvns	r2, r3
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	2203      	movs	r2, #3
 8003cfc:	401a      	ands	r2, r3
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	005b      	lsls	r3, r3, #1
 8003d02:	409a      	lsls	r2, r3
 8003d04:	0013      	movs	r3, r2
 8003d06:	693a      	ldr	r2, [r7, #16]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	685a      	ldr	r2, [r3, #4]
 8003d16:	23c0      	movs	r3, #192	@ 0xc0
 8003d18:	029b      	lsls	r3, r3, #10
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	d100      	bne.n	8003d20 <HAL_GPIO_Init+0x174>
 8003d1e:	e09a      	b.n	8003e56 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d20:	4b54      	ldr	r3, [pc, #336]	@ (8003e74 <HAL_GPIO_Init+0x2c8>)
 8003d22:	699a      	ldr	r2, [r3, #24]
 8003d24:	4b53      	ldr	r3, [pc, #332]	@ (8003e74 <HAL_GPIO_Init+0x2c8>)
 8003d26:	2101      	movs	r1, #1
 8003d28:	430a      	orrs	r2, r1
 8003d2a:	619a      	str	r2, [r3, #24]
 8003d2c:	4b51      	ldr	r3, [pc, #324]	@ (8003e74 <HAL_GPIO_Init+0x2c8>)
 8003d2e:	699b      	ldr	r3, [r3, #24]
 8003d30:	2201      	movs	r2, #1
 8003d32:	4013      	ands	r3, r2
 8003d34:	60bb      	str	r3, [r7, #8]
 8003d36:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003d38:	4a4f      	ldr	r2, [pc, #316]	@ (8003e78 <HAL_GPIO_Init+0x2cc>)
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	089b      	lsrs	r3, r3, #2
 8003d3e:	3302      	adds	r3, #2
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	589b      	ldr	r3, [r3, r2]
 8003d44:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	2203      	movs	r2, #3
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	220f      	movs	r2, #15
 8003d50:	409a      	lsls	r2, r3
 8003d52:	0013      	movs	r3, r2
 8003d54:	43da      	mvns	r2, r3
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	4013      	ands	r3, r2
 8003d5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	2390      	movs	r3, #144	@ 0x90
 8003d60:	05db      	lsls	r3, r3, #23
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d013      	beq.n	8003d8e <HAL_GPIO_Init+0x1e2>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4a44      	ldr	r2, [pc, #272]	@ (8003e7c <HAL_GPIO_Init+0x2d0>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d00d      	beq.n	8003d8a <HAL_GPIO_Init+0x1de>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a43      	ldr	r2, [pc, #268]	@ (8003e80 <HAL_GPIO_Init+0x2d4>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d007      	beq.n	8003d86 <HAL_GPIO_Init+0x1da>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a42      	ldr	r2, [pc, #264]	@ (8003e84 <HAL_GPIO_Init+0x2d8>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d101      	bne.n	8003d82 <HAL_GPIO_Init+0x1d6>
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e006      	b.n	8003d90 <HAL_GPIO_Init+0x1e4>
 8003d82:	2305      	movs	r3, #5
 8003d84:	e004      	b.n	8003d90 <HAL_GPIO_Init+0x1e4>
 8003d86:	2302      	movs	r3, #2
 8003d88:	e002      	b.n	8003d90 <HAL_GPIO_Init+0x1e4>
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e000      	b.n	8003d90 <HAL_GPIO_Init+0x1e4>
 8003d8e:	2300      	movs	r3, #0
 8003d90:	697a      	ldr	r2, [r7, #20]
 8003d92:	2103      	movs	r1, #3
 8003d94:	400a      	ands	r2, r1
 8003d96:	0092      	lsls	r2, r2, #2
 8003d98:	4093      	lsls	r3, r2
 8003d9a:	693a      	ldr	r2, [r7, #16]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003da0:	4935      	ldr	r1, [pc, #212]	@ (8003e78 <HAL_GPIO_Init+0x2cc>)
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	089b      	lsrs	r3, r3, #2
 8003da6:	3302      	adds	r3, #2
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	693a      	ldr	r2, [r7, #16]
 8003dac:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003dae:	4b36      	ldr	r3, [pc, #216]	@ (8003e88 <HAL_GPIO_Init+0x2dc>)
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	43da      	mvns	r2, r3
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	4013      	ands	r3, r2
 8003dbc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	685a      	ldr	r2, [r3, #4]
 8003dc2:	2380      	movs	r3, #128	@ 0x80
 8003dc4:	035b      	lsls	r3, r3, #13
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	d003      	beq.n	8003dd2 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8003dca:	693a      	ldr	r2, [r7, #16]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003dd2:	4b2d      	ldr	r3, [pc, #180]	@ (8003e88 <HAL_GPIO_Init+0x2dc>)
 8003dd4:	693a      	ldr	r2, [r7, #16]
 8003dd6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003dd8:	4b2b      	ldr	r3, [pc, #172]	@ (8003e88 <HAL_GPIO_Init+0x2dc>)
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	43da      	mvns	r2, r3
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	4013      	ands	r3, r2
 8003de6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	685a      	ldr	r2, [r3, #4]
 8003dec:	2380      	movs	r3, #128	@ 0x80
 8003dee:	039b      	lsls	r3, r3, #14
 8003df0:	4013      	ands	r3, r2
 8003df2:	d003      	beq.n	8003dfc <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8003df4:	693a      	ldr	r2, [r7, #16]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003dfc:	4b22      	ldr	r3, [pc, #136]	@ (8003e88 <HAL_GPIO_Init+0x2dc>)
 8003dfe:	693a      	ldr	r2, [r7, #16]
 8003e00:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8003e02:	4b21      	ldr	r3, [pc, #132]	@ (8003e88 <HAL_GPIO_Init+0x2dc>)
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	43da      	mvns	r2, r3
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	4013      	ands	r3, r2
 8003e10:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	685a      	ldr	r2, [r3, #4]
 8003e16:	2380      	movs	r3, #128	@ 0x80
 8003e18:	029b      	lsls	r3, r3, #10
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	d003      	beq.n	8003e26 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8003e1e:	693a      	ldr	r2, [r7, #16]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003e26:	4b18      	ldr	r3, [pc, #96]	@ (8003e88 <HAL_GPIO_Init+0x2dc>)
 8003e28:	693a      	ldr	r2, [r7, #16]
 8003e2a:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8003e2c:	4b16      	ldr	r3, [pc, #88]	@ (8003e88 <HAL_GPIO_Init+0x2dc>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	43da      	mvns	r2, r3
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	4013      	ands	r3, r2
 8003e3a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	685a      	ldr	r2, [r3, #4]
 8003e40:	2380      	movs	r3, #128	@ 0x80
 8003e42:	025b      	lsls	r3, r3, #9
 8003e44:	4013      	ands	r3, r2
 8003e46:	d003      	beq.n	8003e50 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8003e48:	693a      	ldr	r2, [r7, #16]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003e50:	4b0d      	ldr	r3, [pc, #52]	@ (8003e88 <HAL_GPIO_Init+0x2dc>)
 8003e52:	693a      	ldr	r2, [r7, #16]
 8003e54:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	3301      	adds	r3, #1
 8003e5a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	40da      	lsrs	r2, r3
 8003e64:	1e13      	subs	r3, r2, #0
 8003e66:	d000      	beq.n	8003e6a <HAL_GPIO_Init+0x2be>
 8003e68:	e6a8      	b.n	8003bbc <HAL_GPIO_Init+0x10>
  } 
}
 8003e6a:	46c0      	nop			@ (mov r8, r8)
 8003e6c:	46c0      	nop			@ (mov r8, r8)
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	b006      	add	sp, #24
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	40021000 	.word	0x40021000
 8003e78:	40010000 	.word	0x40010000
 8003e7c:	48000400 	.word	0x48000400
 8003e80:	48000800 	.word	0x48000800
 8003e84:	48000c00 	.word	0x48000c00
 8003e88:	40010400 	.word	0x40010400

08003e8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	0008      	movs	r0, r1
 8003e96:	0011      	movs	r1, r2
 8003e98:	1cbb      	adds	r3, r7, #2
 8003e9a:	1c02      	adds	r2, r0, #0
 8003e9c:	801a      	strh	r2, [r3, #0]
 8003e9e:	1c7b      	adds	r3, r7, #1
 8003ea0:	1c0a      	adds	r2, r1, #0
 8003ea2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ea4:	1c7b      	adds	r3, r7, #1
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d004      	beq.n	8003eb6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003eac:	1cbb      	adds	r3, r7, #2
 8003eae:	881a      	ldrh	r2, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003eb4:	e003      	b.n	8003ebe <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003eb6:	1cbb      	adds	r3, r7, #2
 8003eb8:	881a      	ldrh	r2, [r3, #0]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003ebe:	46c0      	nop			@ (mov r8, r8)
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	b002      	add	sp, #8
 8003ec4:	bd80      	pop	{r7, pc}
	...

08003ec8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b088      	sub	sp, #32
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d101      	bne.n	8003eda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e301      	b.n	80044de <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	d100      	bne.n	8003ee6 <HAL_RCC_OscConfig+0x1e>
 8003ee4:	e08d      	b.n	8004002 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003ee6:	4bc3      	ldr	r3, [pc, #780]	@ (80041f4 <HAL_RCC_OscConfig+0x32c>)
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	220c      	movs	r2, #12
 8003eec:	4013      	ands	r3, r2
 8003eee:	2b04      	cmp	r3, #4
 8003ef0:	d00e      	beq.n	8003f10 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003ef2:	4bc0      	ldr	r3, [pc, #768]	@ (80041f4 <HAL_RCC_OscConfig+0x32c>)
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	220c      	movs	r2, #12
 8003ef8:	4013      	ands	r3, r2
 8003efa:	2b08      	cmp	r3, #8
 8003efc:	d116      	bne.n	8003f2c <HAL_RCC_OscConfig+0x64>
 8003efe:	4bbd      	ldr	r3, [pc, #756]	@ (80041f4 <HAL_RCC_OscConfig+0x32c>)
 8003f00:	685a      	ldr	r2, [r3, #4]
 8003f02:	2380      	movs	r3, #128	@ 0x80
 8003f04:	025b      	lsls	r3, r3, #9
 8003f06:	401a      	ands	r2, r3
 8003f08:	2380      	movs	r3, #128	@ 0x80
 8003f0a:	025b      	lsls	r3, r3, #9
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d10d      	bne.n	8003f2c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f10:	4bb8      	ldr	r3, [pc, #736]	@ (80041f4 <HAL_RCC_OscConfig+0x32c>)
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	2380      	movs	r3, #128	@ 0x80
 8003f16:	029b      	lsls	r3, r3, #10
 8003f18:	4013      	ands	r3, r2
 8003f1a:	d100      	bne.n	8003f1e <HAL_RCC_OscConfig+0x56>
 8003f1c:	e070      	b.n	8004000 <HAL_RCC_OscConfig+0x138>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d000      	beq.n	8003f28 <HAL_RCC_OscConfig+0x60>
 8003f26:	e06b      	b.n	8004000 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e2d8      	b.n	80044de <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d107      	bne.n	8003f44 <HAL_RCC_OscConfig+0x7c>
 8003f34:	4baf      	ldr	r3, [pc, #700]	@ (80041f4 <HAL_RCC_OscConfig+0x32c>)
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	4bae      	ldr	r3, [pc, #696]	@ (80041f4 <HAL_RCC_OscConfig+0x32c>)
 8003f3a:	2180      	movs	r1, #128	@ 0x80
 8003f3c:	0249      	lsls	r1, r1, #9
 8003f3e:	430a      	orrs	r2, r1
 8003f40:	601a      	str	r2, [r3, #0]
 8003f42:	e02f      	b.n	8003fa4 <HAL_RCC_OscConfig+0xdc>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d10c      	bne.n	8003f66 <HAL_RCC_OscConfig+0x9e>
 8003f4c:	4ba9      	ldr	r3, [pc, #676]	@ (80041f4 <HAL_RCC_OscConfig+0x32c>)
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	4ba8      	ldr	r3, [pc, #672]	@ (80041f4 <HAL_RCC_OscConfig+0x32c>)
 8003f52:	49a9      	ldr	r1, [pc, #676]	@ (80041f8 <HAL_RCC_OscConfig+0x330>)
 8003f54:	400a      	ands	r2, r1
 8003f56:	601a      	str	r2, [r3, #0]
 8003f58:	4ba6      	ldr	r3, [pc, #664]	@ (80041f4 <HAL_RCC_OscConfig+0x32c>)
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	4ba5      	ldr	r3, [pc, #660]	@ (80041f4 <HAL_RCC_OscConfig+0x32c>)
 8003f5e:	49a7      	ldr	r1, [pc, #668]	@ (80041fc <HAL_RCC_OscConfig+0x334>)
 8003f60:	400a      	ands	r2, r1
 8003f62:	601a      	str	r2, [r3, #0]
 8003f64:	e01e      	b.n	8003fa4 <HAL_RCC_OscConfig+0xdc>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	2b05      	cmp	r3, #5
 8003f6c:	d10e      	bne.n	8003f8c <HAL_RCC_OscConfig+0xc4>
 8003f6e:	4ba1      	ldr	r3, [pc, #644]	@ (80041f4 <HAL_RCC_OscConfig+0x32c>)
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	4ba0      	ldr	r3, [pc, #640]	@ (80041f4 <HAL_RCC_OscConfig+0x32c>)
 8003f74:	2180      	movs	r1, #128	@ 0x80
 8003f76:	02c9      	lsls	r1, r1, #11
 8003f78:	430a      	orrs	r2, r1
 8003f7a:	601a      	str	r2, [r3, #0]
 8003f7c:	4b9d      	ldr	r3, [pc, #628]	@ (80041f4 <HAL_RCC_OscConfig+0x32c>)
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	4b9c      	ldr	r3, [pc, #624]	@ (80041f4 <HAL_RCC_OscConfig+0x32c>)
 8003f82:	2180      	movs	r1, #128	@ 0x80
 8003f84:	0249      	lsls	r1, r1, #9
 8003f86:	430a      	orrs	r2, r1
 8003f88:	601a      	str	r2, [r3, #0]
 8003f8a:	e00b      	b.n	8003fa4 <HAL_RCC_OscConfig+0xdc>
 8003f8c:	4b99      	ldr	r3, [pc, #612]	@ (80041f4 <HAL_RCC_OscConfig+0x32c>)
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	4b98      	ldr	r3, [pc, #608]	@ (80041f4 <HAL_RCC_OscConfig+0x32c>)
 8003f92:	4999      	ldr	r1, [pc, #612]	@ (80041f8 <HAL_RCC_OscConfig+0x330>)
 8003f94:	400a      	ands	r2, r1
 8003f96:	601a      	str	r2, [r3, #0]
 8003f98:	4b96      	ldr	r3, [pc, #600]	@ (80041f4 <HAL_RCC_OscConfig+0x32c>)
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	4b95      	ldr	r3, [pc, #596]	@ (80041f4 <HAL_RCC_OscConfig+0x32c>)
 8003f9e:	4997      	ldr	r1, [pc, #604]	@ (80041fc <HAL_RCC_OscConfig+0x334>)
 8003fa0:	400a      	ands	r2, r1
 8003fa2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d014      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fac:	f7fe ff3c 	bl	8002e28 <HAL_GetTick>
 8003fb0:	0003      	movs	r3, r0
 8003fb2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fb4:	e008      	b.n	8003fc8 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fb6:	f7fe ff37 	bl	8002e28 <HAL_GetTick>
 8003fba:	0002      	movs	r2, r0
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	2b64      	cmp	r3, #100	@ 0x64
 8003fc2:	d901      	bls.n	8003fc8 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8003fc4:	2303      	movs	r3, #3
 8003fc6:	e28a      	b.n	80044de <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fc8:	4b8a      	ldr	r3, [pc, #552]	@ (80041f4 <HAL_RCC_OscConfig+0x32c>)
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	2380      	movs	r3, #128	@ 0x80
 8003fce:	029b      	lsls	r3, r3, #10
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	d0f0      	beq.n	8003fb6 <HAL_RCC_OscConfig+0xee>
 8003fd4:	e015      	b.n	8004002 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fd6:	f7fe ff27 	bl	8002e28 <HAL_GetTick>
 8003fda:	0003      	movs	r3, r0
 8003fdc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fde:	e008      	b.n	8003ff2 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fe0:	f7fe ff22 	bl	8002e28 <HAL_GetTick>
 8003fe4:	0002      	movs	r2, r0
 8003fe6:	69bb      	ldr	r3, [r7, #24]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	2b64      	cmp	r3, #100	@ 0x64
 8003fec:	d901      	bls.n	8003ff2 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e275      	b.n	80044de <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ff2:	4b80      	ldr	r3, [pc, #512]	@ (80041f4 <HAL_RCC_OscConfig+0x32c>)
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	2380      	movs	r3, #128	@ 0x80
 8003ff8:	029b      	lsls	r3, r3, #10
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	d1f0      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x118>
 8003ffe:	e000      	b.n	8004002 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004000:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2202      	movs	r2, #2
 8004008:	4013      	ands	r3, r2
 800400a:	d100      	bne.n	800400e <HAL_RCC_OscConfig+0x146>
 800400c:	e069      	b.n	80040e2 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800400e:	4b79      	ldr	r3, [pc, #484]	@ (80041f4 <HAL_RCC_OscConfig+0x32c>)
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	220c      	movs	r2, #12
 8004014:	4013      	ands	r3, r2
 8004016:	d00b      	beq.n	8004030 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004018:	4b76      	ldr	r3, [pc, #472]	@ (80041f4 <HAL_RCC_OscConfig+0x32c>)
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	220c      	movs	r2, #12
 800401e:	4013      	ands	r3, r2
 8004020:	2b08      	cmp	r3, #8
 8004022:	d11c      	bne.n	800405e <HAL_RCC_OscConfig+0x196>
 8004024:	4b73      	ldr	r3, [pc, #460]	@ (80041f4 <HAL_RCC_OscConfig+0x32c>)
 8004026:	685a      	ldr	r2, [r3, #4]
 8004028:	2380      	movs	r3, #128	@ 0x80
 800402a:	025b      	lsls	r3, r3, #9
 800402c:	4013      	ands	r3, r2
 800402e:	d116      	bne.n	800405e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004030:	4b70      	ldr	r3, [pc, #448]	@ (80041f4 <HAL_RCC_OscConfig+0x32c>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	2202      	movs	r2, #2
 8004036:	4013      	ands	r3, r2
 8004038:	d005      	beq.n	8004046 <HAL_RCC_OscConfig+0x17e>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	2b01      	cmp	r3, #1
 8004040:	d001      	beq.n	8004046 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e24b      	b.n	80044de <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004046:	4b6b      	ldr	r3, [pc, #428]	@ (80041f4 <HAL_RCC_OscConfig+0x32c>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	22f8      	movs	r2, #248	@ 0xf8
 800404c:	4393      	bics	r3, r2
 800404e:	0019      	movs	r1, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	691b      	ldr	r3, [r3, #16]
 8004054:	00da      	lsls	r2, r3, #3
 8004056:	4b67      	ldr	r3, [pc, #412]	@ (80041f4 <HAL_RCC_OscConfig+0x32c>)
 8004058:	430a      	orrs	r2, r1
 800405a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800405c:	e041      	b.n	80040e2 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d024      	beq.n	80040b0 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004066:	4b63      	ldr	r3, [pc, #396]	@ (80041f4 <HAL_RCC_OscConfig+0x32c>)
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	4b62      	ldr	r3, [pc, #392]	@ (80041f4 <HAL_RCC_OscConfig+0x32c>)
 800406c:	2101      	movs	r1, #1
 800406e:	430a      	orrs	r2, r1
 8004070:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004072:	f7fe fed9 	bl	8002e28 <HAL_GetTick>
 8004076:	0003      	movs	r3, r0
 8004078:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800407a:	e008      	b.n	800408e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800407c:	f7fe fed4 	bl	8002e28 <HAL_GetTick>
 8004080:	0002      	movs	r2, r0
 8004082:	69bb      	ldr	r3, [r7, #24]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	2b02      	cmp	r3, #2
 8004088:	d901      	bls.n	800408e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e227      	b.n	80044de <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800408e:	4b59      	ldr	r3, [pc, #356]	@ (80041f4 <HAL_RCC_OscConfig+0x32c>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2202      	movs	r2, #2
 8004094:	4013      	ands	r3, r2
 8004096:	d0f1      	beq.n	800407c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004098:	4b56      	ldr	r3, [pc, #344]	@ (80041f4 <HAL_RCC_OscConfig+0x32c>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	22f8      	movs	r2, #248	@ 0xf8
 800409e:	4393      	bics	r3, r2
 80040a0:	0019      	movs	r1, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	691b      	ldr	r3, [r3, #16]
 80040a6:	00da      	lsls	r2, r3, #3
 80040a8:	4b52      	ldr	r3, [pc, #328]	@ (80041f4 <HAL_RCC_OscConfig+0x32c>)
 80040aa:	430a      	orrs	r2, r1
 80040ac:	601a      	str	r2, [r3, #0]
 80040ae:	e018      	b.n	80040e2 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040b0:	4b50      	ldr	r3, [pc, #320]	@ (80041f4 <HAL_RCC_OscConfig+0x32c>)
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	4b4f      	ldr	r3, [pc, #316]	@ (80041f4 <HAL_RCC_OscConfig+0x32c>)
 80040b6:	2101      	movs	r1, #1
 80040b8:	438a      	bics	r2, r1
 80040ba:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040bc:	f7fe feb4 	bl	8002e28 <HAL_GetTick>
 80040c0:	0003      	movs	r3, r0
 80040c2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040c4:	e008      	b.n	80040d8 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040c6:	f7fe feaf 	bl	8002e28 <HAL_GetTick>
 80040ca:	0002      	movs	r2, r0
 80040cc:	69bb      	ldr	r3, [r7, #24]
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	d901      	bls.n	80040d8 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80040d4:	2303      	movs	r3, #3
 80040d6:	e202      	b.n	80044de <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040d8:	4b46      	ldr	r3, [pc, #280]	@ (80041f4 <HAL_RCC_OscConfig+0x32c>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	2202      	movs	r2, #2
 80040de:	4013      	ands	r3, r2
 80040e0:	d1f1      	bne.n	80040c6 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2208      	movs	r2, #8
 80040e8:	4013      	ands	r3, r2
 80040ea:	d036      	beq.n	800415a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	69db      	ldr	r3, [r3, #28]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d019      	beq.n	8004128 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040f4:	4b3f      	ldr	r3, [pc, #252]	@ (80041f4 <HAL_RCC_OscConfig+0x32c>)
 80040f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80040f8:	4b3e      	ldr	r3, [pc, #248]	@ (80041f4 <HAL_RCC_OscConfig+0x32c>)
 80040fa:	2101      	movs	r1, #1
 80040fc:	430a      	orrs	r2, r1
 80040fe:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004100:	f7fe fe92 	bl	8002e28 <HAL_GetTick>
 8004104:	0003      	movs	r3, r0
 8004106:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004108:	e008      	b.n	800411c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800410a:	f7fe fe8d 	bl	8002e28 <HAL_GetTick>
 800410e:	0002      	movs	r2, r0
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	2b02      	cmp	r3, #2
 8004116:	d901      	bls.n	800411c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8004118:	2303      	movs	r3, #3
 800411a:	e1e0      	b.n	80044de <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800411c:	4b35      	ldr	r3, [pc, #212]	@ (80041f4 <HAL_RCC_OscConfig+0x32c>)
 800411e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004120:	2202      	movs	r2, #2
 8004122:	4013      	ands	r3, r2
 8004124:	d0f1      	beq.n	800410a <HAL_RCC_OscConfig+0x242>
 8004126:	e018      	b.n	800415a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004128:	4b32      	ldr	r3, [pc, #200]	@ (80041f4 <HAL_RCC_OscConfig+0x32c>)
 800412a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800412c:	4b31      	ldr	r3, [pc, #196]	@ (80041f4 <HAL_RCC_OscConfig+0x32c>)
 800412e:	2101      	movs	r1, #1
 8004130:	438a      	bics	r2, r1
 8004132:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004134:	f7fe fe78 	bl	8002e28 <HAL_GetTick>
 8004138:	0003      	movs	r3, r0
 800413a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800413c:	e008      	b.n	8004150 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800413e:	f7fe fe73 	bl	8002e28 <HAL_GetTick>
 8004142:	0002      	movs	r2, r0
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	2b02      	cmp	r3, #2
 800414a:	d901      	bls.n	8004150 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	e1c6      	b.n	80044de <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004150:	4b28      	ldr	r3, [pc, #160]	@ (80041f4 <HAL_RCC_OscConfig+0x32c>)
 8004152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004154:	2202      	movs	r2, #2
 8004156:	4013      	ands	r3, r2
 8004158:	d1f1      	bne.n	800413e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	2204      	movs	r2, #4
 8004160:	4013      	ands	r3, r2
 8004162:	d100      	bne.n	8004166 <HAL_RCC_OscConfig+0x29e>
 8004164:	e0b4      	b.n	80042d0 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004166:	201f      	movs	r0, #31
 8004168:	183b      	adds	r3, r7, r0
 800416a:	2200      	movs	r2, #0
 800416c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800416e:	4b21      	ldr	r3, [pc, #132]	@ (80041f4 <HAL_RCC_OscConfig+0x32c>)
 8004170:	69da      	ldr	r2, [r3, #28]
 8004172:	2380      	movs	r3, #128	@ 0x80
 8004174:	055b      	lsls	r3, r3, #21
 8004176:	4013      	ands	r3, r2
 8004178:	d110      	bne.n	800419c <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800417a:	4b1e      	ldr	r3, [pc, #120]	@ (80041f4 <HAL_RCC_OscConfig+0x32c>)
 800417c:	69da      	ldr	r2, [r3, #28]
 800417e:	4b1d      	ldr	r3, [pc, #116]	@ (80041f4 <HAL_RCC_OscConfig+0x32c>)
 8004180:	2180      	movs	r1, #128	@ 0x80
 8004182:	0549      	lsls	r1, r1, #21
 8004184:	430a      	orrs	r2, r1
 8004186:	61da      	str	r2, [r3, #28]
 8004188:	4b1a      	ldr	r3, [pc, #104]	@ (80041f4 <HAL_RCC_OscConfig+0x32c>)
 800418a:	69da      	ldr	r2, [r3, #28]
 800418c:	2380      	movs	r3, #128	@ 0x80
 800418e:	055b      	lsls	r3, r3, #21
 8004190:	4013      	ands	r3, r2
 8004192:	60fb      	str	r3, [r7, #12]
 8004194:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004196:	183b      	adds	r3, r7, r0
 8004198:	2201      	movs	r2, #1
 800419a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800419c:	4b18      	ldr	r3, [pc, #96]	@ (8004200 <HAL_RCC_OscConfig+0x338>)
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	2380      	movs	r3, #128	@ 0x80
 80041a2:	005b      	lsls	r3, r3, #1
 80041a4:	4013      	ands	r3, r2
 80041a6:	d11a      	bne.n	80041de <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041a8:	4b15      	ldr	r3, [pc, #84]	@ (8004200 <HAL_RCC_OscConfig+0x338>)
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	4b14      	ldr	r3, [pc, #80]	@ (8004200 <HAL_RCC_OscConfig+0x338>)
 80041ae:	2180      	movs	r1, #128	@ 0x80
 80041b0:	0049      	lsls	r1, r1, #1
 80041b2:	430a      	orrs	r2, r1
 80041b4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041b6:	f7fe fe37 	bl	8002e28 <HAL_GetTick>
 80041ba:	0003      	movs	r3, r0
 80041bc:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041be:	e008      	b.n	80041d2 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041c0:	f7fe fe32 	bl	8002e28 <HAL_GetTick>
 80041c4:	0002      	movs	r2, r0
 80041c6:	69bb      	ldr	r3, [r7, #24]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	2b64      	cmp	r3, #100	@ 0x64
 80041cc:	d901      	bls.n	80041d2 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e185      	b.n	80044de <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041d2:	4b0b      	ldr	r3, [pc, #44]	@ (8004200 <HAL_RCC_OscConfig+0x338>)
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	2380      	movs	r3, #128	@ 0x80
 80041d8:	005b      	lsls	r3, r3, #1
 80041da:	4013      	ands	r3, r2
 80041dc:	d0f0      	beq.n	80041c0 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d10e      	bne.n	8004204 <HAL_RCC_OscConfig+0x33c>
 80041e6:	4b03      	ldr	r3, [pc, #12]	@ (80041f4 <HAL_RCC_OscConfig+0x32c>)
 80041e8:	6a1a      	ldr	r2, [r3, #32]
 80041ea:	4b02      	ldr	r3, [pc, #8]	@ (80041f4 <HAL_RCC_OscConfig+0x32c>)
 80041ec:	2101      	movs	r1, #1
 80041ee:	430a      	orrs	r2, r1
 80041f0:	621a      	str	r2, [r3, #32]
 80041f2:	e035      	b.n	8004260 <HAL_RCC_OscConfig+0x398>
 80041f4:	40021000 	.word	0x40021000
 80041f8:	fffeffff 	.word	0xfffeffff
 80041fc:	fffbffff 	.word	0xfffbffff
 8004200:	40007000 	.word	0x40007000
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d10c      	bne.n	8004226 <HAL_RCC_OscConfig+0x35e>
 800420c:	4bb6      	ldr	r3, [pc, #728]	@ (80044e8 <HAL_RCC_OscConfig+0x620>)
 800420e:	6a1a      	ldr	r2, [r3, #32]
 8004210:	4bb5      	ldr	r3, [pc, #724]	@ (80044e8 <HAL_RCC_OscConfig+0x620>)
 8004212:	2101      	movs	r1, #1
 8004214:	438a      	bics	r2, r1
 8004216:	621a      	str	r2, [r3, #32]
 8004218:	4bb3      	ldr	r3, [pc, #716]	@ (80044e8 <HAL_RCC_OscConfig+0x620>)
 800421a:	6a1a      	ldr	r2, [r3, #32]
 800421c:	4bb2      	ldr	r3, [pc, #712]	@ (80044e8 <HAL_RCC_OscConfig+0x620>)
 800421e:	2104      	movs	r1, #4
 8004220:	438a      	bics	r2, r1
 8004222:	621a      	str	r2, [r3, #32]
 8004224:	e01c      	b.n	8004260 <HAL_RCC_OscConfig+0x398>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	2b05      	cmp	r3, #5
 800422c:	d10c      	bne.n	8004248 <HAL_RCC_OscConfig+0x380>
 800422e:	4bae      	ldr	r3, [pc, #696]	@ (80044e8 <HAL_RCC_OscConfig+0x620>)
 8004230:	6a1a      	ldr	r2, [r3, #32]
 8004232:	4bad      	ldr	r3, [pc, #692]	@ (80044e8 <HAL_RCC_OscConfig+0x620>)
 8004234:	2104      	movs	r1, #4
 8004236:	430a      	orrs	r2, r1
 8004238:	621a      	str	r2, [r3, #32]
 800423a:	4bab      	ldr	r3, [pc, #684]	@ (80044e8 <HAL_RCC_OscConfig+0x620>)
 800423c:	6a1a      	ldr	r2, [r3, #32]
 800423e:	4baa      	ldr	r3, [pc, #680]	@ (80044e8 <HAL_RCC_OscConfig+0x620>)
 8004240:	2101      	movs	r1, #1
 8004242:	430a      	orrs	r2, r1
 8004244:	621a      	str	r2, [r3, #32]
 8004246:	e00b      	b.n	8004260 <HAL_RCC_OscConfig+0x398>
 8004248:	4ba7      	ldr	r3, [pc, #668]	@ (80044e8 <HAL_RCC_OscConfig+0x620>)
 800424a:	6a1a      	ldr	r2, [r3, #32]
 800424c:	4ba6      	ldr	r3, [pc, #664]	@ (80044e8 <HAL_RCC_OscConfig+0x620>)
 800424e:	2101      	movs	r1, #1
 8004250:	438a      	bics	r2, r1
 8004252:	621a      	str	r2, [r3, #32]
 8004254:	4ba4      	ldr	r3, [pc, #656]	@ (80044e8 <HAL_RCC_OscConfig+0x620>)
 8004256:	6a1a      	ldr	r2, [r3, #32]
 8004258:	4ba3      	ldr	r3, [pc, #652]	@ (80044e8 <HAL_RCC_OscConfig+0x620>)
 800425a:	2104      	movs	r1, #4
 800425c:	438a      	bics	r2, r1
 800425e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d014      	beq.n	8004292 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004268:	f7fe fdde 	bl	8002e28 <HAL_GetTick>
 800426c:	0003      	movs	r3, r0
 800426e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004270:	e009      	b.n	8004286 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004272:	f7fe fdd9 	bl	8002e28 <HAL_GetTick>
 8004276:	0002      	movs	r2, r0
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	4a9b      	ldr	r2, [pc, #620]	@ (80044ec <HAL_RCC_OscConfig+0x624>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d901      	bls.n	8004286 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e12b      	b.n	80044de <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004286:	4b98      	ldr	r3, [pc, #608]	@ (80044e8 <HAL_RCC_OscConfig+0x620>)
 8004288:	6a1b      	ldr	r3, [r3, #32]
 800428a:	2202      	movs	r2, #2
 800428c:	4013      	ands	r3, r2
 800428e:	d0f0      	beq.n	8004272 <HAL_RCC_OscConfig+0x3aa>
 8004290:	e013      	b.n	80042ba <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004292:	f7fe fdc9 	bl	8002e28 <HAL_GetTick>
 8004296:	0003      	movs	r3, r0
 8004298:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800429a:	e009      	b.n	80042b0 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800429c:	f7fe fdc4 	bl	8002e28 <HAL_GetTick>
 80042a0:	0002      	movs	r2, r0
 80042a2:	69bb      	ldr	r3, [r7, #24]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	4a91      	ldr	r2, [pc, #580]	@ (80044ec <HAL_RCC_OscConfig+0x624>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d901      	bls.n	80042b0 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80042ac:	2303      	movs	r3, #3
 80042ae:	e116      	b.n	80044de <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042b0:	4b8d      	ldr	r3, [pc, #564]	@ (80044e8 <HAL_RCC_OscConfig+0x620>)
 80042b2:	6a1b      	ldr	r3, [r3, #32]
 80042b4:	2202      	movs	r2, #2
 80042b6:	4013      	ands	r3, r2
 80042b8:	d1f0      	bne.n	800429c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80042ba:	231f      	movs	r3, #31
 80042bc:	18fb      	adds	r3, r7, r3
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d105      	bne.n	80042d0 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042c4:	4b88      	ldr	r3, [pc, #544]	@ (80044e8 <HAL_RCC_OscConfig+0x620>)
 80042c6:	69da      	ldr	r2, [r3, #28]
 80042c8:	4b87      	ldr	r3, [pc, #540]	@ (80044e8 <HAL_RCC_OscConfig+0x620>)
 80042ca:	4989      	ldr	r1, [pc, #548]	@ (80044f0 <HAL_RCC_OscConfig+0x628>)
 80042cc:	400a      	ands	r2, r1
 80042ce:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	2210      	movs	r2, #16
 80042d6:	4013      	ands	r3, r2
 80042d8:	d063      	beq.n	80043a2 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	695b      	ldr	r3, [r3, #20]
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d12a      	bne.n	8004338 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80042e2:	4b81      	ldr	r3, [pc, #516]	@ (80044e8 <HAL_RCC_OscConfig+0x620>)
 80042e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80042e6:	4b80      	ldr	r3, [pc, #512]	@ (80044e8 <HAL_RCC_OscConfig+0x620>)
 80042e8:	2104      	movs	r1, #4
 80042ea:	430a      	orrs	r2, r1
 80042ec:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80042ee:	4b7e      	ldr	r3, [pc, #504]	@ (80044e8 <HAL_RCC_OscConfig+0x620>)
 80042f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80042f2:	4b7d      	ldr	r3, [pc, #500]	@ (80044e8 <HAL_RCC_OscConfig+0x620>)
 80042f4:	2101      	movs	r1, #1
 80042f6:	430a      	orrs	r2, r1
 80042f8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042fa:	f7fe fd95 	bl	8002e28 <HAL_GetTick>
 80042fe:	0003      	movs	r3, r0
 8004300:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004302:	e008      	b.n	8004316 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004304:	f7fe fd90 	bl	8002e28 <HAL_GetTick>
 8004308:	0002      	movs	r2, r0
 800430a:	69bb      	ldr	r3, [r7, #24]
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	2b02      	cmp	r3, #2
 8004310:	d901      	bls.n	8004316 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	e0e3      	b.n	80044de <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004316:	4b74      	ldr	r3, [pc, #464]	@ (80044e8 <HAL_RCC_OscConfig+0x620>)
 8004318:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800431a:	2202      	movs	r2, #2
 800431c:	4013      	ands	r3, r2
 800431e:	d0f1      	beq.n	8004304 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004320:	4b71      	ldr	r3, [pc, #452]	@ (80044e8 <HAL_RCC_OscConfig+0x620>)
 8004322:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004324:	22f8      	movs	r2, #248	@ 0xf8
 8004326:	4393      	bics	r3, r2
 8004328:	0019      	movs	r1, r3
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	699b      	ldr	r3, [r3, #24]
 800432e:	00da      	lsls	r2, r3, #3
 8004330:	4b6d      	ldr	r3, [pc, #436]	@ (80044e8 <HAL_RCC_OscConfig+0x620>)
 8004332:	430a      	orrs	r2, r1
 8004334:	635a      	str	r2, [r3, #52]	@ 0x34
 8004336:	e034      	b.n	80043a2 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	695b      	ldr	r3, [r3, #20]
 800433c:	3305      	adds	r3, #5
 800433e:	d111      	bne.n	8004364 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004340:	4b69      	ldr	r3, [pc, #420]	@ (80044e8 <HAL_RCC_OscConfig+0x620>)
 8004342:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004344:	4b68      	ldr	r3, [pc, #416]	@ (80044e8 <HAL_RCC_OscConfig+0x620>)
 8004346:	2104      	movs	r1, #4
 8004348:	438a      	bics	r2, r1
 800434a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800434c:	4b66      	ldr	r3, [pc, #408]	@ (80044e8 <HAL_RCC_OscConfig+0x620>)
 800434e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004350:	22f8      	movs	r2, #248	@ 0xf8
 8004352:	4393      	bics	r3, r2
 8004354:	0019      	movs	r1, r3
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	00da      	lsls	r2, r3, #3
 800435c:	4b62      	ldr	r3, [pc, #392]	@ (80044e8 <HAL_RCC_OscConfig+0x620>)
 800435e:	430a      	orrs	r2, r1
 8004360:	635a      	str	r2, [r3, #52]	@ 0x34
 8004362:	e01e      	b.n	80043a2 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004364:	4b60      	ldr	r3, [pc, #384]	@ (80044e8 <HAL_RCC_OscConfig+0x620>)
 8004366:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004368:	4b5f      	ldr	r3, [pc, #380]	@ (80044e8 <HAL_RCC_OscConfig+0x620>)
 800436a:	2104      	movs	r1, #4
 800436c:	430a      	orrs	r2, r1
 800436e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004370:	4b5d      	ldr	r3, [pc, #372]	@ (80044e8 <HAL_RCC_OscConfig+0x620>)
 8004372:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004374:	4b5c      	ldr	r3, [pc, #368]	@ (80044e8 <HAL_RCC_OscConfig+0x620>)
 8004376:	2101      	movs	r1, #1
 8004378:	438a      	bics	r2, r1
 800437a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800437c:	f7fe fd54 	bl	8002e28 <HAL_GetTick>
 8004380:	0003      	movs	r3, r0
 8004382:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004384:	e008      	b.n	8004398 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004386:	f7fe fd4f 	bl	8002e28 <HAL_GetTick>
 800438a:	0002      	movs	r2, r0
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	2b02      	cmp	r3, #2
 8004392:	d901      	bls.n	8004398 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	e0a2      	b.n	80044de <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004398:	4b53      	ldr	r3, [pc, #332]	@ (80044e8 <HAL_RCC_OscConfig+0x620>)
 800439a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800439c:	2202      	movs	r2, #2
 800439e:	4013      	ands	r3, r2
 80043a0:	d1f1      	bne.n	8004386 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a1b      	ldr	r3, [r3, #32]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d100      	bne.n	80043ac <HAL_RCC_OscConfig+0x4e4>
 80043aa:	e097      	b.n	80044dc <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80043ac:	4b4e      	ldr	r3, [pc, #312]	@ (80044e8 <HAL_RCC_OscConfig+0x620>)
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	220c      	movs	r2, #12
 80043b2:	4013      	ands	r3, r2
 80043b4:	2b08      	cmp	r3, #8
 80043b6:	d100      	bne.n	80043ba <HAL_RCC_OscConfig+0x4f2>
 80043b8:	e06b      	b.n	8004492 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a1b      	ldr	r3, [r3, #32]
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d14c      	bne.n	800445c <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043c2:	4b49      	ldr	r3, [pc, #292]	@ (80044e8 <HAL_RCC_OscConfig+0x620>)
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	4b48      	ldr	r3, [pc, #288]	@ (80044e8 <HAL_RCC_OscConfig+0x620>)
 80043c8:	494a      	ldr	r1, [pc, #296]	@ (80044f4 <HAL_RCC_OscConfig+0x62c>)
 80043ca:	400a      	ands	r2, r1
 80043cc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043ce:	f7fe fd2b 	bl	8002e28 <HAL_GetTick>
 80043d2:	0003      	movs	r3, r0
 80043d4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043d6:	e008      	b.n	80043ea <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043d8:	f7fe fd26 	bl	8002e28 <HAL_GetTick>
 80043dc:	0002      	movs	r2, r0
 80043de:	69bb      	ldr	r3, [r7, #24]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d901      	bls.n	80043ea <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e079      	b.n	80044de <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043ea:	4b3f      	ldr	r3, [pc, #252]	@ (80044e8 <HAL_RCC_OscConfig+0x620>)
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	2380      	movs	r3, #128	@ 0x80
 80043f0:	049b      	lsls	r3, r3, #18
 80043f2:	4013      	ands	r3, r2
 80043f4:	d1f0      	bne.n	80043d8 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043f6:	4b3c      	ldr	r3, [pc, #240]	@ (80044e8 <HAL_RCC_OscConfig+0x620>)
 80043f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043fa:	220f      	movs	r2, #15
 80043fc:	4393      	bics	r3, r2
 80043fe:	0019      	movs	r1, r3
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004404:	4b38      	ldr	r3, [pc, #224]	@ (80044e8 <HAL_RCC_OscConfig+0x620>)
 8004406:	430a      	orrs	r2, r1
 8004408:	62da      	str	r2, [r3, #44]	@ 0x2c
 800440a:	4b37      	ldr	r3, [pc, #220]	@ (80044e8 <HAL_RCC_OscConfig+0x620>)
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	4a3a      	ldr	r2, [pc, #232]	@ (80044f8 <HAL_RCC_OscConfig+0x630>)
 8004410:	4013      	ands	r3, r2
 8004412:	0019      	movs	r1, r3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800441c:	431a      	orrs	r2, r3
 800441e:	4b32      	ldr	r3, [pc, #200]	@ (80044e8 <HAL_RCC_OscConfig+0x620>)
 8004420:	430a      	orrs	r2, r1
 8004422:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004424:	4b30      	ldr	r3, [pc, #192]	@ (80044e8 <HAL_RCC_OscConfig+0x620>)
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	4b2f      	ldr	r3, [pc, #188]	@ (80044e8 <HAL_RCC_OscConfig+0x620>)
 800442a:	2180      	movs	r1, #128	@ 0x80
 800442c:	0449      	lsls	r1, r1, #17
 800442e:	430a      	orrs	r2, r1
 8004430:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004432:	f7fe fcf9 	bl	8002e28 <HAL_GetTick>
 8004436:	0003      	movs	r3, r0
 8004438:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800443a:	e008      	b.n	800444e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800443c:	f7fe fcf4 	bl	8002e28 <HAL_GetTick>
 8004440:	0002      	movs	r2, r0
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	2b02      	cmp	r3, #2
 8004448:	d901      	bls.n	800444e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e047      	b.n	80044de <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800444e:	4b26      	ldr	r3, [pc, #152]	@ (80044e8 <HAL_RCC_OscConfig+0x620>)
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	2380      	movs	r3, #128	@ 0x80
 8004454:	049b      	lsls	r3, r3, #18
 8004456:	4013      	ands	r3, r2
 8004458:	d0f0      	beq.n	800443c <HAL_RCC_OscConfig+0x574>
 800445a:	e03f      	b.n	80044dc <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800445c:	4b22      	ldr	r3, [pc, #136]	@ (80044e8 <HAL_RCC_OscConfig+0x620>)
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	4b21      	ldr	r3, [pc, #132]	@ (80044e8 <HAL_RCC_OscConfig+0x620>)
 8004462:	4924      	ldr	r1, [pc, #144]	@ (80044f4 <HAL_RCC_OscConfig+0x62c>)
 8004464:	400a      	ands	r2, r1
 8004466:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004468:	f7fe fcde 	bl	8002e28 <HAL_GetTick>
 800446c:	0003      	movs	r3, r0
 800446e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004470:	e008      	b.n	8004484 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004472:	f7fe fcd9 	bl	8002e28 <HAL_GetTick>
 8004476:	0002      	movs	r2, r0
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	2b02      	cmp	r3, #2
 800447e:	d901      	bls.n	8004484 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8004480:	2303      	movs	r3, #3
 8004482:	e02c      	b.n	80044de <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004484:	4b18      	ldr	r3, [pc, #96]	@ (80044e8 <HAL_RCC_OscConfig+0x620>)
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	2380      	movs	r3, #128	@ 0x80
 800448a:	049b      	lsls	r3, r3, #18
 800448c:	4013      	ands	r3, r2
 800448e:	d1f0      	bne.n	8004472 <HAL_RCC_OscConfig+0x5aa>
 8004490:	e024      	b.n	80044dc <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a1b      	ldr	r3, [r3, #32]
 8004496:	2b01      	cmp	r3, #1
 8004498:	d101      	bne.n	800449e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e01f      	b.n	80044de <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800449e:	4b12      	ldr	r3, [pc, #72]	@ (80044e8 <HAL_RCC_OscConfig+0x620>)
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80044a4:	4b10      	ldr	r3, [pc, #64]	@ (80044e8 <HAL_RCC_OscConfig+0x620>)
 80044a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044a8:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80044aa:	697a      	ldr	r2, [r7, #20]
 80044ac:	2380      	movs	r3, #128	@ 0x80
 80044ae:	025b      	lsls	r3, r3, #9
 80044b0:	401a      	ands	r2, r3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d10e      	bne.n	80044d8 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	220f      	movs	r2, #15
 80044be:	401a      	ands	r2, r3
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d107      	bne.n	80044d8 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80044c8:	697a      	ldr	r2, [r7, #20]
 80044ca:	23f0      	movs	r3, #240	@ 0xf0
 80044cc:	039b      	lsls	r3, r3, #14
 80044ce:	401a      	ands	r2, r3
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d001      	beq.n	80044dc <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e000      	b.n	80044de <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	0018      	movs	r0, r3
 80044e0:	46bd      	mov	sp, r7
 80044e2:	b008      	add	sp, #32
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	46c0      	nop			@ (mov r8, r8)
 80044e8:	40021000 	.word	0x40021000
 80044ec:	00001388 	.word	0x00001388
 80044f0:	efffffff 	.word	0xefffffff
 80044f4:	feffffff 	.word	0xfeffffff
 80044f8:	ffc2ffff 	.word	0xffc2ffff

080044fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b084      	sub	sp, #16
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d101      	bne.n	8004510 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e0b3      	b.n	8004678 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004510:	4b5b      	ldr	r3, [pc, #364]	@ (8004680 <HAL_RCC_ClockConfig+0x184>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2201      	movs	r2, #1
 8004516:	4013      	ands	r3, r2
 8004518:	683a      	ldr	r2, [r7, #0]
 800451a:	429a      	cmp	r2, r3
 800451c:	d911      	bls.n	8004542 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800451e:	4b58      	ldr	r3, [pc, #352]	@ (8004680 <HAL_RCC_ClockConfig+0x184>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2201      	movs	r2, #1
 8004524:	4393      	bics	r3, r2
 8004526:	0019      	movs	r1, r3
 8004528:	4b55      	ldr	r3, [pc, #340]	@ (8004680 <HAL_RCC_ClockConfig+0x184>)
 800452a:	683a      	ldr	r2, [r7, #0]
 800452c:	430a      	orrs	r2, r1
 800452e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004530:	4b53      	ldr	r3, [pc, #332]	@ (8004680 <HAL_RCC_ClockConfig+0x184>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2201      	movs	r2, #1
 8004536:	4013      	ands	r3, r2
 8004538:	683a      	ldr	r2, [r7, #0]
 800453a:	429a      	cmp	r2, r3
 800453c:	d001      	beq.n	8004542 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e09a      	b.n	8004678 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2202      	movs	r2, #2
 8004548:	4013      	ands	r3, r2
 800454a:	d015      	beq.n	8004578 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	2204      	movs	r2, #4
 8004552:	4013      	ands	r3, r2
 8004554:	d006      	beq.n	8004564 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004556:	4b4b      	ldr	r3, [pc, #300]	@ (8004684 <HAL_RCC_ClockConfig+0x188>)
 8004558:	685a      	ldr	r2, [r3, #4]
 800455a:	4b4a      	ldr	r3, [pc, #296]	@ (8004684 <HAL_RCC_ClockConfig+0x188>)
 800455c:	21e0      	movs	r1, #224	@ 0xe0
 800455e:	00c9      	lsls	r1, r1, #3
 8004560:	430a      	orrs	r2, r1
 8004562:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004564:	4b47      	ldr	r3, [pc, #284]	@ (8004684 <HAL_RCC_ClockConfig+0x188>)
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	22f0      	movs	r2, #240	@ 0xf0
 800456a:	4393      	bics	r3, r2
 800456c:	0019      	movs	r1, r3
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	689a      	ldr	r2, [r3, #8]
 8004572:	4b44      	ldr	r3, [pc, #272]	@ (8004684 <HAL_RCC_ClockConfig+0x188>)
 8004574:	430a      	orrs	r2, r1
 8004576:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2201      	movs	r2, #1
 800457e:	4013      	ands	r3, r2
 8004580:	d040      	beq.n	8004604 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	2b01      	cmp	r3, #1
 8004588:	d107      	bne.n	800459a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800458a:	4b3e      	ldr	r3, [pc, #248]	@ (8004684 <HAL_RCC_ClockConfig+0x188>)
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	2380      	movs	r3, #128	@ 0x80
 8004590:	029b      	lsls	r3, r3, #10
 8004592:	4013      	ands	r3, r2
 8004594:	d114      	bne.n	80045c0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e06e      	b.n	8004678 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	2b02      	cmp	r3, #2
 80045a0:	d107      	bne.n	80045b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045a2:	4b38      	ldr	r3, [pc, #224]	@ (8004684 <HAL_RCC_ClockConfig+0x188>)
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	2380      	movs	r3, #128	@ 0x80
 80045a8:	049b      	lsls	r3, r3, #18
 80045aa:	4013      	ands	r3, r2
 80045ac:	d108      	bne.n	80045c0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e062      	b.n	8004678 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045b2:	4b34      	ldr	r3, [pc, #208]	@ (8004684 <HAL_RCC_ClockConfig+0x188>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	2202      	movs	r2, #2
 80045b8:	4013      	ands	r3, r2
 80045ba:	d101      	bne.n	80045c0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e05b      	b.n	8004678 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045c0:	4b30      	ldr	r3, [pc, #192]	@ (8004684 <HAL_RCC_ClockConfig+0x188>)
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	2203      	movs	r2, #3
 80045c6:	4393      	bics	r3, r2
 80045c8:	0019      	movs	r1, r3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	685a      	ldr	r2, [r3, #4]
 80045ce:	4b2d      	ldr	r3, [pc, #180]	@ (8004684 <HAL_RCC_ClockConfig+0x188>)
 80045d0:	430a      	orrs	r2, r1
 80045d2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045d4:	f7fe fc28 	bl	8002e28 <HAL_GetTick>
 80045d8:	0003      	movs	r3, r0
 80045da:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045dc:	e009      	b.n	80045f2 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045de:	f7fe fc23 	bl	8002e28 <HAL_GetTick>
 80045e2:	0002      	movs	r2, r0
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	4a27      	ldr	r2, [pc, #156]	@ (8004688 <HAL_RCC_ClockConfig+0x18c>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d901      	bls.n	80045f2 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e042      	b.n	8004678 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045f2:	4b24      	ldr	r3, [pc, #144]	@ (8004684 <HAL_RCC_ClockConfig+0x188>)
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	220c      	movs	r2, #12
 80045f8:	401a      	ands	r2, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	429a      	cmp	r2, r3
 8004602:	d1ec      	bne.n	80045de <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004604:	4b1e      	ldr	r3, [pc, #120]	@ (8004680 <HAL_RCC_ClockConfig+0x184>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2201      	movs	r2, #1
 800460a:	4013      	ands	r3, r2
 800460c:	683a      	ldr	r2, [r7, #0]
 800460e:	429a      	cmp	r2, r3
 8004610:	d211      	bcs.n	8004636 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004612:	4b1b      	ldr	r3, [pc, #108]	@ (8004680 <HAL_RCC_ClockConfig+0x184>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	2201      	movs	r2, #1
 8004618:	4393      	bics	r3, r2
 800461a:	0019      	movs	r1, r3
 800461c:	4b18      	ldr	r3, [pc, #96]	@ (8004680 <HAL_RCC_ClockConfig+0x184>)
 800461e:	683a      	ldr	r2, [r7, #0]
 8004620:	430a      	orrs	r2, r1
 8004622:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004624:	4b16      	ldr	r3, [pc, #88]	@ (8004680 <HAL_RCC_ClockConfig+0x184>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	2201      	movs	r2, #1
 800462a:	4013      	ands	r3, r2
 800462c:	683a      	ldr	r2, [r7, #0]
 800462e:	429a      	cmp	r2, r3
 8004630:	d001      	beq.n	8004636 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e020      	b.n	8004678 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	2204      	movs	r2, #4
 800463c:	4013      	ands	r3, r2
 800463e:	d009      	beq.n	8004654 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004640:	4b10      	ldr	r3, [pc, #64]	@ (8004684 <HAL_RCC_ClockConfig+0x188>)
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	4a11      	ldr	r2, [pc, #68]	@ (800468c <HAL_RCC_ClockConfig+0x190>)
 8004646:	4013      	ands	r3, r2
 8004648:	0019      	movs	r1, r3
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	68da      	ldr	r2, [r3, #12]
 800464e:	4b0d      	ldr	r3, [pc, #52]	@ (8004684 <HAL_RCC_ClockConfig+0x188>)
 8004650:	430a      	orrs	r2, r1
 8004652:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004654:	f000 f820 	bl	8004698 <HAL_RCC_GetSysClockFreq>
 8004658:	0001      	movs	r1, r0
 800465a:	4b0a      	ldr	r3, [pc, #40]	@ (8004684 <HAL_RCC_ClockConfig+0x188>)
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	091b      	lsrs	r3, r3, #4
 8004660:	220f      	movs	r2, #15
 8004662:	4013      	ands	r3, r2
 8004664:	4a0a      	ldr	r2, [pc, #40]	@ (8004690 <HAL_RCC_ClockConfig+0x194>)
 8004666:	5cd3      	ldrb	r3, [r2, r3]
 8004668:	000a      	movs	r2, r1
 800466a:	40da      	lsrs	r2, r3
 800466c:	4b09      	ldr	r3, [pc, #36]	@ (8004694 <HAL_RCC_ClockConfig+0x198>)
 800466e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004670:	2000      	movs	r0, #0
 8004672:	f7fe fb93 	bl	8002d9c <HAL_InitTick>
  
  return HAL_OK;
 8004676:	2300      	movs	r3, #0
}
 8004678:	0018      	movs	r0, r3
 800467a:	46bd      	mov	sp, r7
 800467c:	b004      	add	sp, #16
 800467e:	bd80      	pop	{r7, pc}
 8004680:	40022000 	.word	0x40022000
 8004684:	40021000 	.word	0x40021000
 8004688:	00001388 	.word	0x00001388
 800468c:	fffff8ff 	.word	0xfffff8ff
 8004690:	08006254 	.word	0x08006254
 8004694:	20000064 	.word	0x20000064

08004698 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b086      	sub	sp, #24
 800469c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800469e:	2300      	movs	r3, #0
 80046a0:	60fb      	str	r3, [r7, #12]
 80046a2:	2300      	movs	r3, #0
 80046a4:	60bb      	str	r3, [r7, #8]
 80046a6:	2300      	movs	r3, #0
 80046a8:	617b      	str	r3, [r7, #20]
 80046aa:	2300      	movs	r3, #0
 80046ac:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80046ae:	2300      	movs	r3, #0
 80046b0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80046b2:	4b20      	ldr	r3, [pc, #128]	@ (8004734 <HAL_RCC_GetSysClockFreq+0x9c>)
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	220c      	movs	r2, #12
 80046bc:	4013      	ands	r3, r2
 80046be:	2b04      	cmp	r3, #4
 80046c0:	d002      	beq.n	80046c8 <HAL_RCC_GetSysClockFreq+0x30>
 80046c2:	2b08      	cmp	r3, #8
 80046c4:	d003      	beq.n	80046ce <HAL_RCC_GetSysClockFreq+0x36>
 80046c6:	e02c      	b.n	8004722 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80046c8:	4b1b      	ldr	r3, [pc, #108]	@ (8004738 <HAL_RCC_GetSysClockFreq+0xa0>)
 80046ca:	613b      	str	r3, [r7, #16]
      break;
 80046cc:	e02c      	b.n	8004728 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	0c9b      	lsrs	r3, r3, #18
 80046d2:	220f      	movs	r2, #15
 80046d4:	4013      	ands	r3, r2
 80046d6:	4a19      	ldr	r2, [pc, #100]	@ (800473c <HAL_RCC_GetSysClockFreq+0xa4>)
 80046d8:	5cd3      	ldrb	r3, [r2, r3]
 80046da:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80046dc:	4b15      	ldr	r3, [pc, #84]	@ (8004734 <HAL_RCC_GetSysClockFreq+0x9c>)
 80046de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046e0:	220f      	movs	r2, #15
 80046e2:	4013      	ands	r3, r2
 80046e4:	4a16      	ldr	r2, [pc, #88]	@ (8004740 <HAL_RCC_GetSysClockFreq+0xa8>)
 80046e6:	5cd3      	ldrb	r3, [r2, r3]
 80046e8:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80046ea:	68fa      	ldr	r2, [r7, #12]
 80046ec:	2380      	movs	r3, #128	@ 0x80
 80046ee:	025b      	lsls	r3, r3, #9
 80046f0:	4013      	ands	r3, r2
 80046f2:	d009      	beq.n	8004708 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80046f4:	68b9      	ldr	r1, [r7, #8]
 80046f6:	4810      	ldr	r0, [pc, #64]	@ (8004738 <HAL_RCC_GetSysClockFreq+0xa0>)
 80046f8:	f7fb fd06 	bl	8000108 <__udivsi3>
 80046fc:	0003      	movs	r3, r0
 80046fe:	001a      	movs	r2, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	4353      	muls	r3, r2
 8004704:	617b      	str	r3, [r7, #20]
 8004706:	e009      	b.n	800471c <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004708:	6879      	ldr	r1, [r7, #4]
 800470a:	000a      	movs	r2, r1
 800470c:	0152      	lsls	r2, r2, #5
 800470e:	1a52      	subs	r2, r2, r1
 8004710:	0193      	lsls	r3, r2, #6
 8004712:	1a9b      	subs	r3, r3, r2
 8004714:	00db      	lsls	r3, r3, #3
 8004716:	185b      	adds	r3, r3, r1
 8004718:	021b      	lsls	r3, r3, #8
 800471a:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	613b      	str	r3, [r7, #16]
      break;
 8004720:	e002      	b.n	8004728 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004722:	4b05      	ldr	r3, [pc, #20]	@ (8004738 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004724:	613b      	str	r3, [r7, #16]
      break;
 8004726:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004728:	693b      	ldr	r3, [r7, #16]
}
 800472a:	0018      	movs	r0, r3
 800472c:	46bd      	mov	sp, r7
 800472e:	b006      	add	sp, #24
 8004730:	bd80      	pop	{r7, pc}
 8004732:	46c0      	nop			@ (mov r8, r8)
 8004734:	40021000 	.word	0x40021000
 8004738:	007a1200 	.word	0x007a1200
 800473c:	08006264 	.word	0x08006264
 8004740:	08006274 	.word	0x08006274

08004744 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b084      	sub	sp, #16
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d101      	bne.n	8004756 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e0a8      	b.n	80048a8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800475a:	2b00      	cmp	r3, #0
 800475c:	d109      	bne.n	8004772 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	685a      	ldr	r2, [r3, #4]
 8004762:	2382      	movs	r3, #130	@ 0x82
 8004764:	005b      	lsls	r3, r3, #1
 8004766:	429a      	cmp	r2, r3
 8004768:	d009      	beq.n	800477e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	61da      	str	r2, [r3, #28]
 8004770:	e005      	b.n	800477e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	225d      	movs	r2, #93	@ 0x5d
 8004788:	5c9b      	ldrb	r3, [r3, r2]
 800478a:	b2db      	uxtb	r3, r3
 800478c:	2b00      	cmp	r3, #0
 800478e:	d107      	bne.n	80047a0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	225c      	movs	r2, #92	@ 0x5c
 8004794:	2100      	movs	r1, #0
 8004796:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	0018      	movs	r0, r3
 800479c:	f7fe f996 	bl	8002acc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	225d      	movs	r2, #93	@ 0x5d
 80047a4:	2102      	movs	r1, #2
 80047a6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2140      	movs	r1, #64	@ 0x40
 80047b4:	438a      	bics	r2, r1
 80047b6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	68da      	ldr	r2, [r3, #12]
 80047bc:	23e0      	movs	r3, #224	@ 0xe0
 80047be:	00db      	lsls	r3, r3, #3
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d902      	bls.n	80047ca <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80047c4:	2300      	movs	r3, #0
 80047c6:	60fb      	str	r3, [r7, #12]
 80047c8:	e002      	b.n	80047d0 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80047ca:	2380      	movs	r3, #128	@ 0x80
 80047cc:	015b      	lsls	r3, r3, #5
 80047ce:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	68da      	ldr	r2, [r3, #12]
 80047d4:	23f0      	movs	r3, #240	@ 0xf0
 80047d6:	011b      	lsls	r3, r3, #4
 80047d8:	429a      	cmp	r2, r3
 80047da:	d008      	beq.n	80047ee <HAL_SPI_Init+0xaa>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	68da      	ldr	r2, [r3, #12]
 80047e0:	23e0      	movs	r3, #224	@ 0xe0
 80047e2:	00db      	lsls	r3, r3, #3
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d002      	beq.n	80047ee <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685a      	ldr	r2, [r3, #4]
 80047f2:	2382      	movs	r3, #130	@ 0x82
 80047f4:	005b      	lsls	r3, r3, #1
 80047f6:	401a      	ands	r2, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6899      	ldr	r1, [r3, #8]
 80047fc:	2384      	movs	r3, #132	@ 0x84
 80047fe:	021b      	lsls	r3, r3, #8
 8004800:	400b      	ands	r3, r1
 8004802:	431a      	orrs	r2, r3
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	691b      	ldr	r3, [r3, #16]
 8004808:	2102      	movs	r1, #2
 800480a:	400b      	ands	r3, r1
 800480c:	431a      	orrs	r2, r3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	695b      	ldr	r3, [r3, #20]
 8004812:	2101      	movs	r1, #1
 8004814:	400b      	ands	r3, r1
 8004816:	431a      	orrs	r2, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6999      	ldr	r1, [r3, #24]
 800481c:	2380      	movs	r3, #128	@ 0x80
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	400b      	ands	r3, r1
 8004822:	431a      	orrs	r2, r3
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	69db      	ldr	r3, [r3, #28]
 8004828:	2138      	movs	r1, #56	@ 0x38
 800482a:	400b      	ands	r3, r1
 800482c:	431a      	orrs	r2, r3
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a1b      	ldr	r3, [r3, #32]
 8004832:	2180      	movs	r1, #128	@ 0x80
 8004834:	400b      	ands	r3, r1
 8004836:	431a      	orrs	r2, r3
 8004838:	0011      	movs	r1, r2
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800483e:	2380      	movs	r3, #128	@ 0x80
 8004840:	019b      	lsls	r3, r3, #6
 8004842:	401a      	ands	r2, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	430a      	orrs	r2, r1
 800484a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	699b      	ldr	r3, [r3, #24]
 8004850:	0c1b      	lsrs	r3, r3, #16
 8004852:	2204      	movs	r2, #4
 8004854:	401a      	ands	r2, r3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800485a:	2110      	movs	r1, #16
 800485c:	400b      	ands	r3, r1
 800485e:	431a      	orrs	r2, r3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004864:	2108      	movs	r1, #8
 8004866:	400b      	ands	r3, r1
 8004868:	431a      	orrs	r2, r3
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	68d9      	ldr	r1, [r3, #12]
 800486e:	23f0      	movs	r3, #240	@ 0xf0
 8004870:	011b      	lsls	r3, r3, #4
 8004872:	400b      	ands	r3, r1
 8004874:	431a      	orrs	r2, r3
 8004876:	0011      	movs	r1, r2
 8004878:	68fa      	ldr	r2, [r7, #12]
 800487a:	2380      	movs	r3, #128	@ 0x80
 800487c:	015b      	lsls	r3, r3, #5
 800487e:	401a      	ands	r2, r3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	430a      	orrs	r2, r1
 8004886:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	69da      	ldr	r2, [r3, #28]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4907      	ldr	r1, [pc, #28]	@ (80048b0 <HAL_SPI_Init+0x16c>)
 8004894:	400a      	ands	r2, r1
 8004896:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	225d      	movs	r2, #93	@ 0x5d
 80048a2:	2101      	movs	r1, #1
 80048a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80048a6:	2300      	movs	r3, #0
}
 80048a8:	0018      	movs	r0, r3
 80048aa:	46bd      	mov	sp, r7
 80048ac:	b004      	add	sp, #16
 80048ae:	bd80      	pop	{r7, pc}
 80048b0:	fffff7ff 	.word	0xfffff7ff

080048b4 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b086      	sub	sp, #24
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	60f8      	str	r0, [r7, #12]
 80048bc:	60b9      	str	r1, [r7, #8]
 80048be:	1dbb      	adds	r3, r7, #6
 80048c0:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80048c2:	2317      	movs	r3, #23
 80048c4:	18fb      	adds	r3, r7, r3
 80048c6:	2200      	movs	r2, #0
 80048c8:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));


  if ((pData == NULL) || (Size == 0U))
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d003      	beq.n	80048d8 <HAL_SPI_Transmit_IT+0x24>
 80048d0:	1dbb      	adds	r3, r7, #6
 80048d2:	881b      	ldrh	r3, [r3, #0]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d104      	bne.n	80048e2 <HAL_SPI_Transmit_IT+0x2e>
  {
    errorcode = HAL_ERROR;
 80048d8:	2317      	movs	r3, #23
 80048da:	18fb      	adds	r3, r7, r3
 80048dc:	2201      	movs	r2, #1
 80048de:	701a      	strb	r2, [r3, #0]
    goto error;
 80048e0:	e074      	b.n	80049cc <HAL_SPI_Transmit_IT+0x118>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	225d      	movs	r2, #93	@ 0x5d
 80048e6:	5c9b      	ldrb	r3, [r3, r2]
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d004      	beq.n	80048f8 <HAL_SPI_Transmit_IT+0x44>
  {
    errorcode = HAL_BUSY;
 80048ee:	2317      	movs	r3, #23
 80048f0:	18fb      	adds	r3, r7, r3
 80048f2:	2202      	movs	r2, #2
 80048f4:	701a      	strb	r2, [r3, #0]
    goto error;
 80048f6:	e069      	b.n	80049cc <HAL_SPI_Transmit_IT+0x118>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	225c      	movs	r2, #92	@ 0x5c
 80048fc:	5c9b      	ldrb	r3, [r3, r2]
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d101      	bne.n	8004906 <HAL_SPI_Transmit_IT+0x52>
 8004902:	2302      	movs	r3, #2
 8004904:	e065      	b.n	80049d2 <HAL_SPI_Transmit_IT+0x11e>
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	225c      	movs	r2, #92	@ 0x5c
 800490a:	2101      	movs	r1, #1
 800490c:	5499      	strb	r1, [r3, r2]

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	225d      	movs	r2, #93	@ 0x5d
 8004912:	2103      	movs	r1, #3
 8004914:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2200      	movs	r2, #0
 800491a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	68ba      	ldr	r2, [r7, #8]
 8004920:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	1dba      	adds	r2, r7, #6
 8004926:	8812      	ldrh	r2, [r2, #0]
 8004928:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	1dba      	adds	r2, r7, #6
 800492e:	8812      	ldrh	r2, [r2, #0]
 8004930:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2200      	movs	r2, #0
 8004936:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2244      	movs	r2, #68	@ 0x44
 800493c:	2100      	movs	r1, #0
 800493e:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2246      	movs	r2, #70	@ 0x46
 8004944:	2100      	movs	r1, #0
 8004946:	5299      	strh	r1, [r3, r2]
  hspi->RxISR       = NULL;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2200      	movs	r2, #0
 800494c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	68da      	ldr	r2, [r3, #12]
 8004952:	23e0      	movs	r3, #224	@ 0xe0
 8004954:	00db      	lsls	r3, r3, #3
 8004956:	429a      	cmp	r2, r3
 8004958:	d903      	bls.n	8004962 <HAL_SPI_Transmit_IT+0xae>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	4a1f      	ldr	r2, [pc, #124]	@ (80049dc <HAL_SPI_Transmit_IT+0x128>)
 800495e:	651a      	str	r2, [r3, #80]	@ 0x50
 8004960:	e002      	b.n	8004968 <HAL_SPI_Transmit_IT+0xb4>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	4a1e      	ldr	r2, [pc, #120]	@ (80049e0 <HAL_SPI_Transmit_IT+0x12c>)
 8004966:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	689a      	ldr	r2, [r3, #8]
 800496c:	2380      	movs	r3, #128	@ 0x80
 800496e:	021b      	lsls	r3, r3, #8
 8004970:	429a      	cmp	r2, r3
 8004972:	d110      	bne.n	8004996 <HAL_SPI_Transmit_IT+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	2140      	movs	r1, #64	@ 0x40
 8004980:	438a      	bics	r2, r1
 8004982:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	2180      	movs	r1, #128	@ 0x80
 8004990:	01c9      	lsls	r1, r1, #7
 8004992:	430a      	orrs	r2, r1
 8004994:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	2240      	movs	r2, #64	@ 0x40
 800499e:	4013      	ands	r3, r2
 80049a0:	2b40      	cmp	r3, #64	@ 0x40
 80049a2:	d007      	beq.n	80049b4 <HAL_SPI_Transmit_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2140      	movs	r1, #64	@ 0x40
 80049b0:	430a      	orrs	r2, r1
 80049b2:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	225c      	movs	r2, #92	@ 0x5c
 80049b8:	2100      	movs	r1, #0
 80049ba:	5499      	strb	r1, [r3, r2]
  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	685a      	ldr	r2, [r3, #4]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	21a0      	movs	r1, #160	@ 0xa0
 80049c8:	430a      	orrs	r2, r1
 80049ca:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 80049cc:	2317      	movs	r3, #23
 80049ce:	18fb      	adds	r3, r7, r3
 80049d0:	781b      	ldrb	r3, [r3, #0]
}
 80049d2:	0018      	movs	r0, r3
 80049d4:	46bd      	mov	sp, r7
 80049d6:	b006      	add	sp, #24
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	46c0      	nop			@ (mov r8, r8)
 80049dc:	08005249 	.word	0x08005249
 80049e0:	08005201 	.word	0x08005201

080049e4 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b086      	sub	sp, #24
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	60b9      	str	r1, [r7, #8]
 80049ee:	1dbb      	adds	r3, r7, #6
 80049f0:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80049f2:	2117      	movs	r1, #23
 80049f4:	187b      	adds	r3, r7, r1
 80049f6:	2200      	movs	r2, #0
 80049f8:	701a      	strb	r2, [r3, #0]


  if (hspi->State != HAL_SPI_STATE_READY)
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	225d      	movs	r2, #93	@ 0x5d
 80049fe:	5c9b      	ldrb	r3, [r3, r2]
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d003      	beq.n	8004a0e <HAL_SPI_Receive_IT+0x2a>
  {
    errorcode = HAL_BUSY;
 8004a06:	187b      	adds	r3, r7, r1
 8004a08:	2202      	movs	r2, #2
 8004a0a:	701a      	strb	r2, [r3, #0]
    goto error;
 8004a0c:	e09c      	b.n	8004b48 <HAL_SPI_Receive_IT+0x164>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d112      	bne.n	8004a3c <HAL_SPI_Receive_IT+0x58>
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	685a      	ldr	r2, [r3, #4]
 8004a1a:	2382      	movs	r3, #130	@ 0x82
 8004a1c:	005b      	lsls	r3, r3, #1
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d10c      	bne.n	8004a3c <HAL_SPI_Receive_IT+0x58>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	225d      	movs	r2, #93	@ 0x5d
 8004a26:	2104      	movs	r1, #4
 8004a28:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8004a2a:	1dbb      	adds	r3, r7, #6
 8004a2c:	881b      	ldrh	r3, [r3, #0]
 8004a2e:	68ba      	ldr	r2, [r7, #8]
 8004a30:	68b9      	ldr	r1, [r7, #8]
 8004a32:	68f8      	ldr	r0, [r7, #12]
 8004a34:	f000 f898 	bl	8004b68 <HAL_SPI_TransmitReceive_IT>
 8004a38:	0003      	movs	r3, r0
 8004a3a:	e088      	b.n	8004b4e <HAL_SPI_Receive_IT+0x16a>
  }


  if ((pData == NULL) || (Size == 0U))
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d003      	beq.n	8004a4a <HAL_SPI_Receive_IT+0x66>
 8004a42:	1dbb      	adds	r3, r7, #6
 8004a44:	881b      	ldrh	r3, [r3, #0]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d104      	bne.n	8004a54 <HAL_SPI_Receive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8004a4a:	2317      	movs	r3, #23
 8004a4c:	18fb      	adds	r3, r7, r3
 8004a4e:	2201      	movs	r2, #1
 8004a50:	701a      	strb	r2, [r3, #0]
    goto error;
 8004a52:	e079      	b.n	8004b48 <HAL_SPI_Receive_IT+0x164>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	225c      	movs	r2, #92	@ 0x5c
 8004a58:	5c9b      	ldrb	r3, [r3, r2]
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d101      	bne.n	8004a62 <HAL_SPI_Receive_IT+0x7e>
 8004a5e:	2302      	movs	r3, #2
 8004a60:	e075      	b.n	8004b4e <HAL_SPI_Receive_IT+0x16a>
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	225c      	movs	r2, #92	@ 0x5c
 8004a66:	2101      	movs	r1, #1
 8004a68:	5499      	strb	r1, [r3, r2]

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	225d      	movs	r2, #93	@ 0x5d
 8004a6e:	2104      	movs	r1, #4
 8004a70:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2200      	movs	r2, #0
 8004a76:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	68ba      	ldr	r2, [r7, #8]
 8004a7c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	1dba      	adds	r2, r7, #6
 8004a82:	2144      	movs	r1, #68	@ 0x44
 8004a84:	8812      	ldrh	r2, [r2, #0]
 8004a86:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	1dba      	adds	r2, r7, #6
 8004a8c:	2146      	movs	r1, #70	@ 0x46
 8004a8e:	8812      	ldrh	r2, [r2, #0]
 8004a90:	525a      	strh	r2, [r3, r1]

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2200      	movs	r2, #0
 8004a96:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	68da      	ldr	r2, [r3, #12]
 8004aae:	23e0      	movs	r3, #224	@ 0xe0
 8004ab0:	00db      	lsls	r3, r3, #3
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d90b      	bls.n	8004ace <HAL_SPI_Receive_IT+0xea>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	685a      	ldr	r2, [r3, #4]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4925      	ldr	r1, [pc, #148]	@ (8004b58 <HAL_SPI_Receive_IT+0x174>)
 8004ac2:	400a      	ands	r2, r1
 8004ac4:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	4a24      	ldr	r2, [pc, #144]	@ (8004b5c <HAL_SPI_Receive_IT+0x178>)
 8004aca:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004acc:	e00b      	b.n	8004ae6 <HAL_SPI_Receive_IT+0x102>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	685a      	ldr	r2, [r3, #4]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	2180      	movs	r1, #128	@ 0x80
 8004ada:	0149      	lsls	r1, r1, #5
 8004adc:	430a      	orrs	r2, r1
 8004ade:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	4a1f      	ldr	r2, [pc, #124]	@ (8004b60 <HAL_SPI_Receive_IT+0x17c>)
 8004ae4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	689a      	ldr	r2, [r3, #8]
 8004aea:	2380      	movs	r3, #128	@ 0x80
 8004aec:	021b      	lsls	r3, r3, #8
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d10f      	bne.n	8004b12 <HAL_SPI_Receive_IT+0x12e>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2140      	movs	r1, #64	@ 0x40
 8004afe:	438a      	bics	r2, r1
 8004b00:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4915      	ldr	r1, [pc, #84]	@ (8004b64 <HAL_SPI_Receive_IT+0x180>)
 8004b0e:	400a      	ands	r2, r1
 8004b10:	601a      	str	r2, [r3, #0]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	2240      	movs	r2, #64	@ 0x40
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	2b40      	cmp	r3, #64	@ 0x40
 8004b1e:	d007      	beq.n	8004b30 <HAL_SPI_Receive_IT+0x14c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	2140      	movs	r1, #64	@ 0x40
 8004b2c:	430a      	orrs	r2, r1
 8004b2e:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	225c      	movs	r2, #92	@ 0x5c
 8004b34:	2100      	movs	r1, #0
 8004b36:	5499      	strb	r1, [r3, r2]
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	685a      	ldr	r2, [r3, #4]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2160      	movs	r1, #96	@ 0x60
 8004b44:	430a      	orrs	r2, r1
 8004b46:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 8004b48:	2317      	movs	r3, #23
 8004b4a:	18fb      	adds	r3, r7, r3
 8004b4c:	781b      	ldrb	r3, [r3, #0]
}
 8004b4e:	0018      	movs	r0, r3
 8004b50:	46bd      	mov	sp, r7
 8004b52:	b006      	add	sp, #24
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	46c0      	nop			@ (mov r8, r8)
 8004b58:	ffffefff 	.word	0xffffefff
 8004b5c:	080051b3 	.word	0x080051b3
 8004b60:	08005161 	.word	0x08005161
 8004b64:	ffffbfff 	.word	0xffffbfff

08004b68 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b086      	sub	sp, #24
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	60f8      	str	r0, [r7, #12]
 8004b70:	60b9      	str	r1, [r7, #8]
 8004b72:	607a      	str	r2, [r7, #4]
 8004b74:	001a      	movs	r2, r3
 8004b76:	1cbb      	adds	r3, r7, #2
 8004b78:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004b7a:	2317      	movs	r3, #23
 8004b7c:	18fb      	adds	r3, r7, r3
 8004b7e:	2200      	movs	r2, #0
 8004b80:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004b82:	2016      	movs	r0, #22
 8004b84:	183b      	adds	r3, r7, r0
 8004b86:	68fa      	ldr	r2, [r7, #12]
 8004b88:	215d      	movs	r1, #93	@ 0x5d
 8004b8a:	5c52      	ldrb	r2, [r2, r1]
 8004b8c:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004b94:	0001      	movs	r1, r0
 8004b96:	187b      	adds	r3, r7, r1
 8004b98:	781b      	ldrb	r3, [r3, #0]
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d011      	beq.n	8004bc2 <HAL_SPI_TransmitReceive_IT+0x5a>
 8004b9e:	693a      	ldr	r2, [r7, #16]
 8004ba0:	2382      	movs	r3, #130	@ 0x82
 8004ba2:	005b      	lsls	r3, r3, #1
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d107      	bne.n	8004bb8 <HAL_SPI_TransmitReceive_IT+0x50>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d103      	bne.n	8004bb8 <HAL_SPI_TransmitReceive_IT+0x50>
 8004bb0:	187b      	adds	r3, r7, r1
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	2b04      	cmp	r3, #4
 8004bb6:	d004      	beq.n	8004bc2 <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_BUSY;
 8004bb8:	2317      	movs	r3, #23
 8004bba:	18fb      	adds	r3, r7, r3
 8004bbc:	2202      	movs	r2, #2
 8004bbe:	701a      	strb	r2, [r3, #0]
    goto error;
 8004bc0:	e088      	b.n	8004cd4 <HAL_SPI_TransmitReceive_IT+0x16c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d006      	beq.n	8004bd6 <HAL_SPI_TransmitReceive_IT+0x6e>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d003      	beq.n	8004bd6 <HAL_SPI_TransmitReceive_IT+0x6e>
 8004bce:	1cbb      	adds	r3, r7, #2
 8004bd0:	881b      	ldrh	r3, [r3, #0]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d104      	bne.n	8004be0 <HAL_SPI_TransmitReceive_IT+0x78>
  {
    errorcode = HAL_ERROR;
 8004bd6:	2317      	movs	r3, #23
 8004bd8:	18fb      	adds	r3, r7, r3
 8004bda:	2201      	movs	r2, #1
 8004bdc:	701a      	strb	r2, [r3, #0]
    goto error;
 8004bde:	e079      	b.n	8004cd4 <HAL_SPI_TransmitReceive_IT+0x16c>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	225c      	movs	r2, #92	@ 0x5c
 8004be4:	5c9b      	ldrb	r3, [r3, r2]
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d101      	bne.n	8004bee <HAL_SPI_TransmitReceive_IT+0x86>
 8004bea:	2302      	movs	r3, #2
 8004bec:	e075      	b.n	8004cda <HAL_SPI_TransmitReceive_IT+0x172>
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	225c      	movs	r2, #92	@ 0x5c
 8004bf2:	2101      	movs	r1, #1
 8004bf4:	5499      	strb	r1, [r3, r2]

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	225d      	movs	r2, #93	@ 0x5d
 8004bfa:	5c9b      	ldrb	r3, [r3, r2]
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	2b04      	cmp	r3, #4
 8004c00:	d003      	beq.n	8004c0a <HAL_SPI_TransmitReceive_IT+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	225d      	movs	r2, #93	@ 0x5d
 8004c06:	2105      	movs	r1, #5
 8004c08:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	68ba      	ldr	r2, [r7, #8]
 8004c14:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	1cba      	adds	r2, r7, #2
 8004c1a:	8812      	ldrh	r2, [r2, #0]
 8004c1c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	1cba      	adds	r2, r7, #2
 8004c22:	8812      	ldrh	r2, [r2, #0]
 8004c24:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	1cba      	adds	r2, r7, #2
 8004c30:	2144      	movs	r1, #68	@ 0x44
 8004c32:	8812      	ldrh	r2, [r2, #0]
 8004c34:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	1cba      	adds	r2, r7, #2
 8004c3a:	2146      	movs	r1, #70	@ 0x46
 8004c3c:	8812      	ldrh	r2, [r2, #0]
 8004c3e:	525a      	strh	r2, [r3, r1]

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	68da      	ldr	r2, [r3, #12]
 8004c44:	23e0      	movs	r3, #224	@ 0xe0
 8004c46:	00db      	lsls	r3, r3, #3
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d906      	bls.n	8004c5a <HAL_SPI_TransmitReceive_IT+0xf2>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	4a25      	ldr	r2, [pc, #148]	@ (8004ce4 <HAL_SPI_TransmitReceive_IT+0x17c>)
 8004c50:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	4a24      	ldr	r2, [pc, #144]	@ (8004ce8 <HAL_SPI_TransmitReceive_IT+0x180>)
 8004c56:	651a      	str	r2, [r3, #80]	@ 0x50
 8004c58:	e005      	b.n	8004c66 <HAL_SPI_TransmitReceive_IT+0xfe>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	4a23      	ldr	r2, [pc, #140]	@ (8004cec <HAL_SPI_TransmitReceive_IT+0x184>)
 8004c5e:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	4a23      	ldr	r2, [pc, #140]	@ (8004cf0 <HAL_SPI_TransmitReceive_IT+0x188>)
 8004c64:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	68da      	ldr	r2, [r3, #12]
 8004c6a:	23e0      	movs	r3, #224	@ 0xe0
 8004c6c:	00db      	lsls	r3, r3, #3
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d803      	bhi.n	8004c7a <HAL_SPI_TransmitReceive_IT+0x112>
 8004c72:	1cbb      	adds	r3, r7, #2
 8004c74:	881b      	ldrh	r3, [r3, #0]
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d908      	bls.n	8004c8c <HAL_SPI_TransmitReceive_IT+0x124>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	685a      	ldr	r2, [r3, #4]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	491b      	ldr	r1, [pc, #108]	@ (8004cf4 <HAL_SPI_TransmitReceive_IT+0x18c>)
 8004c86:	400a      	ands	r2, r1
 8004c88:	605a      	str	r2, [r3, #4]
 8004c8a:	e008      	b.n	8004c9e <HAL_SPI_TransmitReceive_IT+0x136>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	685a      	ldr	r2, [r3, #4]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	2180      	movs	r1, #128	@ 0x80
 8004c98:	0149      	lsls	r1, r1, #5
 8004c9a:	430a      	orrs	r2, r1
 8004c9c:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	2240      	movs	r2, #64	@ 0x40
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	2b40      	cmp	r3, #64	@ 0x40
 8004caa:	d007      	beq.n	8004cbc <HAL_SPI_TransmitReceive_IT+0x154>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	2140      	movs	r1, #64	@ 0x40
 8004cb8:	430a      	orrs	r2, r1
 8004cba:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	225c      	movs	r2, #92	@ 0x5c
 8004cc0:	2100      	movs	r1, #0
 8004cc2:	5499      	strb	r1, [r3, r2]
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	685a      	ldr	r2, [r3, #4]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	21e0      	movs	r1, #224	@ 0xe0
 8004cd0:	430a      	orrs	r2, r1
 8004cd2:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 8004cd4:	2317      	movs	r3, #23
 8004cd6:	18fb      	adds	r3, r7, r3
 8004cd8:	781b      	ldrb	r3, [r3, #0]
}
 8004cda:	0018      	movs	r0, r3
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	b006      	add	sp, #24
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	46c0      	nop			@ (mov r8, r8)
 8004ce4:	08005097 	.word	0x08005097
 8004ce8:	080050ff 	.word	0x080050ff
 8004cec:	08004f41 	.word	0x08004f41
 8004cf0:	08005003 	.word	0x08005003
 8004cf4:	ffffefff 	.word	0xffffefff

08004cf8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b088      	sub	sp, #32
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004d10:	69bb      	ldr	r3, [r7, #24]
 8004d12:	099b      	lsrs	r3, r3, #6
 8004d14:	001a      	movs	r2, r3
 8004d16:	2301      	movs	r3, #1
 8004d18:	4013      	ands	r3, r2
 8004d1a:	d10f      	bne.n	8004d3c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004d1c:	69bb      	ldr	r3, [r7, #24]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004d22:	d00b      	beq.n	8004d3c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	099b      	lsrs	r3, r3, #6
 8004d28:	001a      	movs	r2, r3
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	d005      	beq.n	8004d3c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	0010      	movs	r0, r2
 8004d38:	4798      	blx	r3
    return;
 8004d3a:	e0d5      	b.n	8004ee8 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004d3c:	69bb      	ldr	r3, [r7, #24]
 8004d3e:	085b      	lsrs	r3, r3, #1
 8004d40:	001a      	movs	r2, r3
 8004d42:	2301      	movs	r3, #1
 8004d44:	4013      	ands	r3, r2
 8004d46:	d00b      	beq.n	8004d60 <HAL_SPI_IRQHandler+0x68>
 8004d48:	69fb      	ldr	r3, [r7, #28]
 8004d4a:	09db      	lsrs	r3, r3, #7
 8004d4c:	001a      	movs	r2, r3
 8004d4e:	2301      	movs	r3, #1
 8004d50:	4013      	ands	r3, r2
 8004d52:	d005      	beq.n	8004d60 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	0010      	movs	r0, r2
 8004d5c:	4798      	blx	r3
    return;
 8004d5e:	e0c3      	b.n	8004ee8 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004d60:	69bb      	ldr	r3, [r7, #24]
 8004d62:	095b      	lsrs	r3, r3, #5
 8004d64:	001a      	movs	r2, r3
 8004d66:	2301      	movs	r3, #1
 8004d68:	4013      	ands	r3, r2
 8004d6a:	d10c      	bne.n	8004d86 <HAL_SPI_IRQHandler+0x8e>
 8004d6c:	69bb      	ldr	r3, [r7, #24]
 8004d6e:	099b      	lsrs	r3, r3, #6
 8004d70:	001a      	movs	r2, r3
 8004d72:	2301      	movs	r3, #1
 8004d74:	4013      	ands	r3, r2
 8004d76:	d106      	bne.n	8004d86 <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004d78:	69bb      	ldr	r3, [r7, #24]
 8004d7a:	0a1b      	lsrs	r3, r3, #8
 8004d7c:	001a      	movs	r2, r3
 8004d7e:	2301      	movs	r3, #1
 8004d80:	4013      	ands	r3, r2
 8004d82:	d100      	bne.n	8004d86 <HAL_SPI_IRQHandler+0x8e>
 8004d84:	e0b0      	b.n	8004ee8 <HAL_SPI_IRQHandler+0x1f0>
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	095b      	lsrs	r3, r3, #5
 8004d8a:	001a      	movs	r2, r3
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	4013      	ands	r3, r2
 8004d90:	d100      	bne.n	8004d94 <HAL_SPI_IRQHandler+0x9c>
 8004d92:	e0a9      	b.n	8004ee8 <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004d94:	69bb      	ldr	r3, [r7, #24]
 8004d96:	099b      	lsrs	r3, r3, #6
 8004d98:	001a      	movs	r2, r3
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	d023      	beq.n	8004de8 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	225d      	movs	r2, #93	@ 0x5d
 8004da4:	5c9b      	ldrb	r3, [r3, r2]
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	2b03      	cmp	r3, #3
 8004daa:	d011      	beq.n	8004dd0 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004db0:	2204      	movs	r2, #4
 8004db2:	431a      	orrs	r2, r3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004db8:	2300      	movs	r3, #0
 8004dba:	617b      	str	r3, [r7, #20]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	617b      	str	r3, [r7, #20]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	617b      	str	r3, [r7, #20]
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	e00b      	b.n	8004de8 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	613b      	str	r3, [r7, #16]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	613b      	str	r3, [r7, #16]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	613b      	str	r3, [r7, #16]
 8004de4:	693b      	ldr	r3, [r7, #16]
        return;
 8004de6:	e07f      	b.n	8004ee8 <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004de8:	69bb      	ldr	r3, [r7, #24]
 8004dea:	095b      	lsrs	r3, r3, #5
 8004dec:	001a      	movs	r2, r3
 8004dee:	2301      	movs	r3, #1
 8004df0:	4013      	ands	r3, r2
 8004df2:	d014      	beq.n	8004e1e <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004df8:	2201      	movs	r2, #1
 8004dfa:	431a      	orrs	r2, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004e00:	2300      	movs	r3, #0
 8004e02:	60fb      	str	r3, [r7, #12]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	60fb      	str	r3, [r7, #12]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	2140      	movs	r1, #64	@ 0x40
 8004e18:	438a      	bics	r2, r1
 8004e1a:	601a      	str	r2, [r3, #0]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	0a1b      	lsrs	r3, r3, #8
 8004e22:	001a      	movs	r2, r3
 8004e24:	2301      	movs	r3, #1
 8004e26:	4013      	ands	r3, r2
 8004e28:	d00c      	beq.n	8004e44 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e2e:	2208      	movs	r2, #8
 8004e30:	431a      	orrs	r2, r3
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004e36:	2300      	movs	r3, #0
 8004e38:	60bb      	str	r3, [r7, #8]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	60bb      	str	r3, [r7, #8]
 8004e42:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d04c      	beq.n	8004ee6 <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	685a      	ldr	r2, [r3, #4]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	21e0      	movs	r1, #224	@ 0xe0
 8004e58:	438a      	bics	r2, r1
 8004e5a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	225d      	movs	r2, #93	@ 0x5d
 8004e60:	2101      	movs	r1, #1
 8004e62:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004e64:	69fb      	ldr	r3, [r7, #28]
 8004e66:	2202      	movs	r2, #2
 8004e68:	4013      	ands	r3, r2
 8004e6a:	d103      	bne.n	8004e74 <HAL_SPI_IRQHandler+0x17c>
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	4013      	ands	r3, r2
 8004e72:	d032      	beq.n	8004eda <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	685a      	ldr	r2, [r3, #4]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	2103      	movs	r1, #3
 8004e80:	438a      	bics	r2, r1
 8004e82:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d010      	beq.n	8004eae <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e90:	4a17      	ldr	r2, [pc, #92]	@ (8004ef0 <HAL_SPI_IRQHandler+0x1f8>)
 8004e92:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e98:	0018      	movs	r0, r3
 8004e9a:	f7fe fd57 	bl	800394c <HAL_DMA_Abort_IT>
 8004e9e:	1e03      	subs	r3, r0, #0
 8004ea0:	d005      	beq.n	8004eae <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ea6:	2240      	movs	r2, #64	@ 0x40
 8004ea8:	431a      	orrs	r2, r3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d016      	beq.n	8004ee4 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004eba:	4a0d      	ldr	r2, [pc, #52]	@ (8004ef0 <HAL_SPI_IRQHandler+0x1f8>)
 8004ebc:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ec2:	0018      	movs	r0, r3
 8004ec4:	f7fe fd42 	bl	800394c <HAL_DMA_Abort_IT>
 8004ec8:	1e03      	subs	r3, r0, #0
 8004eca:	d00b      	beq.n	8004ee4 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ed0:	2240      	movs	r2, #64	@ 0x40
 8004ed2:	431a      	orrs	r2, r3
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8004ed8:	e004      	b.n	8004ee4 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	0018      	movs	r0, r3
 8004ede:	f000 f811 	bl	8004f04 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004ee2:	e000      	b.n	8004ee6 <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8004ee4:	46c0      	nop			@ (mov r8, r8)
    return;
 8004ee6:	46c0      	nop			@ (mov r8, r8)
  }
}
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	b008      	add	sp, #32
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	46c0      	nop			@ (mov r8, r8)
 8004ef0:	08004f15 	.word	0x08004f15

08004ef4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b082      	sub	sp, #8
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8004efc:	46c0      	nop			@ (mov r8, r8)
 8004efe:	46bd      	mov	sp, r7
 8004f00:	b002      	add	sp, #8
 8004f02:	bd80      	pop	{r7, pc}

08004f04 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b082      	sub	sp, #8
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004f0c:	46c0      	nop			@ (mov r8, r8)
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	b002      	add	sp, #8
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f20:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2246      	movs	r2, #70	@ 0x46
 8004f26:	2100      	movs	r1, #0
 8004f28:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	0018      	movs	r0, r3
 8004f34:	f7ff ffe6 	bl	8004f04 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004f38:	46c0      	nop			@ (mov r8, r8)
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	b004      	add	sp, #16
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b082      	sub	sp, #8
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2246      	movs	r2, #70	@ 0x46
 8004f4c:	5a9b      	ldrh	r3, [r3, r2]
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d924      	bls.n	8004f9e <SPI_2linesRxISR_8BIT+0x5e>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	68da      	ldr	r2, [r3, #12]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f5e:	b292      	uxth	r2, r2
 8004f60:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f66:	1c9a      	adds	r2, r3, #2
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount -= 2U;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2246      	movs	r2, #70	@ 0x46
 8004f70:	5a9b      	ldrh	r3, [r3, r2]
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	3b02      	subs	r3, #2
 8004f76:	b299      	uxth	r1, r3
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2246      	movs	r2, #70	@ 0x46
 8004f7c:	5299      	strh	r1, [r3, r2]
    if (hspi->RxXferCount == 1U)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2246      	movs	r2, #70	@ 0x46
 8004f82:	5a9b      	ldrh	r3, [r3, r2]
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d120      	bne.n	8004fcc <SPI_2linesRxISR_8BIT+0x8c>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	685a      	ldr	r2, [r3, #4]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	2180      	movs	r1, #128	@ 0x80
 8004f96:	0149      	lsls	r1, r1, #5
 8004f98:	430a      	orrs	r2, r1
 8004f9a:	605a      	str	r2, [r3, #4]
 8004f9c:	e016      	b.n	8004fcc <SPI_2linesRxISR_8BIT+0x8c>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	330c      	adds	r3, #12
 8004fa4:	001a      	movs	r2, r3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004faa:	7812      	ldrb	r2, [r2, #0]
 8004fac:	b2d2      	uxtb	r2, r2
 8004fae:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fb4:	1c5a      	adds	r2, r3, #1
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount--;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2246      	movs	r2, #70	@ 0x46
 8004fbe:	5a9b      	ldrh	r3, [r3, r2]
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	b299      	uxth	r1, r3
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2246      	movs	r2, #70	@ 0x46
 8004fca:	5299      	strh	r1, [r3, r2]
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2246      	movs	r2, #70	@ 0x46
 8004fd0:	5a9b      	ldrh	r3, [r3, r2]
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d110      	bne.n	8004ffa <SPI_2linesRxISR_8BIT+0xba>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	685a      	ldr	r2, [r3, #4]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	2160      	movs	r1, #96	@ 0x60
 8004fe4:	438a      	bics	r2, r1
 8004fe6:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d103      	bne.n	8004ffa <SPI_2linesRxISR_8BIT+0xba>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	0018      	movs	r0, r3
 8004ff6:	f000 fb1f 	bl	8005638 <SPI_CloseRxTx_ISR>
    }
  }
}
 8004ffa:	46c0      	nop			@ (mov r8, r8)
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	b002      	add	sp, #8
 8005000:	bd80      	pop	{r7, pc}

08005002 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005002:	b580      	push	{r7, lr}
 8005004:	b082      	sub	sp, #8
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800500e:	b29b      	uxth	r3, r3
 8005010:	2b01      	cmp	r3, #1
 8005012:	d912      	bls.n	800503a <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005018:	881a      	ldrh	r2, [r3, #0]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005024:	1c9a      	adds	r2, r3, #2
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount -= 2U;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800502e:	b29b      	uxth	r3, r3
 8005030:	3b02      	subs	r3, #2
 8005032:	b29a      	uxth	r2, r3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005038:	e012      	b.n	8005060 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	330c      	adds	r3, #12
 8005044:	7812      	ldrb	r2, [r2, #0]
 8005046:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800504c:	1c5a      	adds	r2, r3, #1
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount--;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005056:	b29b      	uxth	r3, r3
 8005058:	3b01      	subs	r3, #1
 800505a:	b29a      	uxth	r2, r3
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005064:	b29b      	uxth	r3, r3
 8005066:	2b00      	cmp	r3, #0
 8005068:	d111      	bne.n	800508e <SPI_2linesTxISR_8BIT+0x8c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	685a      	ldr	r2, [r3, #4]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2180      	movs	r1, #128	@ 0x80
 8005076:	438a      	bics	r2, r1
 8005078:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2246      	movs	r2, #70	@ 0x46
 800507e:	5a9b      	ldrh	r3, [r3, r2]
 8005080:	b29b      	uxth	r3, r3
 8005082:	2b00      	cmp	r3, #0
 8005084:	d103      	bne.n	800508e <SPI_2linesTxISR_8BIT+0x8c>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	0018      	movs	r0, r3
 800508a:	f000 fad5 	bl	8005638 <SPI_CloseRxTx_ISR>
    }
  }
}
 800508e:	46c0      	nop			@ (mov r8, r8)
 8005090:	46bd      	mov	sp, r7
 8005092:	b002      	add	sp, #8
 8005094:	bd80      	pop	{r7, pc}

08005096 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005096:	b580      	push	{r7, lr}
 8005098:	b082      	sub	sp, #8
 800509a:	af00      	add	r7, sp, #0
 800509c:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	68da      	ldr	r2, [r3, #12]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050a8:	b292      	uxth	r2, r2
 80050aa:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050b0:	1c9a      	adds	r2, r3, #2
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2246      	movs	r2, #70	@ 0x46
 80050ba:	5a9b      	ldrh	r3, [r3, r2]
 80050bc:	b29b      	uxth	r3, r3
 80050be:	3b01      	subs	r3, #1
 80050c0:	b299      	uxth	r1, r3
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2246      	movs	r2, #70	@ 0x46
 80050c6:	5299      	strh	r1, [r3, r2]

  if (hspi->RxXferCount == 0U)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2246      	movs	r2, #70	@ 0x46
 80050cc:	5a9b      	ldrh	r3, [r3, r2]
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d110      	bne.n	80050f6 <SPI_2linesRxISR_16BIT+0x60>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	685a      	ldr	r2, [r3, #4]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	2140      	movs	r1, #64	@ 0x40
 80050e0:	438a      	bics	r2, r1
 80050e2:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d103      	bne.n	80050f6 <SPI_2linesRxISR_16BIT+0x60>
    {
      SPI_CloseRxTx_ISR(hspi);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	0018      	movs	r0, r3
 80050f2:	f000 faa1 	bl	8005638 <SPI_CloseRxTx_ISR>
    }
  }
}
 80050f6:	46c0      	nop			@ (mov r8, r8)
 80050f8:	46bd      	mov	sp, r7
 80050fa:	b002      	add	sp, #8
 80050fc:	bd80      	pop	{r7, pc}

080050fe <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80050fe:	b580      	push	{r7, lr}
 8005100:	b082      	sub	sp, #8
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800510a:	881a      	ldrh	r2, [r3, #0]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005116:	1c9a      	adds	r2, r3, #2
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005120:	b29b      	uxth	r3, r3
 8005122:	3b01      	subs	r3, #1
 8005124:	b29a      	uxth	r2, r3
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800512e:	b29b      	uxth	r3, r3
 8005130:	2b00      	cmp	r3, #0
 8005132:	d111      	bne.n	8005158 <SPI_2linesTxISR_16BIT+0x5a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	685a      	ldr	r2, [r3, #4]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	2180      	movs	r1, #128	@ 0x80
 8005140:	438a      	bics	r2, r1
 8005142:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2246      	movs	r2, #70	@ 0x46
 8005148:	5a9b      	ldrh	r3, [r3, r2]
 800514a:	b29b      	uxth	r3, r3
 800514c:	2b00      	cmp	r3, #0
 800514e:	d103      	bne.n	8005158 <SPI_2linesTxISR_16BIT+0x5a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	0018      	movs	r0, r3
 8005154:	f000 fa70 	bl	8005638 <SPI_CloseRxTx_ISR>
    }
  }
}
 8005158:	46c0      	nop			@ (mov r8, r8)
 800515a:	46bd      	mov	sp, r7
 800515c:	b002      	add	sp, #8
 800515e:	bd80      	pop	{r7, pc}

08005160 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b082      	sub	sp, #8
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	330c      	adds	r3, #12
 800516e:	001a      	movs	r2, r3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005174:	7812      	ldrb	r2, [r2, #0]
 8005176:	b2d2      	uxtb	r2, r2
 8005178:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800517e:	1c5a      	adds	r2, r3, #1
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2246      	movs	r2, #70	@ 0x46
 8005188:	5a9b      	ldrh	r3, [r3, r2]
 800518a:	b29b      	uxth	r3, r3
 800518c:	3b01      	subs	r3, #1
 800518e:	b299      	uxth	r1, r3
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2246      	movs	r2, #70	@ 0x46
 8005194:	5299      	strh	r1, [r3, r2]
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2246      	movs	r2, #70	@ 0x46
 800519a:	5a9b      	ldrh	r3, [r3, r2]
 800519c:	b29b      	uxth	r3, r3
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d103      	bne.n	80051aa <SPI_RxISR_8BIT+0x4a>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	0018      	movs	r0, r3
 80051a6:	f000 fa8d 	bl	80056c4 <SPI_CloseRx_ISR>
  }
}
 80051aa:	46c0      	nop			@ (mov r8, r8)
 80051ac:	46bd      	mov	sp, r7
 80051ae:	b002      	add	sp, #8
 80051b0:	bd80      	pop	{r7, pc}

080051b2 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80051b2:	b580      	push	{r7, lr}
 80051b4:	b082      	sub	sp, #8
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	68da      	ldr	r2, [r3, #12]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051c4:	b292      	uxth	r2, r2
 80051c6:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051cc:	1c9a      	adds	r2, r3, #2
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2246      	movs	r2, #70	@ 0x46
 80051d6:	5a9b      	ldrh	r3, [r3, r2]
 80051d8:	b29b      	uxth	r3, r3
 80051da:	3b01      	subs	r3, #1
 80051dc:	b299      	uxth	r1, r3
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2246      	movs	r2, #70	@ 0x46
 80051e2:	5299      	strh	r1, [r3, r2]
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2246      	movs	r2, #70	@ 0x46
 80051e8:	5a9b      	ldrh	r3, [r3, r2]
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d103      	bne.n	80051f8 <SPI_RxISR_16BIT+0x46>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	0018      	movs	r0, r3
 80051f4:	f000 fa66 	bl	80056c4 <SPI_CloseRx_ISR>
  }
}
 80051f8:	46c0      	nop			@ (mov r8, r8)
 80051fa:	46bd      	mov	sp, r7
 80051fc:	b002      	add	sp, #8
 80051fe:	bd80      	pop	{r7, pc}

08005200 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b082      	sub	sp, #8
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	330c      	adds	r3, #12
 8005212:	7812      	ldrb	r2, [r2, #0]
 8005214:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800521a:	1c5a      	adds	r2, r3, #1
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005224:	b29b      	uxth	r3, r3
 8005226:	3b01      	subs	r3, #1
 8005228:	b29a      	uxth	r2, r3
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->TxXferCount == 0U)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005232:	b29b      	uxth	r3, r3
 8005234:	2b00      	cmp	r3, #0
 8005236:	d103      	bne.n	8005240 <SPI_TxISR_8BIT+0x40>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	0018      	movs	r0, r3
 800523c:	f000 fa73 	bl	8005726 <SPI_CloseTx_ISR>
  }
}
 8005240:	46c0      	nop			@ (mov r8, r8)
 8005242:	46bd      	mov	sp, r7
 8005244:	b002      	add	sp, #8
 8005246:	bd80      	pop	{r7, pc}

08005248 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b082      	sub	sp, #8
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005254:	881a      	ldrh	r2, [r3, #0]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005260:	1c9a      	adds	r2, r3, #2
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800526a:	b29b      	uxth	r3, r3
 800526c:	3b01      	subs	r3, #1
 800526e:	b29a      	uxth	r2, r3
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->TxXferCount == 0U)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005278:	b29b      	uxth	r3, r3
 800527a:	2b00      	cmp	r3, #0
 800527c:	d103      	bne.n	8005286 <SPI_TxISR_16BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	0018      	movs	r0, r3
 8005282:	f000 fa50 	bl	8005726 <SPI_CloseTx_ISR>
  }
}
 8005286:	46c0      	nop			@ (mov r8, r8)
 8005288:	46bd      	mov	sp, r7
 800528a:	b002      	add	sp, #8
 800528c:	bd80      	pop	{r7, pc}
	...

08005290 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b088      	sub	sp, #32
 8005294:	af00      	add	r7, sp, #0
 8005296:	60f8      	str	r0, [r7, #12]
 8005298:	60b9      	str	r1, [r7, #8]
 800529a:	603b      	str	r3, [r7, #0]
 800529c:	1dfb      	adds	r3, r7, #7
 800529e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80052a0:	f7fd fdc2 	bl	8002e28 <HAL_GetTick>
 80052a4:	0002      	movs	r2, r0
 80052a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052a8:	1a9b      	subs	r3, r3, r2
 80052aa:	683a      	ldr	r2, [r7, #0]
 80052ac:	18d3      	adds	r3, r2, r3
 80052ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80052b0:	f7fd fdba 	bl	8002e28 <HAL_GetTick>
 80052b4:	0003      	movs	r3, r0
 80052b6:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80052b8:	4b3a      	ldr	r3, [pc, #232]	@ (80053a4 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	015b      	lsls	r3, r3, #5
 80052be:	0d1b      	lsrs	r3, r3, #20
 80052c0:	69fa      	ldr	r2, [r7, #28]
 80052c2:	4353      	muls	r3, r2
 80052c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80052c6:	e058      	b.n	800537a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	3301      	adds	r3, #1
 80052cc:	d055      	beq.n	800537a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80052ce:	f7fd fdab 	bl	8002e28 <HAL_GetTick>
 80052d2:	0002      	movs	r2, r0
 80052d4:	69bb      	ldr	r3, [r7, #24]
 80052d6:	1ad3      	subs	r3, r2, r3
 80052d8:	69fa      	ldr	r2, [r7, #28]
 80052da:	429a      	cmp	r2, r3
 80052dc:	d902      	bls.n	80052e4 <SPI_WaitFlagStateUntilTimeout+0x54>
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d142      	bne.n	800536a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	685a      	ldr	r2, [r3, #4]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	21e0      	movs	r1, #224	@ 0xe0
 80052f0:	438a      	bics	r2, r1
 80052f2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	685a      	ldr	r2, [r3, #4]
 80052f8:	2382      	movs	r3, #130	@ 0x82
 80052fa:	005b      	lsls	r3, r3, #1
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d113      	bne.n	8005328 <SPI_WaitFlagStateUntilTimeout+0x98>
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	689a      	ldr	r2, [r3, #8]
 8005304:	2380      	movs	r3, #128	@ 0x80
 8005306:	021b      	lsls	r3, r3, #8
 8005308:	429a      	cmp	r2, r3
 800530a:	d005      	beq.n	8005318 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	689a      	ldr	r2, [r3, #8]
 8005310:	2380      	movs	r3, #128	@ 0x80
 8005312:	00db      	lsls	r3, r3, #3
 8005314:	429a      	cmp	r2, r3
 8005316:	d107      	bne.n	8005328 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	2140      	movs	r1, #64	@ 0x40
 8005324:	438a      	bics	r2, r1
 8005326:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800532c:	2380      	movs	r3, #128	@ 0x80
 800532e:	019b      	lsls	r3, r3, #6
 8005330:	429a      	cmp	r2, r3
 8005332:	d110      	bne.n	8005356 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	491a      	ldr	r1, [pc, #104]	@ (80053a8 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8005340:	400a      	ands	r2, r1
 8005342:	601a      	str	r2, [r3, #0]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	2180      	movs	r1, #128	@ 0x80
 8005350:	0189      	lsls	r1, r1, #6
 8005352:	430a      	orrs	r2, r1
 8005354:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	225d      	movs	r2, #93	@ 0x5d
 800535a:	2101      	movs	r1, #1
 800535c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	225c      	movs	r2, #92	@ 0x5c
 8005362:	2100      	movs	r1, #0
 8005364:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005366:	2303      	movs	r3, #3
 8005368:	e017      	b.n	800539a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d101      	bne.n	8005374 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8005370:	2300      	movs	r3, #0
 8005372:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	3b01      	subs	r3, #1
 8005378:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	68ba      	ldr	r2, [r7, #8]
 8005382:	4013      	ands	r3, r2
 8005384:	68ba      	ldr	r2, [r7, #8]
 8005386:	1ad3      	subs	r3, r2, r3
 8005388:	425a      	negs	r2, r3
 800538a:	4153      	adcs	r3, r2
 800538c:	b2db      	uxtb	r3, r3
 800538e:	001a      	movs	r2, r3
 8005390:	1dfb      	adds	r3, r7, #7
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	429a      	cmp	r2, r3
 8005396:	d197      	bne.n	80052c8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005398:	2300      	movs	r3, #0
}
 800539a:	0018      	movs	r0, r3
 800539c:	46bd      	mov	sp, r7
 800539e:	b008      	add	sp, #32
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	46c0      	nop			@ (mov r8, r8)
 80053a4:	20000064 	.word	0x20000064
 80053a8:	ffffdfff 	.word	0xffffdfff

080053ac <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b08a      	sub	sp, #40	@ 0x28
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	60f8      	str	r0, [r7, #12]
 80053b4:	60b9      	str	r1, [r7, #8]
 80053b6:	607a      	str	r2, [r7, #4]
 80053b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80053ba:	2317      	movs	r3, #23
 80053bc:	18fb      	adds	r3, r7, r3
 80053be:	2200      	movs	r2, #0
 80053c0:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80053c2:	f7fd fd31 	bl	8002e28 <HAL_GetTick>
 80053c6:	0002      	movs	r2, r0
 80053c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053ca:	1a9b      	subs	r3, r3, r2
 80053cc:	683a      	ldr	r2, [r7, #0]
 80053ce:	18d3      	adds	r3, r2, r3
 80053d0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80053d2:	f7fd fd29 	bl	8002e28 <HAL_GetTick>
 80053d6:	0003      	movs	r3, r0
 80053d8:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	330c      	adds	r3, #12
 80053e0:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80053e2:	4b41      	ldr	r3, [pc, #260]	@ (80054e8 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	0013      	movs	r3, r2
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	189b      	adds	r3, r3, r2
 80053ec:	00da      	lsls	r2, r3, #3
 80053ee:	1ad3      	subs	r3, r2, r3
 80053f0:	0d1b      	lsrs	r3, r3, #20
 80053f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053f4:	4353      	muls	r3, r2
 80053f6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80053f8:	e068      	b.n	80054cc <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80053fa:	68ba      	ldr	r2, [r7, #8]
 80053fc:	23c0      	movs	r3, #192	@ 0xc0
 80053fe:	00db      	lsls	r3, r3, #3
 8005400:	429a      	cmp	r2, r3
 8005402:	d10a      	bne.n	800541a <SPI_WaitFifoStateUntilTimeout+0x6e>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d107      	bne.n	800541a <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	781b      	ldrb	r3, [r3, #0]
 800540e:	b2da      	uxtb	r2, r3
 8005410:	2117      	movs	r1, #23
 8005412:	187b      	adds	r3, r7, r1
 8005414:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005416:	187b      	adds	r3, r7, r1
 8005418:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	3301      	adds	r3, #1
 800541e:	d055      	beq.n	80054cc <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005420:	f7fd fd02 	bl	8002e28 <HAL_GetTick>
 8005424:	0002      	movs	r2, r0
 8005426:	6a3b      	ldr	r3, [r7, #32]
 8005428:	1ad3      	subs	r3, r2, r3
 800542a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800542c:	429a      	cmp	r2, r3
 800542e:	d902      	bls.n	8005436 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8005430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005432:	2b00      	cmp	r3, #0
 8005434:	d142      	bne.n	80054bc <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	685a      	ldr	r2, [r3, #4]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	21e0      	movs	r1, #224	@ 0xe0
 8005442:	438a      	bics	r2, r1
 8005444:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	685a      	ldr	r2, [r3, #4]
 800544a:	2382      	movs	r3, #130	@ 0x82
 800544c:	005b      	lsls	r3, r3, #1
 800544e:	429a      	cmp	r2, r3
 8005450:	d113      	bne.n	800547a <SPI_WaitFifoStateUntilTimeout+0xce>
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	689a      	ldr	r2, [r3, #8]
 8005456:	2380      	movs	r3, #128	@ 0x80
 8005458:	021b      	lsls	r3, r3, #8
 800545a:	429a      	cmp	r2, r3
 800545c:	d005      	beq.n	800546a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	689a      	ldr	r2, [r3, #8]
 8005462:	2380      	movs	r3, #128	@ 0x80
 8005464:	00db      	lsls	r3, r3, #3
 8005466:	429a      	cmp	r2, r3
 8005468:	d107      	bne.n	800547a <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	2140      	movs	r1, #64	@ 0x40
 8005476:	438a      	bics	r2, r1
 8005478:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800547e:	2380      	movs	r3, #128	@ 0x80
 8005480:	019b      	lsls	r3, r3, #6
 8005482:	429a      	cmp	r2, r3
 8005484:	d110      	bne.n	80054a8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4916      	ldr	r1, [pc, #88]	@ (80054ec <SPI_WaitFifoStateUntilTimeout+0x140>)
 8005492:	400a      	ands	r2, r1
 8005494:	601a      	str	r2, [r3, #0]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2180      	movs	r1, #128	@ 0x80
 80054a2:	0189      	lsls	r1, r1, #6
 80054a4:	430a      	orrs	r2, r1
 80054a6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	225d      	movs	r2, #93	@ 0x5d
 80054ac:	2101      	movs	r1, #1
 80054ae:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	225c      	movs	r2, #92	@ 0x5c
 80054b4:	2100      	movs	r1, #0
 80054b6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80054b8:	2303      	movs	r3, #3
 80054ba:	e010      	b.n	80054de <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d101      	bne.n	80054c6 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80054c2:	2300      	movs	r3, #0
 80054c4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80054c6:	69bb      	ldr	r3, [r7, #24]
 80054c8:	3b01      	subs	r3, #1
 80054ca:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	68ba      	ldr	r2, [r7, #8]
 80054d4:	4013      	ands	r3, r2
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	429a      	cmp	r2, r3
 80054da:	d18e      	bne.n	80053fa <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80054dc:	2300      	movs	r3, #0
}
 80054de:	0018      	movs	r0, r3
 80054e0:	46bd      	mov	sp, r7
 80054e2:	b00a      	add	sp, #40	@ 0x28
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	46c0      	nop			@ (mov r8, r8)
 80054e8:	20000064 	.word	0x20000064
 80054ec:	ffffdfff 	.word	0xffffdfff

080054f0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b086      	sub	sp, #24
 80054f4:	af02      	add	r7, sp, #8
 80054f6:	60f8      	str	r0, [r7, #12]
 80054f8:	60b9      	str	r1, [r7, #8]
 80054fa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	685a      	ldr	r2, [r3, #4]
 8005500:	2382      	movs	r3, #130	@ 0x82
 8005502:	005b      	lsls	r3, r3, #1
 8005504:	429a      	cmp	r2, r3
 8005506:	d113      	bne.n	8005530 <SPI_EndRxTransaction+0x40>
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	689a      	ldr	r2, [r3, #8]
 800550c:	2380      	movs	r3, #128	@ 0x80
 800550e:	021b      	lsls	r3, r3, #8
 8005510:	429a      	cmp	r2, r3
 8005512:	d005      	beq.n	8005520 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	689a      	ldr	r2, [r3, #8]
 8005518:	2380      	movs	r3, #128	@ 0x80
 800551a:	00db      	lsls	r3, r3, #3
 800551c:	429a      	cmp	r2, r3
 800551e:	d107      	bne.n	8005530 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	2140      	movs	r1, #64	@ 0x40
 800552c:	438a      	bics	r2, r1
 800552e:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005530:	68ba      	ldr	r2, [r7, #8]
 8005532:	68f8      	ldr	r0, [r7, #12]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	9300      	str	r3, [sp, #0]
 8005538:	0013      	movs	r3, r2
 800553a:	2200      	movs	r2, #0
 800553c:	2180      	movs	r1, #128	@ 0x80
 800553e:	f7ff fea7 	bl	8005290 <SPI_WaitFlagStateUntilTimeout>
 8005542:	1e03      	subs	r3, r0, #0
 8005544:	d007      	beq.n	8005556 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800554a:	2220      	movs	r2, #32
 800554c:	431a      	orrs	r2, r3
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005552:	2303      	movs	r3, #3
 8005554:	e026      	b.n	80055a4 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	685a      	ldr	r2, [r3, #4]
 800555a:	2382      	movs	r3, #130	@ 0x82
 800555c:	005b      	lsls	r3, r3, #1
 800555e:	429a      	cmp	r2, r3
 8005560:	d11f      	bne.n	80055a2 <SPI_EndRxTransaction+0xb2>
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	689a      	ldr	r2, [r3, #8]
 8005566:	2380      	movs	r3, #128	@ 0x80
 8005568:	021b      	lsls	r3, r3, #8
 800556a:	429a      	cmp	r2, r3
 800556c:	d005      	beq.n	800557a <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	689a      	ldr	r2, [r3, #8]
 8005572:	2380      	movs	r3, #128	@ 0x80
 8005574:	00db      	lsls	r3, r3, #3
 8005576:	429a      	cmp	r2, r3
 8005578:	d113      	bne.n	80055a2 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800557a:	68ba      	ldr	r2, [r7, #8]
 800557c:	23c0      	movs	r3, #192	@ 0xc0
 800557e:	00d9      	lsls	r1, r3, #3
 8005580:	68f8      	ldr	r0, [r7, #12]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	9300      	str	r3, [sp, #0]
 8005586:	0013      	movs	r3, r2
 8005588:	2200      	movs	r2, #0
 800558a:	f7ff ff0f 	bl	80053ac <SPI_WaitFifoStateUntilTimeout>
 800558e:	1e03      	subs	r3, r0, #0
 8005590:	d007      	beq.n	80055a2 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005596:	2220      	movs	r2, #32
 8005598:	431a      	orrs	r2, r3
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800559e:	2303      	movs	r3, #3
 80055a0:	e000      	b.n	80055a4 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 80055a2:	2300      	movs	r3, #0
}
 80055a4:	0018      	movs	r0, r3
 80055a6:	46bd      	mov	sp, r7
 80055a8:	b004      	add	sp, #16
 80055aa:	bd80      	pop	{r7, pc}

080055ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b086      	sub	sp, #24
 80055b0:	af02      	add	r7, sp, #8
 80055b2:	60f8      	str	r0, [r7, #12]
 80055b4:	60b9      	str	r1, [r7, #8]
 80055b6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80055b8:	68ba      	ldr	r2, [r7, #8]
 80055ba:	23c0      	movs	r3, #192	@ 0xc0
 80055bc:	0159      	lsls	r1, r3, #5
 80055be:	68f8      	ldr	r0, [r7, #12]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	9300      	str	r3, [sp, #0]
 80055c4:	0013      	movs	r3, r2
 80055c6:	2200      	movs	r2, #0
 80055c8:	f7ff fef0 	bl	80053ac <SPI_WaitFifoStateUntilTimeout>
 80055cc:	1e03      	subs	r3, r0, #0
 80055ce:	d007      	beq.n	80055e0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055d4:	2220      	movs	r2, #32
 80055d6:	431a      	orrs	r2, r3
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80055dc:	2303      	movs	r3, #3
 80055de:	e027      	b.n	8005630 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80055e0:	68ba      	ldr	r2, [r7, #8]
 80055e2:	68f8      	ldr	r0, [r7, #12]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	9300      	str	r3, [sp, #0]
 80055e8:	0013      	movs	r3, r2
 80055ea:	2200      	movs	r2, #0
 80055ec:	2180      	movs	r1, #128	@ 0x80
 80055ee:	f7ff fe4f 	bl	8005290 <SPI_WaitFlagStateUntilTimeout>
 80055f2:	1e03      	subs	r3, r0, #0
 80055f4:	d007      	beq.n	8005606 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055fa:	2220      	movs	r2, #32
 80055fc:	431a      	orrs	r2, r3
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005602:	2303      	movs	r3, #3
 8005604:	e014      	b.n	8005630 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005606:	68ba      	ldr	r2, [r7, #8]
 8005608:	23c0      	movs	r3, #192	@ 0xc0
 800560a:	00d9      	lsls	r1, r3, #3
 800560c:	68f8      	ldr	r0, [r7, #12]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	9300      	str	r3, [sp, #0]
 8005612:	0013      	movs	r3, r2
 8005614:	2200      	movs	r2, #0
 8005616:	f7ff fec9 	bl	80053ac <SPI_WaitFifoStateUntilTimeout>
 800561a:	1e03      	subs	r3, r0, #0
 800561c:	d007      	beq.n	800562e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005622:	2220      	movs	r2, #32
 8005624:	431a      	orrs	r2, r3
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800562a:	2303      	movs	r3, #3
 800562c:	e000      	b.n	8005630 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800562e:	2300      	movs	r3, #0
}
 8005630:	0018      	movs	r0, r3
 8005632:	46bd      	mov	sp, r7
 8005634:	b004      	add	sp, #16
 8005636:	bd80      	pop	{r7, pc}

08005638 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b084      	sub	sp, #16
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005640:	f7fd fbf2 	bl	8002e28 <HAL_GetTick>
 8005644:	0003      	movs	r3, r0
 8005646:	60fb      	str	r3, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	685a      	ldr	r2, [r3, #4]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	2120      	movs	r1, #32
 8005654:	438a      	bics	r2, r1
 8005656:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005658:	68fa      	ldr	r2, [r7, #12]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2164      	movs	r1, #100	@ 0x64
 800565e:	0018      	movs	r0, r3
 8005660:	f7ff ffa4 	bl	80055ac <SPI_EndRxTxTransaction>
 8005664:	1e03      	subs	r3, r0, #0
 8005666:	d005      	beq.n	8005674 <SPI_CloseRxTx_ISR+0x3c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800566c:	2220      	movs	r2, #32
 800566e:	431a      	orrs	r2, r3
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	661a      	str	r2, [r3, #96]	@ 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005678:	2b00      	cmp	r3, #0
 800567a:	d117      	bne.n	80056ac <SPI_CloseRxTx_ISR+0x74>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	225d      	movs	r2, #93	@ 0x5d
 8005680:	5c9b      	ldrb	r3, [r3, r2]
 8005682:	b2db      	uxtb	r3, r3
 8005684:	2b04      	cmp	r3, #4
 8005686:	d108      	bne.n	800569a <SPI_CloseRxTx_ISR+0x62>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	225d      	movs	r2, #93	@ 0x5d
 800568c:	2101      	movs	r1, #1
 800568e:	5499      	strb	r1, [r3, r2]
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	0018      	movs	r0, r3
 8005694:	f7fd f922 	bl	80028dc <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8005698:	e010      	b.n	80056bc <SPI_CloseRxTx_ISR+0x84>
        hspi->State = HAL_SPI_STATE_READY;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	225d      	movs	r2, #93	@ 0x5d
 800569e:	2101      	movs	r1, #1
 80056a0:	5499      	strb	r1, [r3, r2]
        HAL_SPI_TxRxCpltCallback(hspi);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	0018      	movs	r0, r3
 80056a6:	f7ff fc25 	bl	8004ef4 <HAL_SPI_TxRxCpltCallback>
}
 80056aa:	e007      	b.n	80056bc <SPI_CloseRxTx_ISR+0x84>
      hspi->State = HAL_SPI_STATE_READY;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	225d      	movs	r2, #93	@ 0x5d
 80056b0:	2101      	movs	r1, #1
 80056b2:	5499      	strb	r1, [r3, r2]
      HAL_SPI_ErrorCallback(hspi);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	0018      	movs	r0, r3
 80056b8:	f7ff fc24 	bl	8004f04 <HAL_SPI_ErrorCallback>
}
 80056bc:	46c0      	nop			@ (mov r8, r8)
 80056be:	46bd      	mov	sp, r7
 80056c0:	b004      	add	sp, #16
 80056c2:	bd80      	pop	{r7, pc}

080056c4 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b082      	sub	sp, #8
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	685a      	ldr	r2, [r3, #4]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	2160      	movs	r1, #96	@ 0x60
 80056d8:	438a      	bics	r2, r1
 80056da:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 80056dc:	f7fd fba4 	bl	8002e28 <HAL_GetTick>
 80056e0:	0002      	movs	r2, r0
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2164      	movs	r1, #100	@ 0x64
 80056e6:	0018      	movs	r0, r3
 80056e8:	f7ff ff02 	bl	80054f0 <SPI_EndRxTransaction>
 80056ec:	1e03      	subs	r3, r0, #0
 80056ee:	d005      	beq.n	80056fc <SPI_CloseRx_ISR+0x38>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056f4:	2220      	movs	r2, #32
 80056f6:	431a      	orrs	r2, r3
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	661a      	str	r2, [r3, #96]	@ 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	225d      	movs	r2, #93	@ 0x5d
 8005700:	2101      	movs	r1, #1
 8005702:	5499      	strb	r1, [r3, r2]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005708:	2b00      	cmp	r3, #0
 800570a:	d104      	bne.n	8005716 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	0018      	movs	r0, r3
 8005710:	f7fd f8e4 	bl	80028dc <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8005714:	e003      	b.n	800571e <SPI_CloseRx_ISR+0x5a>
      HAL_SPI_ErrorCallback(hspi);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	0018      	movs	r0, r3
 800571a:	f7ff fbf3 	bl	8004f04 <HAL_SPI_ErrorCallback>
}
 800571e:	46c0      	nop			@ (mov r8, r8)
 8005720:	46bd      	mov	sp, r7
 8005722:	b002      	add	sp, #8
 8005724:	bd80      	pop	{r7, pc}

08005726 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8005726:	b580      	push	{r7, lr}
 8005728:	b084      	sub	sp, #16
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800572e:	f7fd fb7b 	bl	8002e28 <HAL_GetTick>
 8005732:	0003      	movs	r3, r0
 8005734:	60fb      	str	r3, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	685a      	ldr	r2, [r3, #4]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	21a0      	movs	r1, #160	@ 0xa0
 8005742:	438a      	bics	r2, r1
 8005744:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005746:	68fa      	ldr	r2, [r7, #12]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2164      	movs	r1, #100	@ 0x64
 800574c:	0018      	movs	r0, r3
 800574e:	f7ff ff2d 	bl	80055ac <SPI_EndRxTxTransaction>
 8005752:	1e03      	subs	r3, r0, #0
 8005754:	d005      	beq.n	8005762 <SPI_CloseTx_ISR+0x3c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800575a:	2220      	movs	r2, #32
 800575c:	431a      	orrs	r2, r3
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d10a      	bne.n	8005780 <SPI_CloseTx_ISR+0x5a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800576a:	2300      	movs	r3, #0
 800576c:	60bb      	str	r3, [r7, #8]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	60bb      	str	r3, [r7, #8]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	60bb      	str	r3, [r7, #8]
 800577e:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	225d      	movs	r2, #93	@ 0x5d
 8005784:	2101      	movs	r1, #1
 8005786:	5499      	strb	r1, [r3, r2]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800578c:	2b00      	cmp	r3, #0
 800578e:	d004      	beq.n	800579a <SPI_CloseTx_ISR+0x74>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	0018      	movs	r0, r3
 8005794:	f7ff fbb6 	bl	8004f04 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8005798:	e003      	b.n	80057a2 <SPI_CloseTx_ISR+0x7c>
    HAL_SPI_TxCpltCallback(hspi);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	0018      	movs	r0, r3
 800579e:	f7fd f875 	bl	800288c <HAL_SPI_TxCpltCallback>
}
 80057a2:	46c0      	nop			@ (mov r8, r8)
 80057a4:	46bd      	mov	sp, r7
 80057a6:	b004      	add	sp, #16
 80057a8:	bd80      	pop	{r7, pc}

080057aa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80057aa:	b580      	push	{r7, lr}
 80057ac:	b082      	sub	sp, #8
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d101      	bne.n	80057bc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	e042      	b.n	8005842 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	223d      	movs	r2, #61	@ 0x3d
 80057c0:	5c9b      	ldrb	r3, [r3, r2]
 80057c2:	b2db      	uxtb	r3, r3
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d107      	bne.n	80057d8 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	223c      	movs	r2, #60	@ 0x3c
 80057cc:	2100      	movs	r1, #0
 80057ce:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	0018      	movs	r0, r3
 80057d4:	f7fd f9ce 	bl	8002b74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	223d      	movs	r2, #61	@ 0x3d
 80057dc:	2102      	movs	r1, #2
 80057de:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	3304      	adds	r3, #4
 80057e8:	0019      	movs	r1, r3
 80057ea:	0010      	movs	r0, r2
 80057ec:	f000 faa2 	bl	8005d34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2246      	movs	r2, #70	@ 0x46
 80057f4:	2101      	movs	r1, #1
 80057f6:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	223e      	movs	r2, #62	@ 0x3e
 80057fc:	2101      	movs	r1, #1
 80057fe:	5499      	strb	r1, [r3, r2]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	223f      	movs	r2, #63	@ 0x3f
 8005804:	2101      	movs	r1, #1
 8005806:	5499      	strb	r1, [r3, r2]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2240      	movs	r2, #64	@ 0x40
 800580c:	2101      	movs	r1, #1
 800580e:	5499      	strb	r1, [r3, r2]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2241      	movs	r2, #65	@ 0x41
 8005814:	2101      	movs	r1, #1
 8005816:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2242      	movs	r2, #66	@ 0x42
 800581c:	2101      	movs	r1, #1
 800581e:	5499      	strb	r1, [r3, r2]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2243      	movs	r2, #67	@ 0x43
 8005824:	2101      	movs	r1, #1
 8005826:	5499      	strb	r1, [r3, r2]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2244      	movs	r2, #68	@ 0x44
 800582c:	2101      	movs	r1, #1
 800582e:	5499      	strb	r1, [r3, r2]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2245      	movs	r2, #69	@ 0x45
 8005834:	2101      	movs	r1, #1
 8005836:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	223d      	movs	r2, #61	@ 0x3d
 800583c:	2101      	movs	r1, #1
 800583e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005840:	2300      	movs	r3, #0
}
 8005842:	0018      	movs	r0, r3
 8005844:	46bd      	mov	sp, r7
 8005846:	b002      	add	sp, #8
 8005848:	bd80      	pop	{r7, pc}
	...

0800584c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b084      	sub	sp, #16
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	223d      	movs	r2, #61	@ 0x3d
 8005858:	5c9b      	ldrb	r3, [r3, r2]
 800585a:	b2db      	uxtb	r3, r3
 800585c:	2b01      	cmp	r3, #1
 800585e:	d001      	beq.n	8005864 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005860:	2301      	movs	r3, #1
 8005862:	e035      	b.n	80058d0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	223d      	movs	r2, #61	@ 0x3d
 8005868:	2102      	movs	r1, #2
 800586a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	68da      	ldr	r2, [r3, #12]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	2101      	movs	r1, #1
 8005878:	430a      	orrs	r2, r1
 800587a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a15      	ldr	r2, [pc, #84]	@ (80058d8 <HAL_TIM_Base_Start_IT+0x8c>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d009      	beq.n	800589a <HAL_TIM_Base_Start_IT+0x4e>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a14      	ldr	r2, [pc, #80]	@ (80058dc <HAL_TIM_Base_Start_IT+0x90>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d004      	beq.n	800589a <HAL_TIM_Base_Start_IT+0x4e>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a12      	ldr	r2, [pc, #72]	@ (80058e0 <HAL_TIM_Base_Start_IT+0x94>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d111      	bne.n	80058be <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	2207      	movs	r2, #7
 80058a2:	4013      	ands	r3, r2
 80058a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2b06      	cmp	r3, #6
 80058aa:	d010      	beq.n	80058ce <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	2101      	movs	r1, #1
 80058b8:	430a      	orrs	r2, r1
 80058ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058bc:	e007      	b.n	80058ce <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	2101      	movs	r1, #1
 80058ca:	430a      	orrs	r2, r1
 80058cc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80058ce:	2300      	movs	r3, #0
}
 80058d0:	0018      	movs	r0, r3
 80058d2:	46bd      	mov	sp, r7
 80058d4:	b004      	add	sp, #16
 80058d6:	bd80      	pop	{r7, pc}
 80058d8:	40012c00 	.word	0x40012c00
 80058dc:	40000400 	.word	0x40000400
 80058e0:	40014000 	.word	0x40014000

080058e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b084      	sub	sp, #16
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	68db      	ldr	r3, [r3, #12]
 80058f2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	691b      	ldr	r3, [r3, #16]
 80058fa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	2202      	movs	r2, #2
 8005900:	4013      	ands	r3, r2
 8005902:	d021      	beq.n	8005948 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2202      	movs	r2, #2
 8005908:	4013      	ands	r3, r2
 800590a:	d01d      	beq.n	8005948 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	2203      	movs	r2, #3
 8005912:	4252      	negs	r2, r2
 8005914:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2201      	movs	r2, #1
 800591a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	699b      	ldr	r3, [r3, #24]
 8005922:	2203      	movs	r2, #3
 8005924:	4013      	ands	r3, r2
 8005926:	d004      	beq.n	8005932 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	0018      	movs	r0, r3
 800592c:	f000 f9ea 	bl	8005d04 <HAL_TIM_IC_CaptureCallback>
 8005930:	e007      	b.n	8005942 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	0018      	movs	r0, r3
 8005936:	f000 f9dd 	bl	8005cf4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	0018      	movs	r0, r3
 800593e:	f000 f9e9 	bl	8005d14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	2204      	movs	r2, #4
 800594c:	4013      	ands	r3, r2
 800594e:	d022      	beq.n	8005996 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2204      	movs	r2, #4
 8005954:	4013      	ands	r3, r2
 8005956:	d01e      	beq.n	8005996 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2205      	movs	r2, #5
 800595e:	4252      	negs	r2, r2
 8005960:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2202      	movs	r2, #2
 8005966:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	699a      	ldr	r2, [r3, #24]
 800596e:	23c0      	movs	r3, #192	@ 0xc0
 8005970:	009b      	lsls	r3, r3, #2
 8005972:	4013      	ands	r3, r2
 8005974:	d004      	beq.n	8005980 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	0018      	movs	r0, r3
 800597a:	f000 f9c3 	bl	8005d04 <HAL_TIM_IC_CaptureCallback>
 800597e:	e007      	b.n	8005990 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	0018      	movs	r0, r3
 8005984:	f000 f9b6 	bl	8005cf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	0018      	movs	r0, r3
 800598c:	f000 f9c2 	bl	8005d14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	2208      	movs	r2, #8
 800599a:	4013      	ands	r3, r2
 800599c:	d021      	beq.n	80059e2 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2208      	movs	r2, #8
 80059a2:	4013      	ands	r3, r2
 80059a4:	d01d      	beq.n	80059e2 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	2209      	movs	r2, #9
 80059ac:	4252      	negs	r2, r2
 80059ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2204      	movs	r2, #4
 80059b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	69db      	ldr	r3, [r3, #28]
 80059bc:	2203      	movs	r2, #3
 80059be:	4013      	ands	r3, r2
 80059c0:	d004      	beq.n	80059cc <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	0018      	movs	r0, r3
 80059c6:	f000 f99d 	bl	8005d04 <HAL_TIM_IC_CaptureCallback>
 80059ca:	e007      	b.n	80059dc <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	0018      	movs	r0, r3
 80059d0:	f000 f990 	bl	8005cf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	0018      	movs	r0, r3
 80059d8:	f000 f99c 	bl	8005d14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2200      	movs	r2, #0
 80059e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	2210      	movs	r2, #16
 80059e6:	4013      	ands	r3, r2
 80059e8:	d022      	beq.n	8005a30 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2210      	movs	r2, #16
 80059ee:	4013      	ands	r3, r2
 80059f0:	d01e      	beq.n	8005a30 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	2211      	movs	r2, #17
 80059f8:	4252      	negs	r2, r2
 80059fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2208      	movs	r2, #8
 8005a00:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	69da      	ldr	r2, [r3, #28]
 8005a08:	23c0      	movs	r3, #192	@ 0xc0
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	4013      	ands	r3, r2
 8005a0e:	d004      	beq.n	8005a1a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	0018      	movs	r0, r3
 8005a14:	f000 f976 	bl	8005d04 <HAL_TIM_IC_CaptureCallback>
 8005a18:	e007      	b.n	8005a2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	0018      	movs	r0, r3
 8005a1e:	f000 f969 	bl	8005cf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	0018      	movs	r0, r3
 8005a26:	f000 f975 	bl	8005d14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	2201      	movs	r2, #1
 8005a34:	4013      	ands	r3, r2
 8005a36:	d00c      	beq.n	8005a52 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	4013      	ands	r3, r2
 8005a3e:	d008      	beq.n	8005a52 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	2202      	movs	r2, #2
 8005a46:	4252      	negs	r2, r2
 8005a48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	0018      	movs	r0, r3
 8005a4e:	f7fc fe61 	bl	8002714 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	2280      	movs	r2, #128	@ 0x80
 8005a56:	4013      	ands	r3, r2
 8005a58:	d00c      	beq.n	8005a74 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2280      	movs	r2, #128	@ 0x80
 8005a5e:	4013      	ands	r3, r2
 8005a60:	d008      	beq.n	8005a74 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	2281      	movs	r2, #129	@ 0x81
 8005a68:	4252      	negs	r2, r2
 8005a6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	0018      	movs	r0, r3
 8005a70:	f000 fb70 	bl	8006154 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	2240      	movs	r2, #64	@ 0x40
 8005a78:	4013      	ands	r3, r2
 8005a7a:	d00c      	beq.n	8005a96 <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2240      	movs	r2, #64	@ 0x40
 8005a80:	4013      	ands	r3, r2
 8005a82:	d008      	beq.n	8005a96 <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	2241      	movs	r2, #65	@ 0x41
 8005a8a:	4252      	negs	r2, r2
 8005a8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	0018      	movs	r0, r3
 8005a92:	f000 f947 	bl	8005d24 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	2220      	movs	r2, #32
 8005a9a:	4013      	ands	r3, r2
 8005a9c:	d00c      	beq.n	8005ab8 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2220      	movs	r2, #32
 8005aa2:	4013      	ands	r3, r2
 8005aa4:	d008      	beq.n	8005ab8 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	2221      	movs	r2, #33	@ 0x21
 8005aac:	4252      	negs	r2, r2
 8005aae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	0018      	movs	r0, r3
 8005ab4:	f000 fb46 	bl	8006144 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ab8:	46c0      	nop			@ (mov r8, r8)
 8005aba:	46bd      	mov	sp, r7
 8005abc:	b004      	add	sp, #16
 8005abe:	bd80      	pop	{r7, pc}

08005ac0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b084      	sub	sp, #16
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005aca:	230f      	movs	r3, #15
 8005acc:	18fb      	adds	r3, r7, r3
 8005ace:	2200      	movs	r2, #0
 8005ad0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	223c      	movs	r2, #60	@ 0x3c
 8005ad6:	5c9b      	ldrb	r3, [r3, r2]
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d101      	bne.n	8005ae0 <HAL_TIM_ConfigClockSource+0x20>
 8005adc:	2302      	movs	r3, #2
 8005ade:	e0bc      	b.n	8005c5a <HAL_TIM_ConfigClockSource+0x19a>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	223c      	movs	r2, #60	@ 0x3c
 8005ae4:	2101      	movs	r1, #1
 8005ae6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	223d      	movs	r2, #61	@ 0x3d
 8005aec:	2102      	movs	r1, #2
 8005aee:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	2277      	movs	r2, #119	@ 0x77
 8005afc:	4393      	bics	r3, r2
 8005afe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	4a58      	ldr	r2, [pc, #352]	@ (8005c64 <HAL_TIM_ConfigClockSource+0x1a4>)
 8005b04:	4013      	ands	r3, r2
 8005b06:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	68ba      	ldr	r2, [r7, #8]
 8005b0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	2280      	movs	r2, #128	@ 0x80
 8005b16:	0192      	lsls	r2, r2, #6
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d040      	beq.n	8005b9e <HAL_TIM_ConfigClockSource+0xde>
 8005b1c:	2280      	movs	r2, #128	@ 0x80
 8005b1e:	0192      	lsls	r2, r2, #6
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d900      	bls.n	8005b26 <HAL_TIM_ConfigClockSource+0x66>
 8005b24:	e088      	b.n	8005c38 <HAL_TIM_ConfigClockSource+0x178>
 8005b26:	2280      	movs	r2, #128	@ 0x80
 8005b28:	0152      	lsls	r2, r2, #5
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d100      	bne.n	8005b30 <HAL_TIM_ConfigClockSource+0x70>
 8005b2e:	e088      	b.n	8005c42 <HAL_TIM_ConfigClockSource+0x182>
 8005b30:	2280      	movs	r2, #128	@ 0x80
 8005b32:	0152      	lsls	r2, r2, #5
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d900      	bls.n	8005b3a <HAL_TIM_ConfigClockSource+0x7a>
 8005b38:	e07e      	b.n	8005c38 <HAL_TIM_ConfigClockSource+0x178>
 8005b3a:	2b70      	cmp	r3, #112	@ 0x70
 8005b3c:	d018      	beq.n	8005b70 <HAL_TIM_ConfigClockSource+0xb0>
 8005b3e:	d900      	bls.n	8005b42 <HAL_TIM_ConfigClockSource+0x82>
 8005b40:	e07a      	b.n	8005c38 <HAL_TIM_ConfigClockSource+0x178>
 8005b42:	2b60      	cmp	r3, #96	@ 0x60
 8005b44:	d04f      	beq.n	8005be6 <HAL_TIM_ConfigClockSource+0x126>
 8005b46:	d900      	bls.n	8005b4a <HAL_TIM_ConfigClockSource+0x8a>
 8005b48:	e076      	b.n	8005c38 <HAL_TIM_ConfigClockSource+0x178>
 8005b4a:	2b50      	cmp	r3, #80	@ 0x50
 8005b4c:	d03b      	beq.n	8005bc6 <HAL_TIM_ConfigClockSource+0x106>
 8005b4e:	d900      	bls.n	8005b52 <HAL_TIM_ConfigClockSource+0x92>
 8005b50:	e072      	b.n	8005c38 <HAL_TIM_ConfigClockSource+0x178>
 8005b52:	2b40      	cmp	r3, #64	@ 0x40
 8005b54:	d057      	beq.n	8005c06 <HAL_TIM_ConfigClockSource+0x146>
 8005b56:	d900      	bls.n	8005b5a <HAL_TIM_ConfigClockSource+0x9a>
 8005b58:	e06e      	b.n	8005c38 <HAL_TIM_ConfigClockSource+0x178>
 8005b5a:	2b30      	cmp	r3, #48	@ 0x30
 8005b5c:	d063      	beq.n	8005c26 <HAL_TIM_ConfigClockSource+0x166>
 8005b5e:	d86b      	bhi.n	8005c38 <HAL_TIM_ConfigClockSource+0x178>
 8005b60:	2b20      	cmp	r3, #32
 8005b62:	d060      	beq.n	8005c26 <HAL_TIM_ConfigClockSource+0x166>
 8005b64:	d868      	bhi.n	8005c38 <HAL_TIM_ConfigClockSource+0x178>
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d05d      	beq.n	8005c26 <HAL_TIM_ConfigClockSource+0x166>
 8005b6a:	2b10      	cmp	r3, #16
 8005b6c:	d05b      	beq.n	8005c26 <HAL_TIM_ConfigClockSource+0x166>
 8005b6e:	e063      	b.n	8005c38 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b80:	f000 fa68 	bl	8006054 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	2277      	movs	r2, #119	@ 0x77
 8005b90:	4313      	orrs	r3, r2
 8005b92:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	68ba      	ldr	r2, [r7, #8]
 8005b9a:	609a      	str	r2, [r3, #8]
      break;
 8005b9c:	e052      	b.n	8005c44 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005bae:	f000 fa51 	bl	8006054 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	689a      	ldr	r2, [r3, #8]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	2180      	movs	r1, #128	@ 0x80
 8005bbe:	01c9      	lsls	r1, r1, #7
 8005bc0:	430a      	orrs	r2, r1
 8005bc2:	609a      	str	r2, [r3, #8]
      break;
 8005bc4:	e03e      	b.n	8005c44 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bd2:	001a      	movs	r2, r3
 8005bd4:	f000 f9c4 	bl	8005f60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	2150      	movs	r1, #80	@ 0x50
 8005bde:	0018      	movs	r0, r3
 8005be0:	f000 fa1e 	bl	8006020 <TIM_ITRx_SetConfig>
      break;
 8005be4:	e02e      	b.n	8005c44 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005bf2:	001a      	movs	r2, r3
 8005bf4:	f000 f9e2 	bl	8005fbc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	2160      	movs	r1, #96	@ 0x60
 8005bfe:	0018      	movs	r0, r3
 8005c00:	f000 fa0e 	bl	8006020 <TIM_ITRx_SetConfig>
      break;
 8005c04:	e01e      	b.n	8005c44 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c12:	001a      	movs	r2, r3
 8005c14:	f000 f9a4 	bl	8005f60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	2140      	movs	r1, #64	@ 0x40
 8005c1e:	0018      	movs	r0, r3
 8005c20:	f000 f9fe 	bl	8006020 <TIM_ITRx_SetConfig>
      break;
 8005c24:	e00e      	b.n	8005c44 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	0019      	movs	r1, r3
 8005c30:	0010      	movs	r0, r2
 8005c32:	f000 f9f5 	bl	8006020 <TIM_ITRx_SetConfig>
      break;
 8005c36:	e005      	b.n	8005c44 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8005c38:	230f      	movs	r3, #15
 8005c3a:	18fb      	adds	r3, r7, r3
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	701a      	strb	r2, [r3, #0]
      break;
 8005c40:	e000      	b.n	8005c44 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8005c42:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	223d      	movs	r2, #61	@ 0x3d
 8005c48:	2101      	movs	r1, #1
 8005c4a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	223c      	movs	r2, #60	@ 0x3c
 8005c50:	2100      	movs	r1, #0
 8005c52:	5499      	strb	r1, [r3, r2]

  return status;
 8005c54:	230f      	movs	r3, #15
 8005c56:	18fb      	adds	r3, r7, r3
 8005c58:	781b      	ldrb	r3, [r3, #0]
}
 8005c5a:	0018      	movs	r0, r3
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	b004      	add	sp, #16
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	46c0      	nop			@ (mov r8, r8)
 8005c64:	ffff00ff 	.word	0xffff00ff

08005c68 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b082      	sub	sp, #8
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	223c      	movs	r2, #60	@ 0x3c
 8005c76:	5c9b      	ldrb	r3, [r3, r2]
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d101      	bne.n	8005c80 <HAL_TIM_SlaveConfigSynchro+0x18>
 8005c7c:	2302      	movs	r3, #2
 8005c7e:	e032      	b.n	8005ce6 <HAL_TIM_SlaveConfigSynchro+0x7e>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	223c      	movs	r2, #60	@ 0x3c
 8005c84:	2101      	movs	r1, #1
 8005c86:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	223d      	movs	r2, #61	@ 0x3d
 8005c8c:	2102      	movs	r1, #2
 8005c8e:	5499      	strb	r1, [r3, r2]

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005c90:	683a      	ldr	r2, [r7, #0]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	0011      	movs	r1, r2
 8005c96:	0018      	movs	r0, r3
 8005c98:	f000 f8d0 	bl	8005e3c <TIM_SlaveTimer_SetConfig>
 8005c9c:	1e03      	subs	r3, r0, #0
 8005c9e:	d009      	beq.n	8005cb4 <HAL_TIM_SlaveConfigSynchro+0x4c>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	223d      	movs	r2, #61	@ 0x3d
 8005ca4:	2101      	movs	r1, #1
 8005ca6:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(htim);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	223c      	movs	r2, #60	@ 0x3c
 8005cac:	2100      	movs	r1, #0
 8005cae:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	e018      	b.n	8005ce6 <HAL_TIM_SlaveConfigSynchro+0x7e>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	68da      	ldr	r2, [r3, #12]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	2140      	movs	r1, #64	@ 0x40
 8005cc0:	438a      	bics	r2, r1
 8005cc2:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	68da      	ldr	r2, [r3, #12]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4908      	ldr	r1, [pc, #32]	@ (8005cf0 <HAL_TIM_SlaveConfigSynchro+0x88>)
 8005cd0:	400a      	ands	r2, r1
 8005cd2:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	223d      	movs	r2, #61	@ 0x3d
 8005cd8:	2101      	movs	r1, #1
 8005cda:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	223c      	movs	r2, #60	@ 0x3c
 8005ce0:	2100      	movs	r1, #0
 8005ce2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005ce4:	2300      	movs	r3, #0
}
 8005ce6:	0018      	movs	r0, r3
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	b002      	add	sp, #8
 8005cec:	bd80      	pop	{r7, pc}
 8005cee:	46c0      	nop			@ (mov r8, r8)
 8005cf0:	ffffbfff 	.word	0xffffbfff

08005cf4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b082      	sub	sp, #8
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005cfc:	46c0      	nop			@ (mov r8, r8)
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	b002      	add	sp, #8
 8005d02:	bd80      	pop	{r7, pc}

08005d04 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b082      	sub	sp, #8
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d0c:	46c0      	nop			@ (mov r8, r8)
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	b002      	add	sp, #8
 8005d12:	bd80      	pop	{r7, pc}

08005d14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b082      	sub	sp, #8
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d1c:	46c0      	nop			@ (mov r8, r8)
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	b002      	add	sp, #8
 8005d22:	bd80      	pop	{r7, pc}

08005d24 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b082      	sub	sp, #8
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d2c:	46c0      	nop			@ (mov r8, r8)
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	b002      	add	sp, #8
 8005d32:	bd80      	pop	{r7, pc}

08005d34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b084      	sub	sp, #16
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
 8005d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	4a36      	ldr	r2, [pc, #216]	@ (8005e20 <TIM_Base_SetConfig+0xec>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d003      	beq.n	8005d54 <TIM_Base_SetConfig+0x20>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	4a35      	ldr	r2, [pc, #212]	@ (8005e24 <TIM_Base_SetConfig+0xf0>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d108      	bne.n	8005d66 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2270      	movs	r2, #112	@ 0x70
 8005d58:	4393      	bics	r3, r2
 8005d5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	68fa      	ldr	r2, [r7, #12]
 8005d62:	4313      	orrs	r3, r2
 8005d64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	4a2d      	ldr	r2, [pc, #180]	@ (8005e20 <TIM_Base_SetConfig+0xec>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d013      	beq.n	8005d96 <TIM_Base_SetConfig+0x62>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	4a2c      	ldr	r2, [pc, #176]	@ (8005e24 <TIM_Base_SetConfig+0xf0>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d00f      	beq.n	8005d96 <TIM_Base_SetConfig+0x62>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	4a2b      	ldr	r2, [pc, #172]	@ (8005e28 <TIM_Base_SetConfig+0xf4>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d00b      	beq.n	8005d96 <TIM_Base_SetConfig+0x62>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	4a2a      	ldr	r2, [pc, #168]	@ (8005e2c <TIM_Base_SetConfig+0xf8>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d007      	beq.n	8005d96 <TIM_Base_SetConfig+0x62>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	4a29      	ldr	r2, [pc, #164]	@ (8005e30 <TIM_Base_SetConfig+0xfc>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d003      	beq.n	8005d96 <TIM_Base_SetConfig+0x62>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	4a28      	ldr	r2, [pc, #160]	@ (8005e34 <TIM_Base_SetConfig+0x100>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d108      	bne.n	8005da8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	4a27      	ldr	r2, [pc, #156]	@ (8005e38 <TIM_Base_SetConfig+0x104>)
 8005d9a:	4013      	ands	r3, r2
 8005d9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	68db      	ldr	r3, [r3, #12]
 8005da2:	68fa      	ldr	r2, [r7, #12]
 8005da4:	4313      	orrs	r3, r2
 8005da6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2280      	movs	r2, #128	@ 0x80
 8005dac:	4393      	bics	r3, r2
 8005dae:	001a      	movs	r2, r3
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	695b      	ldr	r3, [r3, #20]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	68fa      	ldr	r2, [r7, #12]
 8005dbc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	689a      	ldr	r2, [r3, #8]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4a13      	ldr	r2, [pc, #76]	@ (8005e20 <TIM_Base_SetConfig+0xec>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d00b      	beq.n	8005dee <TIM_Base_SetConfig+0xba>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4a14      	ldr	r2, [pc, #80]	@ (8005e2c <TIM_Base_SetConfig+0xf8>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d007      	beq.n	8005dee <TIM_Base_SetConfig+0xba>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	4a13      	ldr	r2, [pc, #76]	@ (8005e30 <TIM_Base_SetConfig+0xfc>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d003      	beq.n	8005dee <TIM_Base_SetConfig+0xba>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	4a12      	ldr	r2, [pc, #72]	@ (8005e34 <TIM_Base_SetConfig+0x100>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d103      	bne.n	8005df6 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	691a      	ldr	r2, [r3, #16]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2201      	movs	r2, #1
 8005dfa:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	691b      	ldr	r3, [r3, #16]
 8005e00:	2201      	movs	r2, #1
 8005e02:	4013      	ands	r3, r2
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d106      	bne.n	8005e16 <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	691b      	ldr	r3, [r3, #16]
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	4393      	bics	r3, r2
 8005e10:	001a      	movs	r2, r3
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	611a      	str	r2, [r3, #16]
  }
}
 8005e16:	46c0      	nop			@ (mov r8, r8)
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	b004      	add	sp, #16
 8005e1c:	bd80      	pop	{r7, pc}
 8005e1e:	46c0      	nop			@ (mov r8, r8)
 8005e20:	40012c00 	.word	0x40012c00
 8005e24:	40000400 	.word	0x40000400
 8005e28:	40002000 	.word	0x40002000
 8005e2c:	40014000 	.word	0x40014000
 8005e30:	40014400 	.word	0x40014400
 8005e34:	40014800 	.word	0x40014800
 8005e38:	fffffcff 	.word	0xfffffcff

08005e3c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b086      	sub	sp, #24
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e46:	2317      	movs	r3, #23
 8005e48:	18fb      	adds	r3, r7, r3
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	2270      	movs	r2, #112	@ 0x70
 8005e5a:	4393      	bics	r3, r2
 8005e5c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	693a      	ldr	r2, [r7, #16]
 8005e64:	4313      	orrs	r3, r2
 8005e66:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	2207      	movs	r2, #7
 8005e6c:	4393      	bics	r3, r2
 8005e6e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	693a      	ldr	r2, [r7, #16]
 8005e76:	4313      	orrs	r3, r2
 8005e78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	693a      	ldr	r2, [r7, #16]
 8005e80:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	2b70      	cmp	r3, #112	@ 0x70
 8005e88:	d015      	beq.n	8005eb6 <TIM_SlaveTimer_SetConfig+0x7a>
 8005e8a:	d900      	bls.n	8005e8e <TIM_SlaveTimer_SetConfig+0x52>
 8005e8c:	e05b      	b.n	8005f46 <TIM_SlaveTimer_SetConfig+0x10a>
 8005e8e:	2b60      	cmp	r3, #96	@ 0x60
 8005e90:	d04f      	beq.n	8005f32 <TIM_SlaveTimer_SetConfig+0xf6>
 8005e92:	d858      	bhi.n	8005f46 <TIM_SlaveTimer_SetConfig+0x10a>
 8005e94:	2b50      	cmp	r3, #80	@ 0x50
 8005e96:	d042      	beq.n	8005f1e <TIM_SlaveTimer_SetConfig+0xe2>
 8005e98:	d855      	bhi.n	8005f46 <TIM_SlaveTimer_SetConfig+0x10a>
 8005e9a:	2b40      	cmp	r3, #64	@ 0x40
 8005e9c:	d016      	beq.n	8005ecc <TIM_SlaveTimer_SetConfig+0x90>
 8005e9e:	d852      	bhi.n	8005f46 <TIM_SlaveTimer_SetConfig+0x10a>
 8005ea0:	2b30      	cmp	r3, #48	@ 0x30
 8005ea2:	d055      	beq.n	8005f50 <TIM_SlaveTimer_SetConfig+0x114>
 8005ea4:	d84f      	bhi.n	8005f46 <TIM_SlaveTimer_SetConfig+0x10a>
 8005ea6:	2b20      	cmp	r3, #32
 8005ea8:	d052      	beq.n	8005f50 <TIM_SlaveTimer_SetConfig+0x114>
 8005eaa:	d84c      	bhi.n	8005f46 <TIM_SlaveTimer_SetConfig+0x10a>
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d04f      	beq.n	8005f50 <TIM_SlaveTimer_SetConfig+0x114>
 8005eb0:	2b10      	cmp	r3, #16
 8005eb2:	d04d      	beq.n	8005f50 <TIM_SlaveTimer_SetConfig+0x114>
 8005eb4:	e047      	b.n	8005f46 <TIM_SlaveTimer_SetConfig+0x10a>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8005ec6:	f000 f8c5 	bl	8006054 <TIM_ETR_SetConfig>
      break;
 8005eca:	e042      	b.n	8005f52 <TIM_SlaveTimer_SetConfig+0x116>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	2b05      	cmp	r3, #5
 8005ed2:	d101      	bne.n	8005ed8 <TIM_SlaveTimer_SetConfig+0x9c>
      {
        return HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	e03f      	b.n	8005f58 <TIM_SlaveTimer_SetConfig+0x11c>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	6a1b      	ldr	r3, [r3, #32]
 8005ede:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	6a1a      	ldr	r2, [r3, #32]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	2101      	movs	r1, #1
 8005eec:	438a      	bics	r2, r1
 8005eee:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	699b      	ldr	r3, [r3, #24]
 8005ef6:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	22f0      	movs	r2, #240	@ 0xf0
 8005efc:	4393      	bics	r3, r2
 8005efe:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	691b      	ldr	r3, [r3, #16]
 8005f04:	011b      	lsls	r3, r3, #4
 8005f06:	68ba      	ldr	r2, [r7, #8]
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	68ba      	ldr	r2, [r7, #8]
 8005f12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	68fa      	ldr	r2, [r7, #12]
 8005f1a:	621a      	str	r2, [r3, #32]
      break;
 8005f1c:	e019      	b.n	8005f52 <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f2a:	001a      	movs	r2, r3
 8005f2c:	f000 f818 	bl	8005f60 <TIM_TI1_ConfigInputStage>
      break;
 8005f30:	e00f      	b.n	8005f52 <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f3e:	001a      	movs	r2, r3
 8005f40:	f000 f83c 	bl	8005fbc <TIM_TI2_ConfigInputStage>
      break;
 8005f44:	e005      	b.n	8005f52 <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8005f46:	2317      	movs	r3, #23
 8005f48:	18fb      	adds	r3, r7, r3
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	701a      	strb	r2, [r3, #0]
      break;
 8005f4e:	e000      	b.n	8005f52 <TIM_SlaveTimer_SetConfig+0x116>
      break;
 8005f50:	46c0      	nop			@ (mov r8, r8)
  }

  return status;
 8005f52:	2317      	movs	r3, #23
 8005f54:	18fb      	adds	r3, r7, r3
 8005f56:	781b      	ldrb	r3, [r3, #0]
}
 8005f58:	0018      	movs	r0, r3
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	b006      	add	sp, #24
 8005f5e:	bd80      	pop	{r7, pc}

08005f60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b086      	sub	sp, #24
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	60f8      	str	r0, [r7, #12]
 8005f68:	60b9      	str	r1, [r7, #8]
 8005f6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	6a1b      	ldr	r3, [r3, #32]
 8005f70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	6a1b      	ldr	r3, [r3, #32]
 8005f76:	2201      	movs	r2, #1
 8005f78:	4393      	bics	r3, r2
 8005f7a:	001a      	movs	r2, r3
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	699b      	ldr	r3, [r3, #24]
 8005f84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	22f0      	movs	r2, #240	@ 0xf0
 8005f8a:	4393      	bics	r3, r2
 8005f8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	011b      	lsls	r3, r3, #4
 8005f92:	693a      	ldr	r2, [r7, #16]
 8005f94:	4313      	orrs	r3, r2
 8005f96:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	220a      	movs	r2, #10
 8005f9c:	4393      	bics	r3, r2
 8005f9e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005fa0:	697a      	ldr	r2, [r7, #20]
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	693a      	ldr	r2, [r7, #16]
 8005fac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	697a      	ldr	r2, [r7, #20]
 8005fb2:	621a      	str	r2, [r3, #32]
}
 8005fb4:	46c0      	nop			@ (mov r8, r8)
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	b006      	add	sp, #24
 8005fba:	bd80      	pop	{r7, pc}

08005fbc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b086      	sub	sp, #24
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	60b9      	str	r1, [r7, #8]
 8005fc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	6a1b      	ldr	r3, [r3, #32]
 8005fcc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6a1b      	ldr	r3, [r3, #32]
 8005fd2:	2210      	movs	r2, #16
 8005fd4:	4393      	bics	r3, r2
 8005fd6:	001a      	movs	r2, r3
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	699b      	ldr	r3, [r3, #24]
 8005fe0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	4a0d      	ldr	r2, [pc, #52]	@ (800601c <TIM_TI2_ConfigInputStage+0x60>)
 8005fe6:	4013      	ands	r3, r2
 8005fe8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	031b      	lsls	r3, r3, #12
 8005fee:	693a      	ldr	r2, [r7, #16]
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	22a0      	movs	r2, #160	@ 0xa0
 8005ff8:	4393      	bics	r3, r2
 8005ffa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	011b      	lsls	r3, r3, #4
 8006000:	697a      	ldr	r2, [r7, #20]
 8006002:	4313      	orrs	r3, r2
 8006004:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	693a      	ldr	r2, [r7, #16]
 800600a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	697a      	ldr	r2, [r7, #20]
 8006010:	621a      	str	r2, [r3, #32]
}
 8006012:	46c0      	nop			@ (mov r8, r8)
 8006014:	46bd      	mov	sp, r7
 8006016:	b006      	add	sp, #24
 8006018:	bd80      	pop	{r7, pc}
 800601a:	46c0      	nop			@ (mov r8, r8)
 800601c:	ffff0fff 	.word	0xffff0fff

08006020 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b084      	sub	sp, #16
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2270      	movs	r2, #112	@ 0x70
 8006034:	4393      	bics	r3, r2
 8006036:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006038:	683a      	ldr	r2, [r7, #0]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	4313      	orrs	r3, r2
 800603e:	2207      	movs	r2, #7
 8006040:	4313      	orrs	r3, r2
 8006042:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	68fa      	ldr	r2, [r7, #12]
 8006048:	609a      	str	r2, [r3, #8]
}
 800604a:	46c0      	nop			@ (mov r8, r8)
 800604c:	46bd      	mov	sp, r7
 800604e:	b004      	add	sp, #16
 8006050:	bd80      	pop	{r7, pc}
	...

08006054 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b086      	sub	sp, #24
 8006058:	af00      	add	r7, sp, #0
 800605a:	60f8      	str	r0, [r7, #12]
 800605c:	60b9      	str	r1, [r7, #8]
 800605e:	607a      	str	r2, [r7, #4]
 8006060:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	4a09      	ldr	r2, [pc, #36]	@ (8006090 <TIM_ETR_SetConfig+0x3c>)
 800606c:	4013      	ands	r3, r2
 800606e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	021a      	lsls	r2, r3, #8
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	431a      	orrs	r2, r3
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	4313      	orrs	r3, r2
 800607c:	697a      	ldr	r2, [r7, #20]
 800607e:	4313      	orrs	r3, r2
 8006080:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	697a      	ldr	r2, [r7, #20]
 8006086:	609a      	str	r2, [r3, #8]
}
 8006088:	46c0      	nop			@ (mov r8, r8)
 800608a:	46bd      	mov	sp, r7
 800608c:	b006      	add	sp, #24
 800608e:	bd80      	pop	{r7, pc}
 8006090:	ffff00ff 	.word	0xffff00ff

08006094 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b084      	sub	sp, #16
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
 800609c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	223c      	movs	r2, #60	@ 0x3c
 80060a2:	5c9b      	ldrb	r3, [r3, r2]
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d101      	bne.n	80060ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80060a8:	2302      	movs	r3, #2
 80060aa:	e041      	b.n	8006130 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	223c      	movs	r2, #60	@ 0x3c
 80060b0:	2101      	movs	r1, #1
 80060b2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	223d      	movs	r2, #61	@ 0x3d
 80060b8:	2102      	movs	r1, #2
 80060ba:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2270      	movs	r2, #112	@ 0x70
 80060d0:	4393      	bics	r3, r2
 80060d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	68fa      	ldr	r2, [r7, #12]
 80060da:	4313      	orrs	r3, r2
 80060dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	68fa      	ldr	r2, [r7, #12]
 80060e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a13      	ldr	r2, [pc, #76]	@ (8006138 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d009      	beq.n	8006104 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a11      	ldr	r2, [pc, #68]	@ (800613c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d004      	beq.n	8006104 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a10      	ldr	r2, [pc, #64]	@ (8006140 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d10c      	bne.n	800611e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	2280      	movs	r2, #128	@ 0x80
 8006108:	4393      	bics	r3, r2
 800610a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	68ba      	ldr	r2, [r7, #8]
 8006112:	4313      	orrs	r3, r2
 8006114:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	68ba      	ldr	r2, [r7, #8]
 800611c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	223d      	movs	r2, #61	@ 0x3d
 8006122:	2101      	movs	r1, #1
 8006124:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	223c      	movs	r2, #60	@ 0x3c
 800612a:	2100      	movs	r1, #0
 800612c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800612e:	2300      	movs	r3, #0
}
 8006130:	0018      	movs	r0, r3
 8006132:	46bd      	mov	sp, r7
 8006134:	b004      	add	sp, #16
 8006136:	bd80      	pop	{r7, pc}
 8006138:	40012c00 	.word	0x40012c00
 800613c:	40000400 	.word	0x40000400
 8006140:	40014000 	.word	0x40014000

08006144 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b082      	sub	sp, #8
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800614c:	46c0      	nop			@ (mov r8, r8)
 800614e:	46bd      	mov	sp, r7
 8006150:	b002      	add	sp, #8
 8006152:	bd80      	pop	{r7, pc}

08006154 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b082      	sub	sp, #8
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800615c:	46c0      	nop			@ (mov r8, r8)
 800615e:	46bd      	mov	sp, r7
 8006160:	b002      	add	sp, #8
 8006162:	bd80      	pop	{r7, pc}

08006164 <memset>:
 8006164:	0003      	movs	r3, r0
 8006166:	1882      	adds	r2, r0, r2
 8006168:	4293      	cmp	r3, r2
 800616a:	d100      	bne.n	800616e <memset+0xa>
 800616c:	4770      	bx	lr
 800616e:	7019      	strb	r1, [r3, #0]
 8006170:	3301      	adds	r3, #1
 8006172:	e7f9      	b.n	8006168 <memset+0x4>

08006174 <__libc_init_array>:
 8006174:	b570      	push	{r4, r5, r6, lr}
 8006176:	2600      	movs	r6, #0
 8006178:	4c0c      	ldr	r4, [pc, #48]	@ (80061ac <__libc_init_array+0x38>)
 800617a:	4d0d      	ldr	r5, [pc, #52]	@ (80061b0 <__libc_init_array+0x3c>)
 800617c:	1b64      	subs	r4, r4, r5
 800617e:	10a4      	asrs	r4, r4, #2
 8006180:	42a6      	cmp	r6, r4
 8006182:	d109      	bne.n	8006198 <__libc_init_array+0x24>
 8006184:	2600      	movs	r6, #0
 8006186:	f000 f819 	bl	80061bc <_init>
 800618a:	4c0a      	ldr	r4, [pc, #40]	@ (80061b4 <__libc_init_array+0x40>)
 800618c:	4d0a      	ldr	r5, [pc, #40]	@ (80061b8 <__libc_init_array+0x44>)
 800618e:	1b64      	subs	r4, r4, r5
 8006190:	10a4      	asrs	r4, r4, #2
 8006192:	42a6      	cmp	r6, r4
 8006194:	d105      	bne.n	80061a2 <__libc_init_array+0x2e>
 8006196:	bd70      	pop	{r4, r5, r6, pc}
 8006198:	00b3      	lsls	r3, r6, #2
 800619a:	58eb      	ldr	r3, [r5, r3]
 800619c:	4798      	blx	r3
 800619e:	3601      	adds	r6, #1
 80061a0:	e7ee      	b.n	8006180 <__libc_init_array+0xc>
 80061a2:	00b3      	lsls	r3, r6, #2
 80061a4:	58eb      	ldr	r3, [r5, r3]
 80061a6:	4798      	blx	r3
 80061a8:	3601      	adds	r6, #1
 80061aa:	e7f2      	b.n	8006192 <__libc_init_array+0x1e>
 80061ac:	08006284 	.word	0x08006284
 80061b0:	08006284 	.word	0x08006284
 80061b4:	08006288 	.word	0x08006288
 80061b8:	08006284 	.word	0x08006284

080061bc <_init>:
 80061bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061be:	46c0      	nop			@ (mov r8, r8)
 80061c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061c2:	bc08      	pop	{r3}
 80061c4:	469e      	mov	lr, r3
 80061c6:	4770      	bx	lr

080061c8 <_fini>:
 80061c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ca:	46c0      	nop			@ (mov r8, r8)
 80061cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061ce:	bc08      	pop	{r3}
 80061d0:	469e      	mov	lr, r3
 80061d2:	4770      	bx	lr
